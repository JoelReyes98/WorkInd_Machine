import { CommonModule } from '@angular/common';
import { Component, Directive, HostBinding, Optional, Inject, Input, NgModule } from '@angular/core';
import { IgxButtonModule } from '../directives/button/button.directive';
import { mkenum } from '../core/utils';
import * as ɵngcc0 from '@angular/core';

const _c0 = [[["igx-avatar"], ["igx-card-media"], ["", "igxCardThumbnail", ""]], [["", "igxCardHeaderTitle", ""], ["", "igxCardHeaderSubtitle", ""], ["", 8, "igx-card-header__title"], ["", 8, "igx-card-header__subtitle"]], "*"];
const _c1 = ["igx-avatar, igx-card-media, [igxCardThumbnail]", "\n        [igxCardHeaderTitle],\n        [igxCardHeaderSubtitle],\n        .igx-card-header__title,\n        .igx-card-header__subtitle", "*"];
const _c2 = ["*"];
const _c3 = [[["igx-icon"], ["", "igxButton", "icon"]], [["", "igxButton", ""]], "*"];
const _c4 = ["igx-icon, [igxButton='icon']", "[igxButton]", "*"];
let NEXT_ID = 0;
/**
 * IgxCardMedia is container for the card media section.
 * Use it to wrap images and videos.
 */
export class IgxCardMediaDirective {
    constructor() {
        /** @hidden @internal */
        this.cssClass = 'igx-card__media';
        /**
         * An @Input property that sets the `width` and `min-width` style property
         * of the media container. If not provided it will be set to `auto`.
         *
         * @example
         * ```html
         * <igx-card-media width="300px"></igx-card-media>
         * ```
         */
        this.width = 'auto';
        /**
         * An @Input property that sets the `height` style property of the media container.
         * If not provided it will be set to `auto`.
         *
         * @example
         * ```html
         * <igx-card-media height="50%"></igx-card-media>
         * ```
         */
        this.height = 'auto';
        /**
         * An @Input property that sets the `role` attribute of the media container.
         */
        this.role = 'img';
    }
}
IgxCardMediaDirective.ɵfac = function IgxCardMediaDirective_Factory(t) { return new (t || IgxCardMediaDirective)(); };
IgxCardMediaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCardMediaDirective, selectors: [["igx-card-media"]], hostVars: 9, hostBindings: function IgxCardMediaDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role);
        ɵngcc0.ɵɵstyleProp("width", ctx.width)("min-width", ctx.width)("height", ctx.height);
        ɵngcc0.ɵɵclassProp("igx-card__media", ctx.cssClass);
    } }, inputs: { width: "width", height: "height", role: "role" } });
IgxCardMediaDirective.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-card__media',] }],
    width: [{ type: HostBinding, args: ['style.width',] }, { type: HostBinding, args: ['style.min-width',] }, { type: Input }],
    height: [{ type: HostBinding, args: ['style.height',] }, { type: Input }],
    role: [{ type: HostBinding, args: ['attr.role',] }, { type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardMediaDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'igx-card-media'
            }]
    }], function () { return []; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-card__media']
        }], width: [{
            type: HostBinding,
            args: ['style.width']
        }, {
            type: HostBinding,
            args: ['style.min-width']
        }, {
            type: Input
        }], height: [{
            type: HostBinding,
            args: ['style.height']
        }, {
            type: Input
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }, {
            type: Input
        }] }); })();
/**
 * IgxCardHeader is container for the card header
 */
export class IgxCardHeaderComponent {
    constructor() {
        /** @hidden @internal */
        this.cssClass = 'igx-card-header';
        /**
         * An @Input property that sets the layout style of the header.
         * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.
         *
         * @example
         * ```html
         * <igx-card-header [vertical]="true"></igx-card-header>
         * ```
         */
        this.vertical = false;
        /**
         * An @Input property that sets the value of the `role` attribute of the card header.
         * By default the value is set to `header`.
         *
         * @example
         * ```html
         * <igx-card-header role="header"></igx-card-header>
         * ```
         */
        this.role = 'header';
    }
}
IgxCardHeaderComponent.ɵfac = function IgxCardHeaderComponent_Factory(t) { return new (t || IgxCardHeaderComponent)(); };
IgxCardHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxCardHeaderComponent, selectors: [["igx-card-header"]], hostVars: 5, hostBindings: function IgxCardHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role);
        ɵngcc0.ɵɵclassProp("igx-card-header", ctx.cssClass)("igx-card-header--vertical", ctx.vertical);
    } }, inputs: { vertical: "vertical" }, ngContentSelectors: _c1, decls: 5, vars: 0, consts: [[1, "igx-card-header__thumbnail"], [1, "igx-card-header__titles"]], template: function IgxCardHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵprojection(3, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(4, 2);
    } }, encapsulation: 2 });
IgxCardHeaderComponent.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-card-header',] }],
    vertical: [{ type: HostBinding, args: ['class.igx-card-header--vertical',] }, { type: Input }],
    role: [{ type: HostBinding, args: ['attr.role',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'igx-card-header',
                template: "<div class=\"igx-card-header__thumbnail\">\n    <ng-content select=\"igx-avatar, igx-card-media, [igxCardThumbnail]\"></ng-content>\n</div>\n\n<div class=\"igx-card-header__titles\">\n    <ng-content select=\"\n        [igxCardHeaderTitle],\n        [igxCardHeaderSubtitle],\n        .igx-card-header__title,\n        .igx-card-header__subtitle\">\n    </ng-content>\n</div>\n\n<ng-content></ng-content>\n"
            }]
    }], function () { return []; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-card-header']
        }], vertical: [{
            type: HostBinding,
            args: ['class.igx-card-header--vertical']
        }, {
            type: Input
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();
/**
 * IgxCardThumbnail is container for the card thumbnail section.
 * Use it to wrap anything you want to be used as a thumbnail.
 */
export class IgxCardThumbnailDirective {
}
IgxCardThumbnailDirective.ɵfac = function IgxCardThumbnailDirective_Factory(t) { return new (t || IgxCardThumbnailDirective)(); };
IgxCardThumbnailDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCardThumbnailDirective, selectors: [["", "igxCardThumbnail", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardThumbnailDirective, [{
        type: Directive,
        args: [{
                selector: '[igxCardThumbnail]'
            }]
    }], null, null); })();
/**
 * igxCardHeaderTitle is used to denote the header title in a card.
 * Use it to tag text nodes.
 */
export class IgxCardHeaderTitleDirective {
    constructor() {
        /** @hidden @internal */
        this.cssClass = 'igx-card__header__title';
    }
}
IgxCardHeaderTitleDirective.ɵfac = function IgxCardHeaderTitleDirective_Factory(t) { return new (t || IgxCardHeaderTitleDirective)(); };
IgxCardHeaderTitleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCardHeaderTitleDirective, selectors: [["", "igxCardHeaderTitle", ""]], hostVars: 2, hostBindings: function IgxCardHeaderTitleDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-card-header__title", ctx.cssClass);
    } } });
IgxCardHeaderTitleDirective.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-card-header__title',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardHeaderTitleDirective, [{
        type: Directive,
        args: [{
                selector: '[igxCardHeaderTitle]'
            }]
    }], function () { return []; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-card-header__title']
        }] }); })();
/**
 * igxCardHeaderSubtitle is used to denote the header subtitle in a card.
 * Use it to tag text nodes.
 */
export class IgxCardHeaderSubtitleDirective {
    constructor() {
        /** @hidden @internal */
        this.cssClass = 'igx-card-header__subtitle';
    }
}
IgxCardHeaderSubtitleDirective.ɵfac = function IgxCardHeaderSubtitleDirective_Factory(t) { return new (t || IgxCardHeaderSubtitleDirective)(); };
IgxCardHeaderSubtitleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCardHeaderSubtitleDirective, selectors: [["", "igxCardHeaderSubtitle", ""]], hostVars: 2, hostBindings: function IgxCardHeaderSubtitleDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-card-header__subtitle", ctx.cssClass);
    } } });
IgxCardHeaderSubtitleDirective.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-card-header__subtitle',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardHeaderSubtitleDirective, [{
        type: Directive,
        args: [{
                selector: '[igxCardHeaderSubtitle]'
            }]
    }], function () { return []; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-card-header__subtitle']
        }] }); })();
/**
 * IgxCardContent is container for the card content.
 */
export class IgxCardContentDirective {
    constructor() {
        /** @hidden @internal */
        this.cssClass = 'igx-card-content';
    }
}
IgxCardContentDirective.ɵfac = function IgxCardContentDirective_Factory(t) { return new (t || IgxCardContentDirective)(); };
IgxCardContentDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCardContentDirective, selectors: [["igx-card-content"]], hostVars: 2, hostBindings: function IgxCardContentDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-card-content", ctx.cssClass);
    } } });
IgxCardContentDirective.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-card-content',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardContentDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'igx-card-content'
            }]
    }], function () { return []; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-card-content']
        }] }); })();
/**
 * IgxCardFooter is container for the card footer
 */
export class IgxCardFooterDirective {
    constructor() {
        /**
         * An @Input property that sets the value of the `role` attribute of the card footer.
         * By default the value is set to `footer`.
         *
         * @example
         * ```html
         * <igx-card-footer role="footer"></igx-card-footer>
         * ```
         */
        this.role = 'footer';
    }
}
IgxCardFooterDirective.ɵfac = function IgxCardFooterDirective_Factory(t) { return new (t || IgxCardFooterDirective)(); };
IgxCardFooterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxCardFooterDirective, selectors: [["igx-card-footer"]], hostVars: 1, hostBindings: function IgxCardFooterDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role);
    } }, inputs: { role: "role" } });
IgxCardFooterDirective.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.role',] }, { type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardFooterDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'igx-card-footer'
            }]
    }], function () { return []; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }, {
            type: Input
        }] }); })();
/**
 * Card provides a way to display organized content in appealing way.
 *
 * @igxModule IgxCardModule
 *
 * @igxTheme igx-card-theme, igx-icon-theme, igx-button-theme
 *
 * @igxKeywords card, button, avatar, icon
 *
 * @igxGroup Layouts
 *
 * @remarks
 * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are
 * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.
 *
 * @example
 * ```html
 * <igx-card>
 *   <igx-card-header>
 *     <h3 igxCardHeaderTitle>{{title}}</h3>
 *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>
 *   </igx-card-header>
 *   <igx-card-actions>
 *       <button igxButton igxRipple>Share</button>
 *       <button igxButton igxRipple>Play Album</button>
 *   </igx-card-actions>
 * </igx-card>
 * ```
 */
export const IgxCardType = mkenum({
    ELEVATED: 'elevated',
    OUTLINED: 'outlined'
});
export class IgxCardComponent {
    constructor() {
        /**
         * Sets/gets the `id` of the card.
         * If not set, `id` will have value `"igx-card-0"`;
         *
         * @example
         * ```html
         * <igx-card id = "my-first-card"></igx-card>
         * ```
         * ```typescript
         * let cardId =  this.card.id;
         * ```
         */
        this.id = `igx-card-${NEXT_ID++}`;
        /**
         * An @Input property that sets the value of the `role` attribute of the card.
         * By default the value is set to `group`.
         *
         * @example
         * ```html
         * <igx-card role="group"></igx-card>
         * ```
         */
        this.role = 'group';
        /**
         * An @Input property that sets the value of the `type` attribute of the card.
         * By default the value is set to `elevated`. You can make the card use the
         * outlined style by setting the value to `outlined`.
         *
         * @example
         * ```html
         * <igx-card type="outlined"></igx-card>
         * ```
         */
        this.type = IgxCardType.ELEVATED;
        /**
         * An @Input property that sets the value of the `horizontal` attribute of the card.
         * Setting this to `true` will make the different card sections align horizontally,
         * essentially flipping the card to the side.
         *
         * @example
         * ```html
         * <igx-card [horizontal]="true"></igx-card>
         * ```
         */
        this.horizontal = false;
    }
    /**
     * A getter which will return true if the card type is `outlined`.
     */
    get isOutlinedCard() {
        return this.type === IgxCardType.OUTLINED;
    }
}
IgxCardComponent.ɵfac = function IgxCardComponent_Factory(t) { return new (t || IgxCardComponent)(); };
IgxCardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxCardComponent, selectors: [["igx-card"]], hostVars: 8, hostBindings: function IgxCardComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id)("role", ctx.role);
        ɵngcc0.ɵɵclassProp("igx-card", ctx.type)("igx-card--horizontal", ctx.horizontal)("igx-card--outlined", ctx.isOutlinedCard);
    } }, inputs: { id: "id", role: "role", type: "type", horizontal: "horizontal" }, ngContentSelectors: _c2, decls: 5, vars: 0, consts: [["select", "igx-card-media"], ["select", "igx-card-header"], ["select", "igx-card-content"], ["select", "igx-card-actions"]], template: function IgxCardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementContainer(0, 0);
        ɵngcc0.ɵɵelementContainer(1, 1);
        ɵngcc0.ɵɵelementContainerStart(2, 2);
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainer(4, 3);
    } }, encapsulation: 2 });
IgxCardComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    role: [{ type: HostBinding, args: ['attr.role',] }, { type: Input }],
    type: [{ type: HostBinding, args: ['class.igx-card',] }, { type: Input }],
    isOutlinedCard: [{ type: HostBinding, args: ['class.igx-card--outlined',] }],
    horizontal: [{ type: HostBinding, args: ['class.igx-card--horizontal',] }, { type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardComponent, [{
        type: Component,
        args: [{
                selector: 'igx-card',
                template: "<ng-container select='igx-card-media'></ng-container>\n\n<ng-container select='igx-card-header'></ng-container>\n<ng-container select='igx-card-content'>\n    <ng-content></ng-content>\n</ng-container>\n\n<ng-container select='igx-card-actions'></ng-container>\n"
            }]
    }], function () { return []; }, { id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }, {
            type: Input
        }], type: [{
            type: HostBinding,
            args: ['class.igx-card']
        }, {
            type: Input
        }], horizontal: [{
            type: HostBinding,
            args: ['class.igx-card--horizontal']
        }, {
            type: Input
        }], isOutlinedCard: [{
            type: HostBinding,
            args: ['class.igx-card--outlined']
        }] }); })();
export const IgxCardActionsLayout = mkenum({
    START: 'start',
    JUSTIFY: 'justify'
});
/**
 * IgxCardActions is container for the card actions.
 */
export class IgxCardActionsComponent {
    constructor(card) {
        this.card = card;
        this.isVerticalSet = false;
        /**
         * An @Input property that sets the layout style of the actions.
         * By default icons and icon buttons, as well as regular buttons
         * are split into two containers, which are then positioned on both ends
         * of the card-actions area.
         * You can justify the elements in those groups so they are positioned equally
         * from one another taking up all the space available along the card actions axis.
         *
         * @example
         * ```html
         * <igx-card-actions layout="justify"></igx-card-actions>
         * ```
         */
        this.layout = IgxCardActionsLayout.START;
        /**
         * An @Input property that sets order of the buttons the actions area.
         * By default all icons/icon buttons are placed at the end of the action
         * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons
         * placed in the actions area.
         * If you want to reverse their positions so that icons appear first, use the `reverse`
         * attribute.
         *
         * @example
         * ```html
         * <igx-card-actions [reverse]="true"></igx-card-actions>
         * ```
         */
        this.reverse = false;
    }
    /**
     * A getter that returns `true` when the layout has been
     * set to `justify`.
     */
    get isJustifyLayout() {
        return this.layout === IgxCardActionsLayout.JUSTIFY;
    }
    ngOnChanges(changes) {
        for (const prop in changes) {
            if (prop === 'vertical') {
                this.isVerticalSet = true;
            }
        }
    }
    ngOnInit() {
        this.vertical = !this.isVerticalSet && this.card.horizontal;
    }
}
IgxCardActionsComponent.ɵfac = function IgxCardActionsComponent_Factory(t) { return new (t || IgxCardActionsComponent)(ɵngcc0.ɵɵdirectiveInject(IgxCardComponent, 8)); };
IgxCardActionsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxCardActionsComponent, selectors: [["igx-card-actions"]], hostVars: 8, hostBindings: function IgxCardActionsComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-card-actions", ctx.layout)("igx-card-actions--reverse", ctx.reverse)("igx-card-actions--justify", ctx.isJustifyLayout)("igx-card-actions--vertical", ctx.vertical);
    } }, inputs: { layout: "layout", reverse: "reverse", vertical: "vertical" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c4, decls: 6, vars: 0, consts: [[1, "igx-card-actions__icons"], [1, "igx-card-actions__buttons"], ["buttons", ""]], template: function IgxCardActionsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c3);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 1, 2);
        ɵngcc0.ɵɵprojection(4, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(5, 2);
    } }, encapsulation: 2 });
IgxCardActionsComponent.ctorParameters = () => [
    { type: IgxCardComponent, decorators: [{ type: Optional }, { type: Inject, args: [IgxCardComponent,] }] }
];
IgxCardActionsComponent.propDecorators = {
    layout: [{ type: HostBinding, args: ['class.igx-card-actions',] }, { type: Input }],
    vertical: [{ type: HostBinding, args: ['class.igx-card-actions--vertical',] }, { type: Input }],
    isJustifyLayout: [{ type: HostBinding, args: ['class.igx-card-actions--justify',] }],
    reverse: [{ type: HostBinding, args: ['class.igx-card-actions--reverse',] }, { type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardActionsComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'igx-card-actions',
                template: "<div class=\"igx-card-actions__icons\">\n    <ng-content select=\"igx-icon, [igxButton='icon']\"></ng-content>\n</div>\n\n<div #buttons class=\"igx-card-actions__buttons\">\n    <ng-content select=\"[igxButton]\"></ng-content>\n</div>\n\n\n<ng-content></ng-content>\n"
            }]
    }], function () { return [{ type: IgxCardComponent, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [IgxCardComponent]
            }] }]; }, { layout: [{
            type: HostBinding,
            args: ['class.igx-card-actions']
        }, {
            type: Input
        }], reverse: [{
            type: HostBinding,
            args: ['class.igx-card-actions--reverse']
        }, {
            type: Input
        }], isJustifyLayout: [{
            type: HostBinding,
            args: ['class.igx-card-actions--justify']
        }], vertical: [{
            type: HostBinding,
            args: ['class.igx-card-actions--vertical']
        }, {
            type: Input
        }] }); })();
/**
 * @hidden
 */
export class IgxCardModule {
}
IgxCardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxCardModule });
IgxCardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxCardModule_Factory(t) { return new (t || IgxCardModule)(); }, imports: [[CommonModule, IgxButtonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxCardModule, { declarations: function () { return [IgxCardComponent, IgxCardHeaderComponent, IgxCardMediaDirective, IgxCardContentDirective, IgxCardActionsComponent, IgxCardFooterDirective, IgxCardHeaderTitleDirective, IgxCardHeaderSubtitleDirective, IgxCardThumbnailDirective]; }, imports: function () { return [CommonModule, IgxButtonModule]; }, exports: function () { return [IgxCardComponent, IgxCardHeaderComponent, IgxCardMediaDirective, IgxCardContentDirective, IgxCardActionsComponent, IgxCardFooterDirective, IgxCardHeaderTitleDirective, IgxCardHeaderSubtitleDirective, IgxCardThumbnailDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxCardModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    IgxCardComponent,
                    IgxCardHeaderComponent,
                    IgxCardMediaDirective,
                    IgxCardContentDirective,
                    IgxCardActionsComponent,
                    IgxCardFooterDirective,
                    IgxCardHeaderTitleDirective,
                    IgxCardHeaderSubtitleDirective,
                    IgxCardThumbnailDirective,
                ],
                exports: [
                    IgxCardComponent,
                    IgxCardHeaderComponent,
                    IgxCardMediaDirective,
                    IgxCardContentDirective,
                    IgxCardActionsComponent,
                    IgxCardFooterDirective,
                    IgxCardHeaderTitleDirective,
                    IgxCardHeaderSubtitleDirective,
                    IgxCardThumbnailDirective,
                ],
                imports: [CommonModule, IgxButtonModule]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9jYXJkL2NhcmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQ0gsU0FBUyxFQUNULFNBQVMsRUFDVCxXQUFXLEVBQ1gsUUFBUSxFQUNSLE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxFQUlYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7OztBQUV2QyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFFaEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUtILE1BQU0sT0FBTyxxQkFBcUI7QUFDbEMsSUFMQTtBQUNHLFFBSUMsd0JBQXdCO0FBQzVCLFFBQ1csYUFBUSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLFFBQ0k7QUFDSjtBQUNJO0FBRUg7QUFBVztBQUVYO0FBQW1CO0FBR2Y7QUFBZSxXQURiO0FBQ1AsUUFHVyxVQUFLLEdBQUcsTUFBTSxDQUFDO0FBQzFCLFFBQ0k7QUFDSjtBQUNJO0FBRUg7QUFBVztBQUVYO0FBQW1CO0FBR2Y7QUFBZSxXQURiO0FBQ1AsUUFFVyxXQUFNLEdBQUcsTUFBTSxDQUFDO0FBQzNCLFFBQ0k7QUFDSjtBQUNJLFdBQUc7QUFDUCxRQUVXLFNBQUksR0FBRyxLQUFLLENBQUM7QUFDeEIsSUFBQSxDQUFDO0FBQ0Q7aURBM0NDLFNBQVMsU0FBQyxrQkFDUDtZQUE4QyxpQkFDOUMsUUFBUSxFQUFFLGdCQUFnQixjQUM3Qjs7Ozt1RUFDSTtBQUFDO0FBQ0ksdUJBQ0wsV0FBVyxTQUFDLHVCQUF1QjtBQUNuQyxvQkFXQSxXQUFXLFNBQUMsYUFB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Qix5QkFBeUI7UUFDNUIsa0JBQ0QsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQztRQUMzQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBEaXJlY3RpdmUsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgT3B0aW9uYWwsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE5nTW9kdWxlLFxuICAgIE9uSW5pdCxcbiAgICBPbkNoYW5nZXMsXG4gICAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEJ1dHRvbk1vZHVsZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvYnV0dG9uL2J1dHRvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgbWtlbnVtIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5cbmxldCBORVhUX0lEID0gMDtcblxuLyoqXG4gKiBJZ3hDYXJkTWVkaWEgaXMgY29udGFpbmVyIGZvciB0aGUgY2FyZCBtZWRpYSBzZWN0aW9uLlxuICogVXNlIGl0IHRvIHdyYXAgaW1hZ2VzIGFuZCB2aWRlb3MuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ2lneC1jYXJkLW1lZGlhJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDYXJkTWVkaWFEaXJlY3RpdmUge1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhcmRfX21lZGlhJylcbiAgICBwdWJsaWMgY3NzQ2xhc3MgPSAnaWd4LWNhcmRfX21lZGlhJztcblxuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIGB3aWR0aGAgYW5kIGBtaW4td2lkdGhgIHN0eWxlIHByb3BlcnR5XG4gICAgICogb2YgdGhlIG1lZGlhIGNvbnRhaW5lci4gSWYgbm90IHByb3ZpZGVkIGl0IHdpbGwgYmUgc2V0IHRvIGBhdXRvYC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2FyZC1tZWRpYSB3aWR0aD1cIjMwMHB4XCI+PC9pZ3gtY2FyZC1tZWRpYT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLndpZHRoJylcbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLm1pbi13aWR0aCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgd2lkdGggPSAnYXV0byc7XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSBgaGVpZ2h0YCBzdHlsZSBwcm9wZXJ0eSBvZiB0aGUgbWVkaWEgY29udGFpbmVyLlxuICAgICAqIElmIG5vdCBwcm92aWRlZCBpdCB3aWxsIGJlIHNldCB0byBgYXV0b2AuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhcmQtbWVkaWEgaGVpZ2h0PVwiNTAlXCI+PC9pZ3gtY2FyZC1tZWRpYT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmhlaWdodCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaGVpZ2h0ID0gJ2F1dG8nO1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgYHJvbGVgIGF0dHJpYnV0ZSBvZiB0aGUgbWVkaWEgY29udGFpbmVyLlxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyByb2xlID0gJ2ltZyc7XG59XG5cbi8qKlxuICogSWd4Q2FyZEhlYWRlciBpcyBjb250YWluZXIgZm9yIHRoZSBjYXJkIGhlYWRlclxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1jYXJkLWhlYWRlcicsXG4gICAgdGVtcGxhdGVVcmw6ICdjYXJkLWhlYWRlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2FyZEhlYWRlckNvbXBvbmVudCB7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtY2FyZC1oZWFkZXInKVxuICAgIHB1YmxpYyBjc3NDbGFzcyA9ICdpZ3gtY2FyZC1oZWFkZXInO1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgbGF5b3V0IHN0eWxlIG9mIHRoZSBoZWFkZXIuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgaGVhZGVyIGVsZW1lbnRzKHRodW1ibmFpbCBhbmQgdGl0bGUvc3VidGl0bGUpIGFyZSBhbGlnbmVkIGhvcml6b250YWxseS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2FyZC1oZWFkZXIgW3ZlcnRpY2FsXT1cInRydWVcIj48L2lneC1jYXJkLWhlYWRlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1jYXJkLWhlYWRlci0tdmVydGljYWwnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHZlcnRpY2FsID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYHJvbGVgIGF0dHJpYnV0ZSBvZiB0aGUgY2FyZCBoZWFkZXIuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgdmFsdWUgaXMgc2V0IHRvIGBoZWFkZXJgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYXJkLWhlYWRlciByb2xlPVwiaGVhZGVyXCI+PC9pZ3gtY2FyZC1oZWFkZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIHB1YmxpYyByb2xlID0gJ2hlYWRlcic7XG59XG5cbi8qKlxuICogSWd4Q2FyZFRodW1ibmFpbCBpcyBjb250YWluZXIgZm9yIHRoZSBjYXJkIHRodW1ibmFpbCBzZWN0aW9uLlxuICogVXNlIGl0IHRvIHdyYXAgYW55dGhpbmcgeW91IHdhbnQgdG8gYmUgdXNlZCBhcyBhIHRodW1ibmFpbC5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q2FyZFRodW1ibmFpbF0nXG59KVxuZXhwb3J0IGNsYXNzIElneENhcmRUaHVtYm5haWxEaXJlY3RpdmUgeyB9XG5cbi8qKlxuICogaWd4Q2FyZEhlYWRlclRpdGxlIGlzIHVzZWQgdG8gZGVub3RlIHRoZSBoZWFkZXIgdGl0bGUgaW4gYSBjYXJkLlxuICogVXNlIGl0IHRvIHRhZyB0ZXh0IG5vZGVzLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hDYXJkSGVhZGVyVGl0bGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDYXJkSGVhZGVyVGl0bGVEaXJlY3RpdmUge1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhcmQtaGVhZGVyX190aXRsZScpXG4gICAgcHVibGljIGNzc0NsYXNzID0gJ2lneC1jYXJkX19oZWFkZXJfX3RpdGxlJztcbn1cblxuLyoqXG4gKiBpZ3hDYXJkSGVhZGVyU3VidGl0bGUgaXMgdXNlZCB0byBkZW5vdGUgdGhlIGhlYWRlciBzdWJ0aXRsZSBpbiBhIGNhcmQuXG4gKiBVc2UgaXQgdG8gdGFnIHRleHQgbm9kZXMuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneENhcmRIZWFkZXJTdWJ0aXRsZV0nXG59KVxuZXhwb3J0IGNsYXNzIElneENhcmRIZWFkZXJTdWJ0aXRsZURpcmVjdGl2ZSB7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtY2FyZC1oZWFkZXJfX3N1YnRpdGxlJylcbiAgICBwdWJsaWMgY3NzQ2xhc3MgPSAnaWd4LWNhcmQtaGVhZGVyX19zdWJ0aXRsZSc7XG59XG4vKipcbiAqIElneENhcmRDb250ZW50IGlzIGNvbnRhaW5lciBmb3IgdGhlIGNhcmQgY29udGVudC5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnaWd4LWNhcmQtY29udGVudCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2FyZENvbnRlbnREaXJlY3RpdmUge1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhcmQtY29udGVudCcpXG4gICAgcHVibGljIGNzc0NsYXNzID0gJ2lneC1jYXJkLWNvbnRlbnQnO1xufVxuXG4vKipcbiAqIElneENhcmRGb290ZXIgaXMgY29udGFpbmVyIGZvciB0aGUgY2FyZCBmb290ZXJcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnaWd4LWNhcmQtZm9vdGVyJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDYXJkRm9vdGVyRGlyZWN0aXZlIHtcbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYHJvbGVgIGF0dHJpYnV0ZSBvZiB0aGUgY2FyZCBmb290ZXIuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgdmFsdWUgaXMgc2V0IHRvIGBmb290ZXJgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYXJkLWZvb3RlciByb2xlPVwiZm9vdGVyXCI+PC9pZ3gtY2FyZC1mb290ZXI+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHJvbGUgPSAnZm9vdGVyJztcbn1cblxuLyoqXG4gKiBDYXJkIHByb3ZpZGVzIGEgd2F5IHRvIGRpc3BsYXkgb3JnYW5pemVkIGNvbnRlbnQgaW4gYXBwZWFsaW5nIHdheS5cbiAqXG4gKiBAaWd4TW9kdWxlIElneENhcmRNb2R1bGVcbiAqXG4gKiBAaWd4VGhlbWUgaWd4LWNhcmQtdGhlbWUsIGlneC1pY29uLXRoZW1lLCBpZ3gtYnV0dG9uLXRoZW1lXG4gKlxuICogQGlneEtleXdvcmRzIGNhcmQsIGJ1dHRvbiwgYXZhdGFyLCBpY29uXG4gKlxuICogQGlneEdyb3VwIExheW91dHNcbiAqXG4gKiBAcmVtYXJrc1xuICogVGhlIElnbml0ZSBVSSBDYXJkIHNlcnZlcyBhcyBhIGNvbnRhaW5lciB0aGF0IGFsbG93cyBjdXN0b20gY29udGVudCB0byBiZSBvcmdhbml6ZWQgaW4gYW4gYXBwZWFsaW5nIHdheS4gVGhlcmUgYXJlXG4gKiBmaXZlIHNlY3Rpb25zIGluIGEgY2FyZCB0aGF0IHlvdSBjYW4gdXNlIHRvIG9yZ2FuaXplIHlvdXIgY29udGVudC4gVGhlc2UgYXJlIGhlYWRlciwgbWVkaWEsIGNvbnRlbnQsIGFjdGlvbnMsIGFuZCBmb290ZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtY2FyZD5cbiAqICAgPGlneC1jYXJkLWhlYWRlcj5cbiAqICAgICA8aDMgaWd4Q2FyZEhlYWRlclRpdGxlPnt7dGl0bGV9fTwvaDM+XG4gKiAgICAgPGg1IGlneENhcmRIZWFkZXJTdWJ0aXRsZT57e3N1YnRpdGxlfX08L2g1PlxuICogICA8L2lneC1jYXJkLWhlYWRlcj5cbiAqICAgPGlneC1jYXJkLWFjdGlvbnM+XG4gKiAgICAgICA8YnV0dG9uIGlneEJ1dHRvbiBpZ3hSaXBwbGU+U2hhcmU8L2J1dHRvbj5cbiAqICAgICAgIDxidXR0b24gaWd4QnV0dG9uIGlneFJpcHBsZT5QbGF5IEFsYnVtPC9idXR0b24+XG4gKiAgIDwvaWd4LWNhcmQtYWN0aW9ucz5cbiAqIDwvaWd4LWNhcmQ+XG4gKiBgYGBcbiAqL1xuXG5leHBvcnQgY29uc3QgSWd4Q2FyZFR5cGUgPSBta2VudW0oe1xuICAgIEVMRVZBVEVEOiAnZWxldmF0ZWQnLFxuICAgIE9VVExJTkVEOiAnb3V0bGluZWQnXG59KTtcbmV4cG9ydCB0eXBlIElneENhcmRUeXBlID0gKHR5cGVvZiBJZ3hDYXJkVHlwZSlba2V5b2YgdHlwZW9mIElneENhcmRUeXBlXTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtY2FyZCcsXG4gICAgdGVtcGxhdGVVcmw6ICdjYXJkLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDYXJkQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIGBpZGAgb2YgdGhlIGNhcmQuXG4gICAgICogSWYgbm90IHNldCwgYGlkYCB3aWxsIGhhdmUgdmFsdWUgYFwiaWd4LWNhcmQtMFwiYDtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2FyZCBpZCA9IFwibXktZmlyc3QtY2FyZFwiPjwvaWd4LWNhcmQ+XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjYXJkSWQgPSAgdGhpcy5jYXJkLmlkO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaWQgPSBgaWd4LWNhcmQtJHtORVhUX0lEKyt9YDtcblxuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIG9mIHRoZSBgcm9sZWAgYXR0cmlidXRlIG9mIHRoZSBjYXJkLlxuICAgICAqIEJ5IGRlZmF1bHQgdGhlIHZhbHVlIGlzIHNldCB0byBgZ3JvdXBgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYXJkIHJvbGU9XCJncm91cFwiPjwvaWd4LWNhcmQ+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHJvbGUgPSAnZ3JvdXAnO1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgdmFsdWUgb2YgdGhlIGB0eXBlYCBhdHRyaWJ1dGUgb2YgdGhlIGNhcmQuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgdmFsdWUgaXMgc2V0IHRvIGBlbGV2YXRlZGAuIFlvdSBjYW4gbWFrZSB0aGUgY2FyZCB1c2UgdGhlXG4gICAgICogb3V0bGluZWQgc3R5bGUgYnkgc2V0dGluZyB0aGUgdmFsdWUgdG8gYG91dGxpbmVkYC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2FyZCB0eXBlPVwib3V0bGluZWRcIj48L2lneC1jYXJkPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhcmQnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHR5cGU6IElneENhcmRUeXBlIHwgc3RyaW5nID0gSWd4Q2FyZFR5cGUuRUxFVkFURUQ7XG5cbiAgICAvKipcbiAgICAgKiBBIGdldHRlciB3aGljaCB3aWxsIHJldHVybiB0cnVlIGlmIHRoZSBjYXJkIHR5cGUgaXMgYG91dGxpbmVkYC5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1jYXJkLS1vdXRsaW5lZCcpXG4gICAgZ2V0IGlzT3V0bGluZWRDYXJkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBJZ3hDYXJkVHlwZS5PVVRMSU5FRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgYGhvcml6b250YWxgIGF0dHJpYnV0ZSBvZiB0aGUgY2FyZC5cbiAgICAgKiBTZXR0aW5nIHRoaXMgdG8gYHRydWVgIHdpbGwgbWFrZSB0aGUgZGlmZmVyZW50IGNhcmQgc2VjdGlvbnMgYWxpZ24gaG9yaXpvbnRhbGx5LFxuICAgICAqIGVzc2VudGlhbGx5IGZsaXBwaW5nIHRoZSBjYXJkIHRvIHRoZSBzaWRlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYXJkIFtob3Jpem9udGFsXT1cInRydWVcIj48L2lneC1jYXJkPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhcmQtLWhvcml6b250YWwnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGhvcml6b250YWwgPSBmYWxzZTtcbn1cblxuZXhwb3J0IGNvbnN0IElneENhcmRBY3Rpb25zTGF5b3V0ID0gbWtlbnVtKHtcbiAgICBTVEFSVDogJ3N0YXJ0JyxcbiAgICBKVVNUSUZZOiAnanVzdGlmeSdcbn0pO1xuZXhwb3J0IHR5cGUgSWd4Q2FyZEFjdGlvbnNMYXlvdXQgPSAodHlwZW9mIElneENhcmRBY3Rpb25zTGF5b3V0KVtrZXlvZiB0eXBlb2YgSWd4Q2FyZEFjdGlvbnNMYXlvdXRdO1xuXG4vKipcbiAqIElneENhcmRBY3Rpb25zIGlzIGNvbnRhaW5lciBmb3IgdGhlIGNhcmQgYWN0aW9ucy5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnaWd4LWNhcmQtYWN0aW9ucycsXG4gICAgdGVtcGxhdGVVcmw6ICdjYXJkLWFjdGlvbnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElneENhcmRBY3Rpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgaXNWZXJ0aWNhbFNldCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChJZ3hDYXJkQ29tcG9uZW50KSBwdWJsaWMgY2FyZDogSWd4Q2FyZENvbXBvbmVudCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSBsYXlvdXQgc3R5bGUgb2YgdGhlIGFjdGlvbnMuXG4gICAgICogQnkgZGVmYXVsdCBpY29ucyBhbmQgaWNvbiBidXR0b25zLCBhcyB3ZWxsIGFzIHJlZ3VsYXIgYnV0dG9uc1xuICAgICAqIGFyZSBzcGxpdCBpbnRvIHR3byBjb250YWluZXJzLCB3aGljaCBhcmUgdGhlbiBwb3NpdGlvbmVkIG9uIGJvdGggZW5kc1xuICAgICAqIG9mIHRoZSBjYXJkLWFjdGlvbnMgYXJlYS5cbiAgICAgKiBZb3UgY2FuIGp1c3RpZnkgdGhlIGVsZW1lbnRzIGluIHRob3NlIGdyb3VwcyBzbyB0aGV5IGFyZSBwb3NpdGlvbmVkIGVxdWFsbHlcbiAgICAgKiBmcm9tIG9uZSBhbm90aGVyIHRha2luZyB1cCBhbGwgdGhlIHNwYWNlIGF2YWlsYWJsZSBhbG9uZyB0aGUgY2FyZCBhY3Rpb25zIGF4aXMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhcmQtYWN0aW9ucyBsYXlvdXQ9XCJqdXN0aWZ5XCI+PC9pZ3gtY2FyZC1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhcmQtYWN0aW9ucycpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbGF5b3V0OiBJZ3hDYXJkQWN0aW9uc0xheW91dCB8IHN0cmluZyA9IElneENhcmRBY3Rpb25zTGF5b3V0LlNUQVJUO1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgdmVydGljYWwgYXR0cmlidXRlIG9mIHRoZSBhY3Rpb25zLlxuICAgICAqIFdoZW4gc2V0IHRvIGB0cnVlYCB0aGUgYWN0aW9ucyB3aWxsIGJlIGxheWVkIG91dCB2ZXJ0aWNhbGx5LlxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhcmQtYWN0aW9ucy0tdmVydGljYWwnKVxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHZlcnRpY2FsOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQSBnZXR0ZXIgdGhhdCByZXR1cm5zIGB0cnVlYCB3aGVuIHRoZSBsYXlvdXQgaGFzIGJlZW5cbiAgICAgKiBzZXQgdG8gYGp1c3RpZnlgLlxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhcmQtYWN0aW9ucy0tanVzdGlmeScpXG4gICAgZ2V0IGlzSnVzdGlmeUxheW91dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0ID09PSBJZ3hDYXJkQWN0aW9uc0xheW91dC5KVVNUSUZZO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgb3JkZXIgb2YgdGhlIGJ1dHRvbnMgdGhlIGFjdGlvbnMgYXJlYS5cbiAgICAgKiBCeSBkZWZhdWx0IGFsbCBpY29ucy9pY29uIGJ1dHRvbnMgYXJlIHBsYWNlZCBhdCB0aGUgZW5kIG9mIHRoZSBhY3Rpb25cbiAgICAgKiBhcmVhLiBBbnkgcmVndWxhciBidXR0b25zKGZsYXQsIHJhaXNlZCkgd2lsbCBhcHBlYXIgYmVmb3JlIHRoZSBpY29ucy9pY29uIGJ1dHRvbnNcbiAgICAgKiBwbGFjZWQgaW4gdGhlIGFjdGlvbnMgYXJlYS5cbiAgICAgKiBJZiB5b3Ugd2FudCB0byByZXZlcnNlIHRoZWlyIHBvc2l0aW9ucyBzbyB0aGF0IGljb25zIGFwcGVhciBmaXJzdCwgdXNlIHRoZSBgcmV2ZXJzZWBcbiAgICAgKiBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhcmQtYWN0aW9ucyBbcmV2ZXJzZV09XCJ0cnVlXCI+PC9pZ3gtY2FyZC1hY3Rpb25zPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhcmQtYWN0aW9ucy0tcmV2ZXJzZScpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcmV2ZXJzZSA9IGZhbHNlO1xuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gY2hhbmdlcykge1xuICAgICAgICAgICAgaWYgKHByb3AgPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzVmVydGljYWxTZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudmVydGljYWwgPSAhdGhpcy5pc1ZlcnRpY2FsU2V0ICYmIHRoaXMuY2FyZC5ob3Jpem9udGFsO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIElneENhcmRDb21wb25lbnQsXG4gICAgICAgIElneENhcmRIZWFkZXJDb21wb25lbnQsXG4gICAgICAgIElneENhcmRNZWRpYURpcmVjdGl2ZSxcbiAgICAgICAgSWd4Q2FyZENvbnRlbnREaXJlY3RpdmUsXG4gICAgICAgIElneENhcmRBY3Rpb25zQ29tcG9uZW50LFxuICAgICAgICBJZ3hDYXJkRm9vdGVyRGlyZWN0aXZlLFxuICAgICAgICBJZ3hDYXJkSGVhZGVyVGl0bGVEaXJlY3RpdmUsXG4gICAgICAgIElneENhcmRIZWFkZXJTdWJ0aXRsZURpcmVjdGl2ZSxcbiAgICAgICAgSWd4Q2FyZFRodW1ibmFpbERpcmVjdGl2ZSxcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgSWd4Q2FyZENvbXBvbmVudCxcbiAgICAgICAgSWd4Q2FyZEhlYWRlckNvbXBvbmVudCxcbiAgICAgICAgSWd4Q2FyZE1lZGlhRGlyZWN0aXZlLFxuICAgICAgICBJZ3hDYXJkQ29udGVudERpcmVjdGl2ZSxcbiAgICAgICAgSWd4Q2FyZEFjdGlvbnNDb21wb25lbnQsXG4gICAgICAgIElneENhcmRGb290ZXJEaXJlY3RpdmUsXG4gICAgICAgIElneENhcmRIZWFkZXJUaXRsZURpcmVjdGl2ZSxcbiAgICAgICAgSWd4Q2FyZEhlYWRlclN1YnRpdGxlRGlyZWN0aXZlLFxuICAgICAgICBJZ3hDYXJkVGh1bWJuYWlsRGlyZWN0aXZlLFxuICAgIF0sXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgSWd4QnV0dG9uTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hDYXJkTW9kdWxlIHsgfVxuIl19