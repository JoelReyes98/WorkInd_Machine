import { Component, Input, HostBinding, ElementRef } from '@angular/core';
import { SliderHandle } from '../slider.common';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function IgxThumbLabelComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxThumbLabelComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.value, "\n");
} }
export class IgxThumbLabelComponent {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
    get thumbFromClass() {
        return this.type === SliderHandle.FROM;
    }
    get thumbToClass() {
        return this.type === SliderHandle.TO;
    }
    get thumbFromActiveClass() {
        return this.type === SliderHandle.FROM && this.active;
    }
    get thumbToActiveClass() {
        return this.type === SliderHandle.TO && this.active;
    }
    get nativeElement() {
        return this._elementRef.nativeElement;
    }
    get active() {
        return this._active;
    }
    set active(val) {
        if (this.continuous || this.deactiveState) {
            this._active = false;
        }
        else {
            this._active = val;
        }
    }
}
IgxThumbLabelComponent.ɵfac = function IgxThumbLabelComponent_Factory(t) { return new (t || IgxThumbLabelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxThumbLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxThumbLabelComponent, selectors: [["igx-thumb-label"]], hostVars: 8, hostBindings: function IgxThumbLabelComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-slider__label-from", ctx.thumbFromClass)("igx-slider__label-to", ctx.thumbToClass)("igx-slider__label-from--active", ctx.thumbFromActiveClass)("igx-slider__label-to--active", ctx.thumbToActiveClass);
    } }, inputs: { value: "value", templateRef: "templateRef", context: "context", type: "type", continuous: "continuous", deactiveState: "deactiveState" }, decls: 4, vars: 2, consts: [[1, "label"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["thumbFromDefaultTemplate", ""]], template: function IgxThumbLabelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, IgxThumbLabelComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, IgxThumbLabelComponent_ng_template_2_Template, 1, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.templateRef ? ctx.templateRef : _r1)("ngTemplateOutletContext", ctx.context);
    } }, directives: [ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
IgxThumbLabelComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxThumbLabelComponent.propDecorators = {
    value: [{ type: Input }],
    templateRef: [{ type: Input }],
    context: [{ type: Input }],
    type: [{ type: Input }],
    continuous: [{ type: Input }],
    deactiveState: [{ type: Input }],
    thumbFromClass: [{ type: HostBinding, args: ['class.igx-slider__label-from',] }],
    thumbToClass: [{ type: HostBinding, args: ['class.igx-slider__label-to',] }],
    thumbFromActiveClass: [{ type: HostBinding, args: ['class.igx-slider__label-from--active',] }],
    thumbToActiveClass: [{ type: HostBinding, args: ['class.igx-slider__label-to--active',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxThumbLabelComponent, [{
        type: Component,
        args: [{
                selector: 'igx-thumb-label',
                template: "<div class=\"label\">\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : thumbFromDefaultTemplate; context: context\"></ng-container>\n</div>\n\n<ng-template #thumbFromDefaultTemplate>\n    {{ value }}\n</ng-template>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { thumbFromClass: [{
            type: HostBinding,
            args: ['class.igx-slider__label-from']
        }], thumbToClass: [{
            type: HostBinding,
            args: ['class.igx-slider__label-to']
        }], thumbFromActiveClass: [{
            type: HostBinding,
            args: ['class.igx-slider__label-from--active']
        }], thumbToActiveClass: [{
            type: HostBinding,
            args: ['class.igx-slider__label-to--active']
        }], value: [{
            type: Input
        }], templateRef: [{
            type: Input
        }], context: [{
            type: Input
        }], type: [{
            type: Input
        }], continuous: [{
            type: Input
        }], deactiveState: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWItbGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2xpZGVyL2xhYmVsL3RodW1iLWxhYmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVoRDtBQUNBO0FBQ0EsR0FBRzs7Ozs7Ozs7Ozs7OztBQUtILE1BQU0sT0FBTyxzQkFBc0I7QUFDbkMsSUF3Q0ksWUFBb0IsV0FBdUI7QUFBSSxRQUEzQixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtBQUFDLElBQUcsQ0FBQztBQUNwRCxJQXJCSSxJQUNXLGNBQWM7QUFDN0IsUUFBUSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLElBQUksQ0FBQztBQUMvQyxJQUFJLENBQUM7QUFDTCxJQUNJLElBQ1csWUFBWTtBQUMzQixRQUFRLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsRUFBRSxDQUFDO0FBQzdDLElBQUksQ0FBQztBQUNMLElBQ0ksSUFDVyxvQkFBb0I7QUFDbkMsUUFBUSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzlELElBQUksQ0FBQztBQUNMLElBQ0ksSUFDVyxrQkFBa0I7QUFDakMsUUFBUSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzVELElBQUksQ0FBQztBQUNMLElBR0ksSUFBVyxhQUFhO0FBQzVCLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztBQUM5QyxJQUFJLENBQUM7QUFDTCxJQUNJLElBQVcsTUFBTTtBQUNyQixRQUFRLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM1QixJQUFJLENBQUM7QUFDTCxJQUNJLElBQVcsTUFBTSxDQUFDLEdBQVk7QUFDbEMsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUNuRCxZQUFZLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLFNBQVM7QUFBQyxhQUFLO0FBQ2YsWUFBWSxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUMvQixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7a0RBOURDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsaUJBQWlCLGtCQUMzQjtxTkFBeUM7U0FDNUM7Ozs7Ozs7Ozs7b0VBQ0k7QUFBQztBQUNVLFlBWHFDLFVBQVU7QUFBRztBQUFHO0FBQzlDLG9CQVlsQixLQUFLO0FBQ1IsMEJBRUcsS0FBSztBQUNSLHNCQUVHLEtBQUs7QUFDUixtQkFFRyxLQUFLO0FBQ1IseUJBRUcsS0FBSztBQUNSLDRCQUVHLEtBQUs7QUFDUiw2QkFFRyxXQUFXLFNBQUMsOEJBQThCO0FBQzFDLDJCQUlBLFdBQVcsU0FBQyw0QkFBNEI7QUFDeEMsbUNBSUEsV0FBVyxTQUFDLHNDQUFzQztBQUNsRCxpQ0FJQSxXQUFXLFNBQUMsb0NBQW9DO0FBQ2pEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZiwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNsaWRlckhhbmRsZSB9IGZyb20gJy4uL3NsaWRlci5jb21tb24nO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtdGh1bWItbGFiZWwnLFxuICAgIHRlbXBsYXRlVXJsOiAndGh1bWItbGFiZWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIElneFRodW1iTGFiZWxDb21wb25lbnQge1xuICAgIHByaXZhdGUgX2FjdGl2ZTogYm9vbGVhbjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHZhbHVlOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbnRleHQ6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHR5cGU6IFNsaWRlckhhbmRsZTtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbnRpbnVvdXM6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBkZWFjdGl2ZVN0YXRlOiBib29sZWFuO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX19sYWJlbC1mcm9tJylcbiAgICBwdWJsaWMgZ2V0IHRodW1iRnJvbUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBTbGlkZXJIYW5kbGUuRlJPTTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX2xhYmVsLXRvJylcbiAgICBwdWJsaWMgZ2V0IHRodW1iVG9DbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gU2xpZGVySGFuZGxlLlRPO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fbGFiZWwtZnJvbS0tYWN0aXZlJylcbiAgICBwdWJsaWMgZ2V0IHRodW1iRnJvbUFjdGl2ZUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBTbGlkZXJIYW5kbGUuRlJPTSAmJiB0aGlzLmFjdGl2ZTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX2xhYmVsLXRvLS1hY3RpdmUnKVxuICAgIHB1YmxpYyBnZXQgdGh1bWJUb0FjdGl2ZUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBTbGlkZXJIYW5kbGUuVE8gJiYgdGhpcy5hY3RpdmU7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgICBwdWJsaWMgZ2V0IG5hdGl2ZUVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBhY3RpdmUodmFsOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRpbnVvdXMgfHwgdGhpcy5kZWFjdGl2ZVN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==