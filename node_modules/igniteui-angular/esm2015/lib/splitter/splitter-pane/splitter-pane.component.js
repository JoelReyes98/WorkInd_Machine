import { Component, HostBinding, Input, ElementRef, Output, EventEmitter } from '@angular/core';
/**
 * Represents individual resizable/collapsible panes.
 * @igxModule IgxSplitterModule
 *
 * @igxParent IgxSplitterComponent
 *
 * @igxKeywords pane
 *
 * @igxGroup presentation
 *
 * @remarks
 *  Users can control the resize behavior via the min and max size properties.
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class IgxSplitterPaneComponent {
    constructor(el) {
        this.el = el;
        this._size = 'auto';
        this._collapsed = false;
        /**
         * Gets/Sets whether pane is resizable.
         * @example
         * ```html
         * <igx-splitter>
         *  <igx-splitter-pane [resizable]='false'>...</igx-splitter-pane>
         * </igx-splitter>
         * ```
         * @remarks
         * If pane is not resizable its related splitter bar cannot be dragged.
         */
        this.resizable = true;
        /**
         * Event fired when collapsed state of pane is changed.
         * @example
         * ```html
         * <igx-splitter>
         *  <igx-splitter-pane (onToggle)='onPaneToggle($event)'>...</igx-splitter-pane>
         * </igx-splitter>
         * ```
         */
        this.onToggle = new EventEmitter();
        /**
         * @hidden @internal
         * Gets/Sets the `overflow`.
         */
        this.overflow = 'auto';
        /**
         * @hidden @internal
         * Gets/Sets the `minHeight` and `minWidth` properties of the current pane.
         */
        this.minHeight = 0;
        /**
         * @hidden @internal
         * Gets/Sets the `maxHeight` and `maxWidth` properties of the current `IgxSplitterPaneComponent`.
         */
        this.maxHeight = '100%';
        /**
         * @hidden @internal
         * Gets/Sets the 'display' property of the current pane.
         */
        this.display = 'flex';
    }
    /**
     * Gets/Sets the size of the current pane.
     *  * @example
     * ```html
     * <igx-splitter>
     *  <igx-splitter-pane [size]='size'>...</igx-splitter-pane>
     * </igx-splitter>
     * ```
     */
    get size() {
        return this._size;
    }
    set size(value) {
        this._size = value;
        this.el.nativeElement.style.flex = this.flex;
    }
    /** @hidden @internal */
    get isPercentageSize() {
        return this.size === 'auto' || this.size.indexOf('%') !== -1;
    }
    /** @hidden @internal */
    get dragSize() {
        return this._dragSize;
    }
    set dragSize(val) {
        this._dragSize = val;
        this.el.nativeElement.style.flex = this.flex;
    }
    /**
     *
     * @hidden @internal
     * Gets the host native element.
     */
    get element() {
        return this.el.nativeElement;
    }
    /**
     * @hidden @internal
     * Gets the `flex` property of the current `IgxSplitterPaneComponent`.
     */
    get flex() {
        const isAuto = this.size === 'auto' && !this.dragSize;
        const grow = !isAuto ? 0 : 1;
        const size = this.dragSize || this.size;
        return `${grow} ${grow} ${size}`;
    }
    /**
     * Gets/Sets whether current pane is collapsed.
     * @example
     * ```typescript
     * const isCollapsed = pane.collapsed;
     * ```
     */
    set collapsed(value) {
        this._collapsed = value;
        this.display = this._collapsed ? 'none' : 'flex';
    }
    get collapsed() {
        return this._collapsed;
    }
    /** @hidden @internal */
    _getSiblings() {
        const panes = this.owner.panes.toArray();
        const index = panes.indexOf(this);
        const siblings = [];
        if (index !== 0) {
            siblings.push(panes[index - 1]);
        }
        if (index !== panes.length - 1) {
            siblings.push(panes[index + 1]);
        }
        return siblings;
    }
    /**
     * Toggles the collapsed state of the pane.
     * @example
     * ```typescript
     * pane.toggle();
     * ```
     */
    toggle() {
        // reset sibling sizes when pane collapse state changes.
        this._getSiblings().forEach(sibling => sibling.size = 'auto');
        this.collapsed = !this.collapsed;
        this.onToggle.emit(this);
    }
}
IgxSplitterPaneComponent.ɵfac = function IgxSplitterPaneComponent_Factory(t) { return new (t || IgxSplitterPaneComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxSplitterPaneComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxSplitterPaneComponent, selectors: [["igx-splitter-pane"]], hostVars: 16, hostBindings: function IgxSplitterPaneComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("overflow", ctx.overflow)("min-height", ctx.minHeight)("min-width", ctx.minHeight)("max-height", ctx.maxHeight)("max-width", ctx.maxHeight)("display", ctx.display)("flex", ctx.flex)("order", ctx.order);
    } }, inputs: { resizable: "resizable", size: "size", collapsed: "collapsed", minSize: "minSize", maxSize: "maxSize" }, outputs: { onToggle: "onToggle" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function IgxSplitterPaneComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
IgxSplitterPaneComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxSplitterPaneComponent.propDecorators = {
    size: [{ type: Input }],
    minSize: [{ type: Input }],
    maxSize: [{ type: Input }],
    resizable: [{ type: Input }],
    onToggle: [{ type: Output }],
    order: [{ type: HostBinding, args: ['style.order',] }],
    overflow: [{ type: HostBinding, args: ['style.overflow',] }],
    minHeight: [{ type: HostBinding, args: ['style.min-height',] }, { type: HostBinding, args: ['style.min-width',] }],
    maxHeight: [{ type: HostBinding, args: ['style.max-height',] }, { type: HostBinding, args: ['style.max-width',] }],
    flex: [{ type: HostBinding, args: ['style.flex',] }],
    display: [{ type: HostBinding, args: ['style.display',] }],
    collapsed: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSplitterPaneComponent, [{
        type: Component,
        args: [{
                selector: 'igx-splitter-pane',
                template: "<ng-content></ng-content>"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { resizable: [{
            type: Input
        }], onToggle: [{
            type: Output
        }], overflow: [{
            type: HostBinding,
            args: ['style.overflow']
        }], minHeight: [{
            type: HostBinding,
            args: ['style.min-height']
        }, {
            type: HostBinding,
            args: ['style.min-width']
        }], maxHeight: [{
            type: HostBinding,
            args: ['style.max-height']
        }, {
            type: HostBinding,
            args: ['style.max-width']
        }], display: [{
            type: HostBinding,
            args: ['style.display']
        }], size: [{
            type: Input
        }], flex: [{
            type: HostBinding,
            args: ['style.flex']
        }], collapsed: [{
            type: Input
        }], minSize: [{
            type: Input
        }], maxSize: [{
            type: Input
        }], order: [{
            type: HostBinding,
            args: ['style.order']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,