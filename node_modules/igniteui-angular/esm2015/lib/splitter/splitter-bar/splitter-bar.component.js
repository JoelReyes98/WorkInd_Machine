import { Component, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { SplitterType } from '../splitter.component';
import { DragDirection } from '../../directives/drag-drop/drag-drop.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../directives/drag-drop/drag-drop.directive';
export const SPLITTER_INTERACTION_KEYS = new Set('right down left up arrowright arrowdown arrowleft arrowup'.split(' '));
/**
 * @hidden @internal
 * Represents the draggable bar that visually separates panes and allows for changing their sizes.
 */
export class IgxSplitBarComponent {
    constructor() {
        /**
         * Set css class to the host element.
         */
        this.cssClass = 'igx-splitter-bar-host';
        /**
         * Gets/Sets the orientation.
         */
        this.type = SplitterType.Horizontal;
        /**
         * An event that is emitted whenever we start dragging the current `SplitBarComponent`.
         */
        this.moveStart = new EventEmitter();
        /**
         * An event that is emitted while we are dragging the current `SplitBarComponent`.
         */
        this.moving = new EventEmitter();
        this.movingEnd = new EventEmitter();
    }
    /**
     * @hidden
     * @internal
     */
    get tabindex() {
        return this.resizeDisallowed ? null : 0;
    }
    /**
     * @hidden
     * @internal
     */
    get orientation() {
        return this.type === SplitterType.Horizontal ? 'horizontal' : 'vertical';
    }
    /**
     * @hidden
     * @internal
     */
    get cursor() {
        if (this.resizeDisallowed) {
            return '';
        }
        return this.type === SplitterType.Horizontal ? 'col-resize' : 'row-resize';
    }
    /**
     * @hidden @internal
     */
    get prevButtonHidden() {
        return this.siblings[0].collapsed && !this.siblings[1].collapsed;
    }
    /**
     * @hidden @internal
     */
    keyEvent(event) {
        const key = event.key.toLowerCase();
        const ctrl = event.ctrlKey;
        event.stopPropagation();
        if (SPLITTER_INTERACTION_KEYS.has(key)) {
            event.preventDefault();
        }
        switch (key) {
            case 'arrowup':
            case 'up':
                if (this.type === SplitterType.Vertical) {
                    if (ctrl) {
                        this.onCollapsing(false);
                        break;
                    }
                    if (!this.resizeDisallowed) {
                        event.preventDefault();
                        this.moveStart.emit(this.pane);
                        this.moving.emit(10);
                    }
                }
                break;
            case 'arrowdown':
            case 'down':
                if (this.type === SplitterType.Vertical) {
                    if (ctrl) {
                        this.onCollapsing(true);
                        break;
                    }
                    if (!this.resizeDisallowed) {
                        event.preventDefault();
                        this.moveStart.emit(this.pane);
                        this.moving.emit(-10);
                    }
                }
                break;
            case 'arrowleft':
            case 'left':
                if (this.type === SplitterType.Horizontal) {
                    if (ctrl) {
                        this.onCollapsing(false);
                        break;
                    }
                    if (!this.resizeDisallowed) {
                        event.preventDefault();
                        this.moveStart.emit(this.pane);
                        this.moving.emit(10);
                    }
                }
                break;
            case 'arrowright':
            case 'right':
                if (this.type === SplitterType.Horizontal) {
                    if (ctrl) {
                        this.onCollapsing(true);
                        break;
                    }
                    if (!this.resizeDisallowed) {
                        event.preventDefault();
                        this.moveStart.emit(this.pane);
                        this.moving.emit(-10);
                    }
                }
                break;
            default:
                break;
        }
    }
    /**
     * @hidden @internal
     */
    get dragDir() {
        return this.type === SplitterType.Horizontal ? DragDirection.VERTICAL : DragDirection.HORIZONTAL;
    }
    /**
     * @hidden @internal
     */
    get nextButtonHidden() {
        return this.siblings[1].collapsed && !this.siblings[0].collapsed;
    }
    /**
     * @hidden @internal
     */
    onDragStart(event) {
        if (this.resizeDisallowed) {
            event.cancel = true;
            return;
        }
        this.startPoint = this.type === SplitterType.Horizontal ? event.startX : event.startY;
        this.moveStart.emit(this.pane);
    }
    /**
     * @hidden @internal
     */
    onDragMove(event) {
        const isHorizontal = this.type === SplitterType.Horizontal;
        const curr = isHorizontal ? event.pageX : event.pageY;
        const delta = this.startPoint - curr;
        if (delta !== 0) {
            this.moving.emit(delta);
            event.cancel = true;
            event.owner.element.nativeElement.style.transform = '';
        }
    }
    onDragEnd(event) {
        const isHorizontal = this.type === SplitterType.Horizontal;
        const curr = isHorizontal ? event.pageX : event.pageY;
        const delta = this.startPoint - curr;
        if (delta !== 0) {
            this.movingEnd.emit(delta);
        }
    }
    get resizeDisallowed() {
        const relatedTabs = this.siblings;
        return !!relatedTabs.find(x => x.resizable === false || x.collapsed === true);
    }
    /**
     * @hidden @internal
     */
    onCollapsing(next) {
        const prevSibling = this.siblings[0];
        const nextSibling = this.siblings[1];
        let target;
        if (next) {
            // if next is clicked when prev pane is hidden, show prev pane, else hide next pane.
            target = prevSibling.collapsed ? prevSibling : nextSibling;
        }
        else {
            // if prev is clicked when next pane is hidden, show next pane, else hide prev pane.
            target = nextSibling.collapsed ? nextSibling : prevSibling;
        }
        target.toggle();
    }
}
IgxSplitBarComponent.ɵfac = function IgxSplitBarComponent_Factory(t) { return new (t || IgxSplitBarComponent)(); };
IgxSplitBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxSplitBarComponent, selectors: [["igx-splitter-bar"]], hostVars: 6, hostBindings: function IgxSplitBarComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function IgxSplitBarComponent_keydown_HostBindingHandler($event) { return ctx.keyEvent($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabindex)("aria-orientation", ctx.orientation);
        ɵngcc0.ɵɵstyleProp("order", ctx.order);
        ɵngcc0.ɵɵclassProp("igx-splitter-bar-host", ctx.cssClass);
    } }, inputs: { type: "type", order: "order", pane: "pane", siblings: "siblings" }, outputs: { moveStart: "moveStart", moving: "moving", movingEnd: "movingEnd" }, decls: 4, vars: 8, consts: [["igxDrag", "", 1, "igx-splitter-bar", 3, "ghost", "dragDirection", "dragStart", "dragMove", "dragEnd"], ["igxDragIgnore", "", 1, "igx-splitter-bar__expander--start", 3, "hidden", "click"], [1, "igx-splitter-bar__handle"], ["igxDragIgnore", "", 1, "igx-splitter-bar__expander--end", 3, "hidden", "click"]], template: function IgxSplitBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("dragStart", function IgxSplitBarComponent_Template_div_dragStart_0_listener($event) { return ctx.onDragStart($event); })("dragMove", function IgxSplitBarComponent_Template_div_dragMove_0_listener($event) { return ctx.onDragMove($event); })("dragEnd", function IgxSplitBarComponent_Template_div_dragEnd_0_listener($event) { return ctx.onDragEnd($event); });
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵlistener("click", function IgxSplitBarComponent_Template_div_click_1_listener() { return ctx.onCollapsing(false); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵlistener("click", function IgxSplitBarComponent_Template_div_click_3_listener() { return ctx.onCollapsing(true); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("cursor", ctx.cursor);
        ɵngcc0.ɵɵclassProp("igx-splitter-bar--vertical", ctx.type === 0);
        ɵngcc0.ɵɵproperty("ghost", false)("dragDirection", ctx.dragDir);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", ctx.prevButtonHidden);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hidden", ctx.nextButtonHidden);
    } }, directives: [ɵngcc1.IgxDragDirective, ɵngcc1.IgxDragIgnoreDirective], encapsulation: 2 });
IgxSplitBarComponent.propDecorators = {
    cssClass: [{ type: HostBinding, args: ['class.igx-splitter-bar-host',] }],
    type: [{ type: Input }],
    order: [{ type: HostBinding, args: ['style.order',] }, { type: Input }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    orientation: [{ type: HostBinding, args: ['attr.aria-orientation',] }],
    pane: [{ type: Input }],
    siblings: [{ type: Input }],
    moveStart: [{ type: Output }],
    moving: [{ type: Output }],
    movingEnd: [{ type: Output }],
    keyEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxSplitBarComponent, [{
        type: Component,
        args: [{
                selector: 'igx-splitter-bar',
                template: "<div class=\"igx-splitter-bar\"\n    [class.igx-splitter-bar--vertical]='type === 0'\n    [style.cursor]='cursor'\n    igxDrag\n    [ghost]=\"false\"\n    [dragDirection]='dragDir'\n    (dragStart)='onDragStart($event)'\n    (dragMove)=\"onDragMove($event)\"\n    (dragEnd)=\"onDragEnd($event)\"\n>\n    <div class=\"igx-splitter-bar__expander--start\" igxDragIgnore (click)='onCollapsing(false)' [hidden]='prevButtonHidden'></div>\n    <div class=\"igx-splitter-bar__handle\" ></div>\n    <div class=\"igx-splitter-bar__expander--end\" igxDragIgnore (click)='onCollapsing(true)' [hidden]='nextButtonHidden'></div>\n</div>\n"
            }]
    }], function () { return []; }, { cssClass: [{
            type: HostBinding,
            args: ['class.igx-splitter-bar-host']
        }], type: [{
            type: Input
        }], moveStart: [{
            type: Output
        }], moving: [{
            type: Output
        }], movingEnd: [{
            type: Output
        }], tabindex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], orientation: [{
            type: HostBinding,
            args: ['attr.aria-orientation']
        }], 
    /**
     * @hidden @internal
     */
    keyEvent: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], order: [{
            type: HostBinding,
            args: ['style.order']
        }, {
            type: Input
        }], pane: [{
            type: Input
        }], siblings: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,