import { CommonModule } from '@angular/common';
import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, NgModule, Output, TemplateRef, ViewChild, ContentChild, Injectable, Injector, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';
import { IgxIconModule } from '../icon/public_api';
import { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';
import { IgxAmPmItemDirective, IgxHourItemDirective, IgxMinuteItemDirective, IgxSecondsItemDirective, IgxItemListDirective, IgxTimePickerTemplateDirective, IgxTimePickerActionsDirective } from './time-picker.directives';
import { Subject, fromEvent, interval, animationFrameScheduler } from 'rxjs';
import { IGX_TIME_PICKER_COMPONENT, TimeParts } from './time-picker.common';
import { AbsoluteScrollStrategy } from '../services/overlay/scroll';
import { AutoPositionStrategy } from '../services/overlay/position';
import { takeUntil, throttle } from 'rxjs/operators';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxMaskModule } from '../directives/mask/mask.directive';
import { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { InteractionMode } from '../core/enums';
import { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';
import { IgxLabelDirective } from '../directives/label/label.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../directives/toggle/toggle.directive';
import * as ɵngcc3 from '../input-group/input-group.component';
import * as ɵngcc4 from '../directives/prefix/prefix.directive';
import * as ɵngcc5 from '../icon/icon.component';
import * as ɵngcc6 from '../directives/input/input.directive';
import * as ɵngcc7 from '../directives/mask/mask.directive';
import * as ɵngcc8 from '../directives/text-selection/text-selection.directive';
import * as ɵngcc9 from '../directives/label/label.directive';
import * as ɵngcc10 from '../directives/suffix/suffix.directive';
import * as ɵngcc11 from '../directives/button/button.directive';

const _c0 = ["hourList"];
const _c1 = ["minuteList"];
const _c2 = ["secondsList"];
const _c3 = ["ampmList"];
const _c4 = ["defaultTimePickerTemplate"];
const _c5 = ["dropdownInputTemplate"];
function IgxTimePickerComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0);
} }
function IgxTimePickerComponent_ng_template_2_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 18);
    ɵngcc0.ɵɵtext(1, "Time");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxTimePickerComponent_ng_template_2_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 19);
} }
function IgxTimePickerComponent_ng_template_2_igx_suffix_8_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-suffix", 20);
    ɵngcc0.ɵɵlistener("click", function IgxTimePickerComponent_ng_template_2_igx_suffix_8_Template_igx_suffix_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.clear(); });
    ɵngcc0.ɵɵelementStart(1, "igx-icon", 21);
    ɵngcc0.ɵɵtext(2, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function IgxTimePickerComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 11, 12);
    ɵngcc0.ɵɵlistener("mousedown", function IgxTimePickerComponent_ng_template_2_Template_igx_input_group_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.mouseDown($event); });
    ɵngcc0.ɵɵtemplate(2, IgxTimePickerComponent_ng_template_2_label_2_Template, 2, 0, "label", 13);
    ɵngcc0.ɵɵtemplate(3, IgxTimePickerComponent_ng_template_2_ng_container_3_Template, 1, 0, "ng-container", 14);
    ɵngcc0.ɵɵelementStart(4, "igx-prefix", 15);
    ɵngcc0.ɵɵlistener("click", function IgxTimePickerComponent_ng_template_2_Template_igx_prefix_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r22); const _r15 = ɵngcc0.ɵɵreference(1); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.openDialog(_r15.element.nativeElement); });
    ɵngcc0.ɵɵelementStart(5, "igx-icon");
    ɵngcc0.ɵɵtext(6, "access_time");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "input", 16);
    ɵngcc0.ɵɵlistener("input", function IgxTimePickerComponent_ng_template_2_Template_input_input_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.onInput($event); })("blur", function IgxTimePickerComponent_ng_template_2_Template_input_blur_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.onBlur($event); })("focus", function IgxTimePickerComponent_ng_template_2_Template_input_focus_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.onFocus($event); })("wheel", function IgxTimePickerComponent_ng_template_2_Template_input_wheel_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.spinOnEdit($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, IgxTimePickerComponent_ng_template_2_igx_suffix_8_Template, 3, 0, "igx-suffix", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("suppressInputAutofocus", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.labelDirective);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("igxMask", ctx_r3.mask)("includeLiterals", true)("placeholder", ctx_r3.format)("displayValuePipe", ctx_r3.displayFormat)("focusedValuePipe", ctx_r3.inputFormat)("promptChar", ctx_r3.promptChar)("value", ctx_r3.displayValue)("igxTextSelection", true)("disabled", ctx_r3.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.showClearButton);
} }
function IgxTimePickerComponent_ng_template_4_label_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 18);
    ɵngcc0.ɵɵtext(1, "Time");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxTimePickerComponent_ng_template_4_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 19);
} }
function IgxTimePickerComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 22);
    ɵngcc0.ɵɵlistener("click", function IgxTimePickerComponent_ng_template_4_Template_igx_input_group_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r31); const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.openDialog(); })("mousedown", function IgxTimePickerComponent_ng_template_4_Template_igx_input_group_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.mouseDown($event); });
    ɵngcc0.ɵɵelementStart(1, "igx-prefix");
    ɵngcc0.ɵɵelementStart(2, "igx-icon");
    ɵngcc0.ɵɵtext(3, "access_time");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, IgxTimePickerComponent_ng_template_4_label_4_Template, 2, 0, "label", 13);
    ɵngcc0.ɵɵtemplate(5, IgxTimePickerComponent_ng_template_4_ng_container_5_Template, 1, 0, "ng-container", 14);
    ɵngcc0.ɵɵelementStart(6, "input", 23);
    ɵngcc0.ɵɵlistener("blur", function IgxTimePickerComponent_ng_template_4_Template_input_blur_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.onBlur($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.labelDirective);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r5.displayTime || "")("disabled", ctx_r5.disabled);
} }
function IgxTimePickerComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTimePickerComponent_ng_template_7_div_0_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r38 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 27);
    ɵngcc0.ɵɵlistener("click", function IgxTimePickerComponent_ng_template_7_div_0_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r38); const ctx_r37 = ɵngcc0.ɵɵnextContext(3); return ctx_r37.cancelButtonClick(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r35 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r35.cancelButtonLabel, " ");
} }
function IgxTimePickerComponent_ng_template_7_div_0_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r40 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 27);
    ɵngcc0.ɵɵlistener("click", function IgxTimePickerComponent_ng_template_7_div_0_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r40); const ctx_r39 = ɵngcc0.ɵɵnextContext(3); return ctx_r39.okButtonClick(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r36 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r36.okButtonLabel, " ");
} }
function IgxTimePickerComponent_ng_template_7_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵtemplate(1, IgxTimePickerComponent_ng_template_7_div_0_button_1_Template, 2, 1, "button", 26);
    ɵngcc0.ɵɵtemplate(2, IgxTimePickerComponent_ng_template_7_div_0_button_2_Template, 2, 1, "button", 26);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r34 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r34.cancelButtonLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r34.okButtonLabel);
} }
function IgxTimePickerComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTimePickerComponent_ng_template_7_div_0_Template, 3, 2, "div", 24);
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.cancelButtonLabel || ctx_r8.okButtonLabel);
} }
function IgxTimePickerComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 28);
    ɵngcc0.ɵɵelementStart(1, "h5", 29);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "h2", 30);
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(6, ":");
    ɵngcc0.ɵɵelementStart(7, "span");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(9, ":");
    ɵngcc0.ɵɵelementStart(10, "span");
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r9.selectedAmPm);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r9.selectedHour);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r9.selectedMinute);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r9.selectedSeconds);
} }
const _c6 = function (a0) { return { "igx-time-picker__item--disabled": a0 }; };
function IgxTimePickerComponent_div_13_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 34);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const hour_r43 = ctx.$implicit;
    const ctx_r42 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("igxHourItem", hour_r43)("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c6, ctx_r42.applyDisabledStyleForItem(ctx_r42.timeParts.Hour, hour_r43)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(hour_r43);
} }
function IgxTimePickerComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 31, 32);
    ɵngcc0.ɵɵtemplate(2, IgxTimePickerComponent_div_13_span_2_Template, 2, 5, "span", 33);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxItemList", "hourList");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r10.hourView);
} }
function IgxTimePickerComponent_div_14_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 37);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const minute_r46 = ctx.$implicit;
    const ctx_r45 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("igxMinuteItem", minute_r46)("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c6, ctx_r45.applyDisabledStyleForItem(ctx_r45.timeParts.Minute, minute_r46)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(minute_r46);
} }
function IgxTimePickerComponent_div_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 31, 35);
    ɵngcc0.ɵɵtemplate(2, IgxTimePickerComponent_div_14_span_2_Template, 2, 5, "span", 36);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxItemList", "minuteList");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r11.minuteView);
} }
function IgxTimePickerComponent_div_15_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 40);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const seconds_r49 = ctx.$implicit;
    const ctx_r48 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("igxSecondsItem", seconds_r49)("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c6, ctx_r48.applyDisabledStyleForItem(ctx_r48.timeParts.Seconds, seconds_r49)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(seconds_r49);
} }
function IgxTimePickerComponent_div_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 31, 38);
    ɵngcc0.ɵɵtemplate(2, IgxTimePickerComponent_div_15_span_2_Template, 2, 5, "span", 39);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxItemList", "secondsList");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r12.secondsView);
} }
function IgxTimePickerComponent_div_16_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 43);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ampm_r52 = ctx.$implicit;
    const ctx_r51 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("igxAmPmItem", ampm_r52)("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c6, ctx_r51.applyDisabledStyleForItem(ctx_r51.timeParts.amPM, ampm_r52)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ampm_r52);
} }
function IgxTimePickerComponent_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 31, 41);
    ɵngcc0.ɵɵtemplate(2, IgxTimePickerComponent_div_16_span_2_Template, 2, 5, "span", 42);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxItemList", "ampmList");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.ampmView);
} }
function IgxTimePickerComponent_ng_container_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c7 = [[["", "igxLabel", ""]]];
const _c8 = function (a0, a1) { return { "igx-time-picker--dropdown": a0, "igx-time-picker--vertical": a1 }; };
const _c9 = ["[igxLabel]"];
let NEXT_ID = 0;
const ITEMS_COUNT = 7;
export class TimePickerHammerConfig extends HammerGestureConfig {
    constructor() {
        super(...arguments);
        this.overrides = {
            pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }
        };
    }
}
TimePickerHammerConfig.ɵfac = function TimePickerHammerConfig_Factory(t) { return ɵTimePickerHammerConfig_BaseFactory(t || TimePickerHammerConfig); };
TimePickerHammerConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimePickerHammerConfig, factory: TimePickerHammerConfig.ɵfac });
const ɵTimePickerHammerConfig_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(TimePickerHammerConfig);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimePickerHammerConfig, [{
        type: Injectable
    }], null, null); })();
const noop = () => { };
const ɵ0 = noop;
export class IgxTimePickerComponent {
    constructor(_injector, _cdr) {
        this._injector = _injector;
        this._cdr = _cdr;
        /**
         * An @Input property that sets the value of the `id` attribute.
         * ```html
         * <igx-time-picker [id]="'igx-time-picker-5'" format="h:mm tt" ></igx-time-picker>
         * ```
         */
        this.id = `igx-time-picker-${NEXT_ID++}`;
        /**
         * @hidden @internal
         */
        this.timeParts = Object.assign({}, TimeParts);
        /**
         * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.
         * ```html
         * <igx-time-picker [disabled]="'true'" [vertical]="true" format="h:mm tt" ></igx-time-picker>
         * ```
         */
        this.disabled = false;
        /**
         * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.
         * The seconds, minutes and hour spinning will wrap around by default.
         * ```html
         * <igx-time-picker [isSpinLoop]="false" id="time-picker"></igx-time-picker>
         * ```
         */
        this.isSpinLoop = true;
        /**
         * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.
         * ```html
         * <igx-time-picker [vertical]="true" id="time-picker"></igx-time-picker>
         * ```
         */
        this.vertical = false;
        /**
         * Sets the character used to prompt the user for input.
         * Default value is "'-'".
         * ```html
         * <igx-time-picker [promptChar] = "'_'">
         * ```
         * @memberof IgxTimePickerComponent
         */
        this.promptChar = '-';
        /**
         * An @Input property that allows you to switch the interaction mode between
         * a dialog picker or dropdown with editable masked input.
         * Deafult is dialog picker.
         * ```html
         * public mode = InteractionMode.DROPDOWN;
         *  //..
         * <igx-time-picker [mode]="mode"></igx-time-picker>
         * ```
         * @memberof IgxTimePickerComponent
         */
        this.mode = InteractionMode.Dialog;
        /**
         * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.
         * ```typescript
         *  @ViewChild("toast")
         * private toast: IgxToastComponent;
         * public onValueChanged(timepicker){
         *     this.toast.show()
         * }
         *  //...
         *  ```
         *  ```html
         * <igx-time-picker (onValueChanged)="onValueChanged($event)"></igx-time-picker>
         * <igx-toast #toast message="The value has been changed!"></igx-toast>
         * ```
         */
        this.onValueChanged = new EventEmitter();
        /**
         * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}
         * ```typescript
         * public min: string = "09:00";
         * public max: string = "18:00";
         *  @ViewChild("toast")
         * private toast: IgxToastComponent;
         * public onValidationFailed(timepicker){
         *     this.toast.show();
         * }
         *  //...
         *  ```
         *  ```html
         * <igx-time-picker [minValue]="min" [maxValue]="max" (onValidationFailed)="onValidationFailed($event)"></igx-time-picker>
         * <igx-toast #toast message="Value must be between 09:00 and 18:00!"></igx-toast>
         * ```
         */
        this.onValidationFailed = new EventEmitter();
        /**
         * Emitted when a timePicker is opened.
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted when a timePicker is closed.
         */
        this.onClosed = new EventEmitter();
        /**
         * Emitted when a timePicker is being closed.
         */
        this.onClosing = new EventEmitter();
        /**
         * @hidden
         */
        this._hourItems = [];
        /**
         * @hidden
         */
        this._minuteItems = [];
        /**
         * @hidden
         */
        this._secondsItems = [];
        /**
         * @hidden
         */
        this._ampmItems = [];
        /**
         * @hidden
         */
        this.cleared = false;
        /**
         * @hidden
         */
        this.isNotEmpty = false;
        /**
         * @hidden
         */
        this.displayFormat = new TimeDisplayFormatPipe(this);
        /**
         * @hidden
         */
        this.inputFormat = new TimeInputFormatPipe(this);
        this._resourceStrings = CurrentResourceStrings.TimePickerResStrings;
        this._okButtonLabel = null;
        this._cancelButtonLabel = null;
        this._itemsDelta = { hours: 1, minutes: 1, seconds: 1 };
        this._isHourListLoop = this.isSpinLoop;
        this._isMinuteListLoop = this.isSpinLoop;
        this._isSecondsListLoop = this.isSpinLoop;
        this._hourView = [];
        this._minuteView = [];
        this._secondsView = [];
        this._ampmView = [];
        this._destroy$ = new Subject();
        this._onOpen = new EventEmitter();
        this._onClose = new EventEmitter();
        this._hoursPos = new Set();
        this._minutesPos = new Set();
        this._secondsPos = new Set();
        this._amPmPos = new Set();
        this._ngControl = null;
        //#region ControlValueAccessor
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
    }
    /**
     * An accessor that allows you to set a time using the `value` input.
     * ```html
     * public date: Date = new Date(Date.now());
     *  //...
     * <igx-time-picker [value]="date" format="h:mm tt"></igx-time-picker>
     * ```
     */
    set value(value) {
        if (this._isValueValid(value)) {
            const oldVal = this._value;
            this._value = value;
            this._onChangeCallback(value);
            const dispVal = this._formatTime(this.value, this.format);
            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {
                this.displayValue = dispVal;
            }
            const args = {
                oldValue: oldVal,
                newValue: value
            };
            this.onValueChanged.emit(args);
        }
        else {
            const args = {
                timePicker: this,
                currentValue: value,
                setThroughUI: false
            };
            this.onValidationFailed.emit(args);
        }
    }
    /**
     * An accessor that returns the value of `igx-time-picker` component.
     * ```html
     * @ViewChild("MyPick")
     * public pick: IgxTimePickerComponent;
     * ngAfterViewInit(){
     *    let pickSelect = this.pick.value;
     * }
     * ```
     */
    get value() {
        return this._value;
    }
    /**
     * An accessor that sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * An accessor that returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    /**
     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.
     * ```html
     * <igx-time-picker okButtonLabel='SET' [value]="date" format="h:mm tt"></igx-time-picker>
     * ```
     */
    set okButtonLabel(value) {
        this._okButtonLabel = value;
    }
    /**
     * An accessor that returns the label of ok button.
     */
    get okButtonLabel() {
        if (this._okButtonLabel === null) {
            return this.resourceStrings.igx_time_picker_ok;
        }
        return this._okButtonLabel;
    }
    /**
     * An @Input property that renders cancel button with custom text.
     * By default `cancelButtonLabel` is set to Cancel.
     * ```html
     * <igx-time-picker cancelButtonLabel='Exit' [value]="date" format="h:mm tt"></igx-time-picker>
     * ```
     */
    set cancelButtonLabel(value) {
        this._cancelButtonLabel = value;
    }
    /**
     * An accessor that returns the label of cancel button.
     */
    get cancelButtonLabel() {
        if (this._cancelButtonLabel === null) {
            return this.resourceStrings.igx_time_picker_cancel;
        }
        return this._cancelButtonLabel;
    }
    /**
     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>
     * when the user presses the Up/Down keys.
     * By default `itemsDelta` is set to `{hours: 1, minutes: 1, seconds: 1}`
     * ```html
     * <igx-time-picker [itemsDelta]="{hours:3, minutes:5, seconds:10}" id="time-picker"></igx-time-picker>
     * ```
     */
    set itemsDelta(value) {
        this._itemsDelta = Object.assign({ hours: 1, minutes: 1, seconds: 1 }, value);
    }
    get itemsDelta() {
        return this._itemsDelta;
    }
    /**
     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>
     * By default `format` is set to hh:mm tt. <br>
     * List of time-flags: <br>
     * `h` : hours field in 12-hours format without leading zero <br>
     * `hh` : hours field in 12-hours format with leading zero <br>
     * `H` : hours field in 24-hours format without leading zero <br>
     * `HH` : hours field in 24-hours format with leading zero <br>
     * `m` : minutes field without leading zero <br>
     * `mm` : minutes field with leading zero <br>
     * `s` : seconds field without leading zero <br>
     * `ss` : seconds field with leading zero <br>
     * `tt` : 2 character string which represents AM/PM field <br>
     * ```html
     * <igx-time-picker format="HH:m" id="time-picker"></igx-time-picker>
     * ```
     */
    get format() {
        return this._format || 'hh:mm tt';
    }
    set format(formatValue) {
        this._format = formatValue;
        this.mask = this._format.indexOf('tt') !== -1 ? '00:00:00 LL' : '00:00:00';
        if (!this.showHoursList || !this.showMinutesList) {
            this.trimMask();
        }
        if (!this.showSecondsList) {
            this.trimMask();
        }
        if (this.displayValue) {
            this.displayValue = this._formatTime(this.value, this._format);
        }
        this.determineCursorPos();
    }
    /**
     * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.
     * ```typescript
     * const settings: OverlaySettings = {
     *      closeOnOutsideClick: true,
     *      modal: false
     *  }
     * ```
     * ---
     * ```html
     * <igx-time-picker [overlaySettings]="settings"></igx-time-picker>
     * ```
     * @memberof IgxTimePickerComponent
     */
    set overlaySettings(value) {
        this._overlaySettings = value;
    }
    get overlaySettings() {
        return this._overlaySettings ? this._overlaySettings :
            (this.mode === InteractionMode.Dialog ? this._dialogOverlaySettings : this._dropDownOverlaySettings);
    }
    /** @hidden @internal */
    writeValue(value) {
        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)
        // against the real value when initializing the component and value is bound via ngModel
        this._dateFromModel = value;
        this._value = value;
        if (this.mode === InteractionMode.DropDown) {
            this.displayValue = this._formatTime(this.value, this.format);
        }
    }
    /** @hidden @internal */
    applyDisabledStyleForItem(period, value) {
        if (!this.minValue || !this.maxValue) {
            return false;
        }
        const minValueDate = this.convertMinMaxValue(this.minValue);
        const maxValueDate = this.convertMinMaxValue(this.maxValue);
        let hour = parseInt(this.selectedHour, 10);
        let minute = parseInt(this.selectedMinute, 10);
        let seconds = parseInt(this.selectedSeconds, 10);
        let amPM = this.selectedAmPm;
        const date = new Date(minValueDate);
        switch (period) {
            case TimeParts.Hour:
                hour = parseInt(value, 10);
                break;
            case TimeParts.Minute:
                minute = parseInt(value, 10);
                break;
            case TimeParts.Seconds:
                seconds = parseInt(value, 10);
                break;
            case TimeParts.amPM:
                amPM = value;
                break;
        }
        if (amPM === 'PM') {
            hour += 12;
        }
        date.setHours(hour);
        date.setMinutes(minute);
        date.setSeconds(seconds);
        return date < minValueDate || date > maxValueDate;
    }
    /** @hidden @internal */
    registerOnChange(fn) { this._onChangeCallback = fn; }
    /** @hidden @internal */
    registerOnTouched(fn) { this._onTouchedCallback = fn; }
    /** @hidden @internal */
    setDisabledState(isDisabled) { this.disabled = isDisabled; }
    //#endregion
    trimMask() {
        this.mask = this.mask.slice(this.mask.indexOf(':') + 1, this.mask.length);
    }
    /**
     * @hidden
     */
    get mask() {
        return this._mask || '00:00 LL';
    }
    set mask(val) {
        this._mask = val;
    }
    /**
     * @hidden
     */
    get displayValue() {
        if (this._displayValue === undefined) {
            return this._formatTime(this.value, this.format);
        }
        return this._displayValue;
    }
    set displayValue(value) {
        this._displayValue = value;
    }
    /**
     * Returns the current time formatted as string using the `format` option.
     * If there is no set time the return is an empty string.
     * ```typescript
     * @ViewChild("MyChild")
     * private picker: IgxTimePickerComponent;
     * ngAfterViewInit(){
     *    let time = this.picker.displayTime;
     * }
     * ```
     */
    get displayTime() {
        if (this.value) {
            return this._formatTime(this.value, this.format);
        }
        return '';
    }
    /**
     * @hidden
     */
    get hourView() {
        return this._hourView;
    }
    /**
     * @hidden
     */
    get minuteView() {
        return this._minuteView;
    }
    /**
     * @hidden
     */
    get secondsView() {
        return this._secondsView;
    }
    /**
     * @hidden
     */
    get ampmView() {
        return this._ampmView;
    }
    /**
     * @hidden
     */
    get showClearButton() {
        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;
    }
    /**
     * @hidden
     */
    get showHoursList() {
        return this.format.indexOf('h') !== -1 || this.format.indexOf('H') !== -1;
    }
    /**
     * @hidden
     */
    get showMinutesList() {
        return this.format.indexOf('m') !== -1;
    }
    /**
     * @hidden
     */
    get showSecondsList() {
        return this.format.indexOf('s') !== -1;
    }
    /**
     * @hidden
     */
    get showAmPmList() {
        return this.format.indexOf('t') !== -1;
    }
    /**
     * @hidden
     */
    get validSecondsEntries() {
        const secondsEntries = [];
        for (let i = 0; i < 60; i++) {
            secondsEntries.push(i);
        }
        return secondsEntries;
    }
    /**
     * @hidden
     */
    get validMinuteEntries() {
        const minuteEntries = [];
        for (let i = 0; i < 60; i++) {
            minuteEntries.push(i);
        }
        return minuteEntries;
    }
    /**
     * @hidden
     */
    get validHourEntries() {
        const hourEntries = [];
        const index = this.format.indexOf('h') !== -1 ? 13 : 24;
        for (let i = 0; i < index; i++) {
            hourEntries.push(i);
        }
        return hourEntries;
    }
    /**
     * Gets the input group template.
     * ```typescript
     * let template = this.template();
     * ```
     * @memberof IgxTimePickerComponent
     */
    get template() {
        if (this.timePickerTemplateDirective) {
            return this.timePickerTemplateDirective.template;
        }
        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;
    }
    /**
     * Gets the context passed to the input group template.
     * @memberof IgxTimePickerComponent
     */
    get context() {
        return {
            value: this.value,
            displayTime: this.displayTime,
            displayValue: this.displayValue,
            openDialog: (target) => this.openDialog(target)
        };
    }
    get required() {
        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            const error = this._ngControl.control.validator({});
            return error && error.required;
        }
        return false;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this._generateHours();
        this._generateMinutes();
        this._generateSeconds();
        if (this.format.indexOf('tt') !== -1) {
            this._generateAmPm();
        }
        this._dropDownOverlaySettings = {
            modal: false,
            closeOnOutsideClick: true,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy()
        };
        this._dialogOverlaySettings = {};
        this._ngControl = this._injector.get(NgControl, null);
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {
            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(throttle(() => interval(0, animationFrameScheduler)), takeUntil(this._destroy$)).subscribe((event) => {
                if (event.key === "ArrowUp" /* UP_ARROW */ || event.key === "Up" /* UP_ARROW_IE */ ||
                    event.key === "ArrowDown" /* DOWN_ARROW */ || event.key === "Down" /* DOWN_ARROW_IE */) {
                    this.spinOnEdit(event);
                }
            });
        }
        if (this.toggleRef && this._inputGroup) {
            this.toggleRef.element.style.width = this._inputGroup.element.nativeElement.getBoundingClientRect().width + 'px';
        }
        if (this.toggleRef) {
            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {
                if (this.mode === InteractionMode.DropDown) {
                    this._onDropDownClosed();
                }
                this.onClosed.emit(this);
            });
            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {
                this.onOpened.emit(this);
            });
            this.toggleRef.onClosing.pipe(takeUntil(this._destroy$)).subscribe((event) => {
                this.onClosing.emit(event);
                // If canceled in a user onClosing handler
                if (event.cancel) {
                    return;
                }
                // Do not focus the input if clicking outside in dropdown mode
                const input = this.getEditElement();
                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {
                    input.focus();
                }
                else {
                    this._updateValidityOnBlur();
                }
            });
            this.determineCursorPos();
            if (this._ngControl) {
                this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
            }
        }
    }
    ngAfterViewChecked() {
        // if one sets mode at run time this forces initialization of new igxInputGroup
        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of
        // the new directive isRequired of the igxInputGroup is set again. However
        // ngAfterViewInit of the time picker is not called again and we may finish with wrong
        // isRequired in igxInputGroup. This is why we should set it her, only when needed
        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {
            this._inputGroup.isRequired = this.required;
            this._cdr.detectChanges();
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this._destroy$.next(true);
        this._destroy$.complete();
    }
    /**
     * @hidden
     */
    onKeydownSpace(event) {
        this.openDialog(this.getInputGroupElement());
        event.preventDefault();
    }
    /**
     * @hidden
     */
    onAltArrowDown() {
        this.openDialog(this.getInputGroupElement());
    }
    determineCursorPos() {
        this.clearCursorPos();
        for (const char of this.format) {
            switch (char) {
                case 'H':
                case 'h':
                    this._hoursPos.size === 0 ? this._hoursPos.add(this.format.indexOf(char)) :
                        this._hoursPos.add(this.format.lastIndexOf(char));
                    this._hoursPos.add(this.format.lastIndexOf(char) + 1);
                    break;
                case 'M':
                case 'm':
                    this._minutesPos.size === 0 ? this._minutesPos.add(this.format.indexOf(char)) :
                        this._minutesPos.add(this.format.lastIndexOf(char));
                    this._minutesPos.add(this.format.lastIndexOf(char) + 1);
                    break;
                case 'S':
                case 's':
                    this._secondsPos.size === 0 ? this._secondsPos.add(this.format.indexOf(char)) :
                        this._secondsPos.add(this.format.lastIndexOf(char));
                    this._secondsPos.add(this.format.lastIndexOf(char) + 1);
                    break;
                case 'T':
                case 't':
                    this._amPmPos.size === 0 ? this._amPmPos.add(this.format.indexOf(char)) :
                        this._amPmPos.add(this.format.lastIndexOf(char));
                    this._amPmPos.add(this.format.lastIndexOf(char) + 1);
                    break;
            }
        }
    }
    clearCursorPos() {
        this._hoursPos.forEach(v => this._hoursPos.delete(v));
        this._minutesPos.forEach(v => this._minutesPos.delete(v));
        this._secondsPos.forEach(v => this._secondsPos.delete(v));
        this._amPmPos.forEach(v => this._amPmPos.delete(v));
    }
    _scrollItemIntoView(item, items, selectedItem, isListLoop, viewType) {
        let itemIntoView;
        if (items) {
            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));
            let view;
            if (index !== -1) {
                if (isListLoop) {
                    if (index > 0) {
                        selectedItem = this._itemToString(items[index - 1], viewType);
                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);
                    }
                    else {
                        selectedItem = this._itemToString(items[1], viewType);
                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);
                    }
                }
                else {
                    view = items.slice(index - 3, index + 4);
                    selectedItem = this._itemToString(items[index], viewType);
                    itemIntoView = { selectedItem, view };
                }
                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);
            }
        }
        return itemIntoView;
    }
    _viewToString(view, viewType) {
        for (let i = 0; i < view.length; i++) {
            if (typeof (view[i]) !== 'string') {
                view[i] = this._itemToString(view[i], viewType);
            }
        }
        return view;
    }
    _itemToString(item, viewType) {
        if (item === null) {
            item = '';
        }
        else if (viewType && typeof (item) !== 'string') {
            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));
            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);
            const leadZeroSeconds = (item < 10 && this.format.indexOf('ss') !== -1);
            const leadZero = {
                hour: leadZeroHour,
                minute: leadZeroMinute,
                seconds: leadZeroSeconds
            }[viewType];
            item = (leadZero) ? '0' + item : `${item}`;
        }
        return item;
    }
    _prevItem(items, selectedItem, isListLoop, viewType) {
        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));
        const itemsCount = items.length;
        let view;
        if (selectedIndex === -1) {
            view = items.slice(0, 7);
            selectedItem = items[3];
        }
        else if (isListLoop) {
            if (selectedIndex - 4 < 0) {
                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);
                view = view.concat(items.slice(0, selectedIndex + 3));
            }
            else if (selectedIndex + 4 > itemsCount) {
                view = items.slice(selectedIndex - 4, itemsCount);
                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));
            }
            else {
                view = items.slice(selectedIndex - 4, selectedIndex + 3);
            }
            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];
        }
        else if (selectedIndex > 3) {
            view = items.slice(selectedIndex - 4, selectedIndex + 3);
            selectedItem = items[selectedIndex - 1];
        }
        else if (selectedIndex === 3) {
            view = items.slice(0, 7);
        }
        view = this._viewToString(view, viewType);
        selectedItem = this._itemToString(selectedItem, viewType);
        return {
            selectedItem,
            view
        };
    }
    _nextItem(items, selectedItem, isListLoop, viewType) {
        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));
        const itemsCount = items.length;
        let view;
        if (selectedIndex === -1) {
            view = items.slice(0, 7);
            selectedItem = items[3];
        }
        else if (isListLoop) {
            if (selectedIndex < 2) {
                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);
                view = view.concat(items.slice(0, selectedIndex + 5));
            }
            else if (selectedIndex + 4 >= itemsCount) {
                view = items.slice(selectedIndex - 2, itemsCount);
                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));
            }
            else {
                view = items.slice(selectedIndex - 2, selectedIndex + 5);
            }
            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];
        }
        else if (selectedIndex + 1 < itemsCount - 3) {
            view = items.slice(selectedIndex - 2, selectedIndex + 5);
            selectedItem = items[selectedIndex + 1];
        }
        else if (selectedIndex === itemsCount - 4) {
            view = items.slice(selectedIndex - 3, itemsCount);
        }
        view = this._viewToString(view, viewType);
        selectedItem = this._itemToString(selectedItem, viewType);
        return {
            selectedItem,
            view
        };
    }
    _formatTime(value, format) {
        if (!value) {
            return '';
        }
        else {
            let hour = value.getHours();
            let formattedSeconds, formattedMinute, formattedHour;
            const minute = value.getMinutes();
            const seconds = value.getSeconds();
            const amPM = (hour > 11) ? 'PM' : 'AM';
            if (format.indexOf('h') !== -1) {
                if (hour > 12) {
                    hour -= 12;
                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;
                }
                else if (hour === 0) {
                    formattedHour = '12';
                }
                else if (hour < 10 && format.indexOf('hh') !== -1) {
                    formattedHour = '0' + hour;
                }
                else {
                    formattedHour = `${hour}`;
                }
            }
            else {
                if (hour < 10 && format.indexOf('HH') !== -1) {
                    formattedHour = '0' + hour;
                }
                else {
                    formattedHour = `${hour}`;
                }
            }
            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;
            formattedSeconds = seconds < 10 && format.indexOf('ss') !== -1 ? '0' + seconds : `${seconds}`;
            return format.replace('hh', formattedHour).replace('h', formattedHour)
                .replace('HH', formattedHour).replace('H', formattedHour)
                .replace('mm', formattedMinute).replace('m', formattedMinute)
                .replace('ss', formattedSeconds).replace('s', formattedSeconds)
                .replace('tt', amPM);
        }
    }
    _updateHourView(start, end) {
        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');
    }
    _updateMinuteView(start, end) {
        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');
    }
    _updateSecondsView(start, end) {
        this._secondsView = this._viewToString(this._secondsItems.slice(start, end), 'seconds');
    }
    _updateAmPmView(start, end) {
        this._ampmView = this._ampmItems.slice(start, end);
    }
    _addEmptyItems(items) {
        for (let i = 0; i < 3; i++) {
            items.push(null);
        }
    }
    _generateHours() {
        let hourItemsCount = 24;
        if (this.format.indexOf('h') !== -1) {
            hourItemsCount = 13;
        }
        hourItemsCount /= this.itemsDelta.hours;
        let i = this.format.indexOf('H') !== -1 ? 0 : 1;
        if (hourItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._hourItems);
            this._isHourListLoop = false;
        }
        if (hourItemsCount > 1) {
            for (i; i < hourItemsCount; i++) {
                this._hourItems.push(i * this.itemsDelta.hours);
            }
        }
        else {
            this._hourItems.push(0);
        }
        if (hourItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._hourItems);
        }
    }
    _generateMinutes() {
        const minuteItemsCount = 60 / this.itemsDelta.minutes;
        if (minuteItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._minuteItems);
            this._isMinuteListLoop = false;
        }
        for (let i = 0; i < minuteItemsCount; i++) {
            this._minuteItems.push(i * this.itemsDelta.minutes);
        }
        if (minuteItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._minuteItems);
        }
    }
    _generateSeconds() {
        const secondsItemsCount = 60 / this.itemsDelta.seconds;
        if (secondsItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._secondsItems);
            this._isSecondsListLoop = false;
        }
        for (let i = 0; i < secondsItemsCount; i++) {
            this._secondsItems.push(i * this.itemsDelta.seconds);
        }
        if (secondsItemsCount < 7 || !this.isSpinLoop) {
            this._addEmptyItems(this._secondsItems);
        }
    }
    _generateAmPm() {
        this._addEmptyItems(this._ampmItems);
        this._ampmItems.push('AM');
        this._ampmItems.push('PM');
        this._addEmptyItems(this._ampmItems);
    }
    _getSelectedTime() {
        const date = this.value ? new Date(this.value) : new Date();
        if (this.selectedHour) {
            date.setHours(parseInt(this.selectedHour, 10));
        }
        if (this.selectedMinute) {
            date.setMinutes(parseInt(this.selectedMinute, 10));
        }
        if (this.selectedSeconds) {
            date.setSeconds(parseInt(this.selectedSeconds, 10));
        }
        if (((this.showHoursList && this.selectedHour !== '12') || (!this.showHoursList && this.selectedHour <= '11')) &&
            this.selectedAmPm === 'PM') {
            date.setHours(date.getHours() + 12);
        }
        if (!this.showHoursList && this.selectedAmPm === 'AM' && this.selectedHour > '11') {
            date.setHours(date.getHours() - 12);
        }
        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {
            date.setHours(0);
        }
        return date;
    }
    /** @hidden @internal */
    convertMinMaxValue(value) {
        if (!value) {
            return;
        }
        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();
        const sections = value.split(/[\s:]+/);
        let hour, minutes, seconds, amPM;
        date.setSeconds(0);
        if (this.showHoursList) {
            hour = sections[0];
            date.setHours(parseInt(hour, 10));
        }
        if (this.showMinutesList) {
            minutes = this.showHoursList ? sections[1] : sections[0];
            date.setMinutes(parseInt(minutes, 10));
        }
        if (this.showSecondsList) {
            seconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];
            date.setSeconds(parseInt(seconds, 10));
        }
        if (this.showAmPmList) {
            amPM = sections[sections.length - 1].toUpperCase();
            if (((this.showHoursList && date.getHours().toString() !== '12') ||
                (!this.showHoursList && date.getHours().toString() <= '11')) && amPM === 'PM') {
                date.setHours(date.getHours() + 12);
            }
            if (!this.showHoursList && amPM === 'AM' && date.getHours().toString() > '11') {
                date.setHours(date.getHours() - 12);
            }
            if (this.showHoursList && date.getHours() === 12 && amPM === 'AM') {
                date.setHours(0);
            }
        }
        return date;
    }
    _isValueValid(value) {
        if (this.maxValue && value > this.convertMinMaxValue(this.maxValue)) {
            return false;
        }
        else if (this.minValue && value < this.convertMinMaxValue(this.minValue)) {
            return false;
        }
        else {
            return true;
        }
    }
    _isEntryValid(val) {
        let validH = true;
        let validM = true;
        let validS = true;
        const sections = val.split(/[\s:]+/);
        const re = new RegExp(this.promptChar, 'g');
        if (this.showHoursList) {
            validH = this.validHourEntries.indexOf(parseInt(sections[0].replace(re, ''), 10)) !== -1;
        }
        if (this.showMinutesList) {
            const minutes = this.showHoursList ? sections[1] : sections[0];
            validM = this.validMinuteEntries.indexOf(parseInt(minutes.replace(re, ''), 10)) !== -1;
        }
        if (this.showSecondsList) {
            const seconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];
            validS = this.validSecondsEntries.indexOf(parseInt(seconds.replace(re, ''), 10)) !== -1;
        }
        return validH && validM && validS;
    }
    _getCursorPosition() {
        return this._inputElementRef.nativeElement.selectionStart;
    }
    _setCursorPosition(start, end = start) {
        this._inputElementRef.nativeElement.setSelectionRange(start, end);
    }
    _updateEditableInput() {
        if (this.mode === InteractionMode.DropDown) {
            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);
        }
    }
    _spinHours(currentVal, minVal, maxVal, hDelta, sign) {
        const oldVal = new Date(currentVal);
        currentVal.setMinutes(sign * hDelta);
        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {
            currentVal.setDate(oldVal.getDate());
        }
        let minutes = currentVal.getMinutes();
        if (currentVal.getTime() > maxVal.getTime()) {
            if (this.isSpinLoop) {
                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;
                minVal.setMinutes(sign * minutes);
                return minVal;
            }
            else {
                return oldVal;
            }
        }
        else if (currentVal.getTime() < minVal.getTime()) {
            if (this.isSpinLoop) {
                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;
                maxVal.setMinutes(minutes);
                return maxVal;
            }
            else {
                return oldVal;
            }
        }
        else {
            return currentVal;
        }
    }
    _spinMinutes(currentVal, mDelta, sign) {
        let minutes = currentVal.getMinutes() + (sign * mDelta);
        if (minutes < 0 || minutes >= 60) {
            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();
        }
        currentVal.setMinutes(minutes);
        return currentVal;
    }
    _spinSeconds(currentVal, sDelta, sign) {
        let seconds = currentVal.getSeconds() + (sign * sDelta);
        if (seconds < 0 || seconds >= 60) {
            seconds = this.isSpinLoop ? seconds - (sign * 60) : currentVal.getSeconds();
        }
        currentVal.setSeconds(seconds);
        return currentVal;
    }
    _initializeContainer() {
        if (this.value) {
            const formttedTime = this._formatTime(this.value, this.format);
            const sections = formttedTime.split(/[\s:]+/);
            if (this.showHoursList) {
                this.selectedHour = sections[0];
            }
            if (this.showMinutesList) {
                this.selectedMinute = this.showHoursList ? sections[1] : sections[0];
            }
            if (this.showSecondsList) {
                this.selectedSeconds = sections[sections.length - (this.showAmPmList ? 2 : 1)];
            }
            if (this.showAmPmList && this._ampmItems !== null) {
                this.selectedAmPm = sections[sections.length - 1];
            }
        }
        if (this.selectedHour === undefined) {
            this.selectedHour = !this.showHoursList && this.value ? this.value.getHours().toString() :
                this.showHoursList ? `${this._hourItems[3]}` : '0';
        }
        if (this.selectedMinute === undefined) {
            this.selectedMinute = !this.showMinutesList && this.value ? this.value.getMinutes().toString() : '0';
        }
        if (this.selectedSeconds === undefined) {
            this.selectedSeconds = !this.showSecondsList && this.value ? this.value.getSeconds().toString() : '0';
        }
        if (this.selectedAmPm === undefined && this._ampmItems !== null) {
            this.selectedAmPm = this._ampmItems[3];
        }
        this._prevSelectedHour = this.selectedHour;
        this._prevSelectedMinute = this.selectedMinute;
        this._prevSelectedSeconds = this.selectedSeconds;
        this._prevSelectedAmPm = this.selectedAmPm;
        this._onTouchedCallback();
        this._updateHourView(0, ITEMS_COUNT);
        this._updateMinuteView(0, ITEMS_COUNT);
        this._updateSecondsView(0, ITEMS_COUNT);
        this._updateAmPmView(0, ITEMS_COUNT);
        if (this.selectedHour) {
            this.scrollHourIntoView(this.selectedHour);
        }
        if (this.selectedMinute) {
            this.scrollMinuteIntoView(this.selectedMinute);
        }
        if (this.selectedSeconds) {
            this.scrollSecondsIntoView(this.selectedSeconds);
        }
        if (this.selectedAmPm) {
            this.scrollAmPmIntoView(this.selectedAmPm);
        }
        requestAnimationFrame(() => {
            if (this.hourList) {
                this.hourList.nativeElement.focus();
            }
            else if (this.minuteList) {
                this.minuteList.nativeElement.focus();
            }
            else if (this.secondsList) {
                this.secondsList.nativeElement.focus();
            }
        });
    }
    _onDropDownClosed() {
        const oldValue = this.value;
        const newVal = this.convertMinMaxValue(this.displayValue);
        if (this.displayValue === this.parseMask(false)) {
            return;
        }
        if (this._isValueValid(newVal)) {
            if (!this.value || oldValue.getTime() !== newVal.getTime()) {
                this.value = newVal;
            }
        }
        else {
            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));
            const args = {
                timePicker: this,
                currentValue: newVal,
                setThroughUI: true
            };
            this.onValidationFailed.emit(args);
        }
    }
    onStatusChanged() {
        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&
            (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {
            const input = this._inputDirective || this._inputDirectiveUserTemplate;
            if (this._inputGroup.isFocused) {
                input.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
            }
            else {
                input.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
            }
        }
        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {
            this._inputGroup.isRequired = this.required;
        }
    }
    /**
     * @hidden
     */
    getEditElement() {
        return this._inputElementRef ? this._inputElementRef.nativeElement : null;
    }
    /**
     * @hidden
     */
    getInputGroupElement() {
        return this._inputGroup ? this._inputGroup.element.nativeElement : null;
    }
    /**
     * opens the dialog.
     * @param target HTMLElement - the target element to use for positioning the drop down container according to
     * ```html
     * <igx-time-picker [value]="date" mode="dropdown" #retemplated>
     *   <ng-template igxTimePickerTemplate let-openDialog="openDialog"
     *                let-displayTime="displayTime">
     *     <igx-input-group>
     *       <input #dropDownTarget igxInput [value]="displayTime" />
     *       <igx-suffix (click)="openDialog(dropDownTarget)">
     *         <igx-icon>alarm</igx-icon>
     *       </igx-suffix>
     *     </igx-input-group>
     *   </ng-template>
     * </igx-time-picker>
     * ```
     */
    openDialog(target) {
        if (!this.toggleRef.collapsed) {
            return this._onDropDownClosed();
        }
        const settings = this.overlaySettings;
        if (target && settings && settings.positionStrategy) {
            settings.target = target;
        }
        if (this.outlet) {
            settings.outlet = this.outlet;
        }
        this.toggleRef.open(settings);
        this._initializeContainer();
    }
    /**
     * Scrolls a hour item into view.
     * ```typescript
     * scrhintoView(picker) {
     * picker.scrollHourIntoView('2');
     * }
     *  ```
     * ```html
     * <igx-time-picker #picker format="h:mm tt" (onOpened)="scrhintoView(picker)"></igx-time-picker>
     * ```
     * @param item to be scrolled in view.
     */
    scrollHourIntoView(item) {
        if (this.showHoursList) {
            const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');
            if (hourIntoView) {
                this._hourView = hourIntoView.view;
                this.selectedHour = hourIntoView.selectedItem;
                this._updateEditableInput();
            }
        }
    }
    /**
     * Scrolls a minute item into view.
     * ```typescript
     * scrMintoView(picker) {
     * picker.scrollMinuteIntoView('3');
     * }
     *  ```
     * ```html
     * <igx-time-picker #picker format="h:mm tt" (onOpened)="scrMintoView(picker)"></igx-time-picker>
     * ```
     * @param item to be scrolled in view.
     */
    scrollMinuteIntoView(item) {
        if (this.showMinutesList) {
            const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');
            if (minuteIntoView) {
                this._minuteView = minuteIntoView.view;
                this.selectedMinute = minuteIntoView.selectedItem;
                this._updateEditableInput();
            }
        }
    }
    /**
     * Scrolls a seconds item into view.
     * ```typescript
     * scrMintoView(picker) {
     * picker.scrollSecondsIntoView('4');
     * }
     *  ```
     * ```html
     * <igx-time-picker #picker format="h:mm tt" (onOpened)="scrMintoView(picker)"></igx-time-picker>
     * ```
     * @param item to be scrolled in view.
     */
    scrollSecondsIntoView(item) {
        if (this.showSecondsList) {
            const secondsIntoView = this._scrollItemIntoView(item, this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');
            if (secondsIntoView) {
                this._secondsView = secondsIntoView.view;
                this.selectedSeconds = secondsIntoView.selectedItem;
                this._updateEditableInput();
            }
        }
    }
    /**
     * Scrolls an ampm item into view.
     * ```typescript
     * scrAmPmIntoView(picker) {
     * picker.scrollAmPmIntoView('PM');
     * }
     *  ```
     * ```html
     * <igx-time-picker #picker format="h:mm tt" (onOpened)="scrAmPmIntoView(picker)"></igx-time-picker>
     * ```
     * @param item to be scrolled in view.
     */
    scrollAmPmIntoView(item) {
        if (this.showAmPmList) {
            const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);
            if (ampmIntoView) {
                this._ampmView = ampmIntoView.view;
                this.selectedAmPm = ampmIntoView.selectedItem;
                this._updateEditableInput();
            }
        }
    }
    /**
     * @hidden
     */
    nextHour() {
        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');
        this._hourView = nextHour.view;
        this.selectedHour = nextHour.selectedItem;
        this._updateEditableInput();
    }
    /**
     * @hidden
     */
    prevHour() {
        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');
        this._hourView = prevHour.view;
        this.selectedHour = prevHour.selectedItem;
        this._updateEditableInput();
    }
    /**
     * @hidden
     */
    nextMinute() {
        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');
        this._minuteView = nextMinute.view;
        this.selectedMinute = nextMinute.selectedItem;
        this._updateEditableInput();
    }
    /**
     * @hidden
     */
    prevMinute() {
        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');
        this._minuteView = prevMinute.view;
        this.selectedMinute = prevMinute.selectedItem;
        this._updateEditableInput();
    }
    /**
     * @hidden
     */
    nextSeconds() {
        const nextSeconds = this._nextItem(this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');
        this._secondsView = nextSeconds.view;
        this.selectedSeconds = nextSeconds.selectedItem;
        this._updateEditableInput();
    }
    /**
     * @hidden
     */
    prevSeconds() {
        const prevSeconds = this._prevItem(this._secondsItems, this.selectedSeconds, this._isSecondsListLoop, 'seconds');
        this._secondsView = prevSeconds.view;
        this.selectedSeconds = prevSeconds.selectedItem;
        this._updateEditableInput();
    }
    /**
     * @hidden
     */
    nextAmPm() {
        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);
        if (selectedIndex + 1 < this._ampmItems.length - 3) {
            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);
            this.selectedAmPm = this._ampmItems[selectedIndex + 1];
            this._updateEditableInput();
        }
    }
    /**
     * @hidden
     */
    prevAmPm() {
        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);
        if (selectedIndex > 3) {
            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);
            this.selectedAmPm = this._ampmItems[selectedIndex - 1];
            this._updateEditableInput();
        }
    }
    /**
     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.
     * ```html
     * <igx-dialog class="igx-time-picker__dialog-popup" [rightButtonLabel]="okButtonLabel" (onRightButtonSelect)="okButtonClick()">
     * //..
     * </igx-dialog>
     * ```
     */
    okButtonClick() {
        const time = this._getSelectedTime();
        if (this._isValueValid(time)) {
            this.close();
            this.value = time;
            return true;
        }
        else {
            const args = {
                timePicker: this,
                currentValue: time,
                setThroughUI: true
            };
            this.onValidationFailed.emit(args);
            return false;
        }
    }
    /**
     * Closes the dialog without selecting the current value.
     * ```html
     * <igx-dialog class="igx-time-picker__dialog-popup" [leftButtonLabel]="cancelButtonLabel" (onLeftButtonSelect)="cancelButtonClick()">
     * //...
     * </igx-dialog>
     * ```
     */
    cancelButtonClick() {
        if (this.mode === InteractionMode.DropDown) {
            this.displayValue = this.value ? this._formatTime(this.value, this.format) : this.parseMask(false);
        }
        this.close();
        this.selectedHour = this._prevSelectedHour;
        this.selectedMinute = this._prevSelectedMinute;
        this.selectedSeconds = this._prevSelectedSeconds;
        this.selectedAmPm = this._prevSelectedAmPm;
    }
    /**
     * Returns an array of the hours currently in view.
     * ```html
     *  @ViewChild("MyChild")
     * private picker: IgxTimePickerComponent;
     * ngAfterViewInit(){
     *     let hInView = this.picker.hoursInView;
     * }
     * ```
     */
    hoursInView() {
        return this._hourView.filter((hour) => hour !== '');
    }
    /**
     * Returns an array of the minutes currently in view.
     * ```html
     *  @ViewChild("MyChild")
     * private picker: IgxTimePickerComponent;
     * ngAfterViewInit(){
     *     let minInView = this.picker.minutesInView;
     * }
     * ```
     */
    minutesInView() {
        return this._minuteView.filter((minute) => minute !== '');
    }
    /**
     * Returns an array of the seconds currently in view.
     * ```html
     *  @ViewChild("MyChild")
     * private picker: IgxTimePickerComponent;
     * ngAfterViewInit(){
     *     let minInView = this.picker.secondsInView;
     * }
     * ```
     */
    secondsInView() {
        return this._secondsView.filter((seconds) => seconds !== '');
    }
    /**
     * Returns an array of the AM/PM currently in view.
     * ```html
     *  @ViewChild("MyChild")
     * private picker: IgxTimePickerComponent;
     * ngAfterViewInit(){
     *     let ApInView = this.picker.ampmInView;
     * }
     * ```
     */
    ampmInView() {
        return this._ampmView.filter((ampm) => ampm !== '');
    }
    /**
     * Closes the dropdown/dialog.
     * ```html
     * <igx-time-picker #timePicker></igx-time-picker>
     * ```
     * ```typescript
     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;
     * picker.close();
     * ```
     */
    close() {
        this.toggleRef.close();
    }
    /**
     * @hidden
     */
    parseMask(preserveAmPm = true) {
        const maskWithAmPm = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace('LL', 'AM');
        const pureMask = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace(new RegExp('L', 'g'), this.promptChar);
        return preserveAmPm ? maskWithAmPm : pureMask;
    }
    /**
     * @hidden
     */
    clear() {
        var _a, _b;
        if (this.toggleRef.collapsed) {
            this.cleared = true;
            this.isNotEmpty = false;
            const oldVal = new Date(this.value);
            this.displayValue = this.parseMask(false);
            requestAnimationFrame(() => {
                this._setCursorPosition(0);
            });
            // TODO: refactoring - this.value should be null #6585
            (_a = this.value) === null || _a === void 0 ? void 0 : _a.setHours(0, 0, 0);
            if (oldVal.getTime() !== ((_b = this.value) === null || _b === void 0 ? void 0 : _b.getTime()) || this.isReset()) {
                const args = {
                    oldValue: oldVal,
                    newValue: this.value
                };
                this.onValueChanged.emit(args);
            }
        }
        else {
            this.close();
        }
    }
    /**
     * @hidden
     */
    onInput(event) {
        var _a, _b;
        const inputMask = event.target.value;
        const oldVal = new Date(this.value);
        this.isNotEmpty = inputMask !== this.parseMask(false);
        // handle cases where all empty positions (promts) are filled and we want to update
        // timepicker own value property if it is a valid Date
        if (inputMask.indexOf(this.promptChar) === -1) {
            if (this._isEntryValid(inputMask)) {
                const newVal = this.convertMinMaxValue(inputMask);
                if (oldVal.getTime() !== newVal.getTime()) {
                    this.value = newVal;
                }
            }
            else {
                const args = {
                    timePicker: this,
                    currentValue: new Date(inputMask),
                    setThroughUI: false
                };
                this.onValidationFailed.emit(args);
            }
            // handle cases where the user deletes the display value (when pressing backspace or delete)
        }
        else if (!this.value || inputMask.length === 0 || !this.isNotEmpty) {
            this.isNotEmpty = false;
            // TODO: refactoring - this.value should be null #6585
            (_a = this.value) === null || _a === void 0 ? void 0 : _a.setHours(0, 0, 0);
            this.displayValue = inputMask;
            if (oldVal.getTime() !== ((_b = this.value) === null || _b === void 0 ? void 0 : _b.getTime()) || this.isReset()) {
                // TODO: Do not emit event when the editor is empty #6482
                const args = {
                    oldValue: oldVal,
                    newValue: this.value
                };
                this.onValueChanged.emit(args);
            }
        }
    }
    /**
     * @hidden
     */
    onFocus(event) {
        this.isNotEmpty = event.target.value !== this.parseMask(false);
    }
    /**
     * @hidden
     */
    onBlur(event) {
        if (this.mode === InteractionMode.DropDown) {
            const value = event.target.value;
            this.isNotEmpty = value !== '';
            this.displayValue = value;
            if (value && (value !== this.parseMask() || value !== this.parseMask(false))) {
                if (this._isEntryValid(value)) {
                    const newVal = this.convertMinMaxValue(value);
                    if (!this.value || this.value.getTime() !== newVal.getTime()) {
                        this.value = newVal;
                    }
                }
                else {
                    const args = {
                        timePicker: this,
                        currentValue: value,
                        setThroughUI: false
                    };
                    this.onValidationFailed.emit(args);
                }
            }
        }
        if (this.toggleRef.collapsed) {
            this._updateValidityOnBlur();
        }
    }
    mouseDown(event) {
        // if the click is not on the input but in input group
        // e.g. on prefix or suffix, prevent default and this way prevent blur
        if (event.target !== this.getEditElement()) {
            event.preventDefault();
        }
    }
    /**
     * @hidden
     */
    spinOnEdit(event) {
        event.preventDefault();
        let sign;
        let displayVal;
        const currentVal = new Date(this.value);
        const min = this.minValue ? this.convertMinMaxValue(this.minValue) : this.convertMinMaxValue('00:00');
        const max = this.maxValue ? this.convertMinMaxValue(this.maxValue) : this.convertMinMaxValue('24:00');
        const cursor = this._getCursorPosition();
        if (event.key) {
            const key = event.key;
            sign = key === "ArrowDown" /* DOWN_ARROW */ || key === "Down" /* DOWN_ARROW_IE */ ? -1 : 1;
        }
        if (event.deltaY) {
            sign = event.deltaY < 0 ? 1 : -1;
        }
        if (!this.displayValue) {
            this.value = min;
            displayVal = this._formatTime(this.value, this.format);
        }
        else {
            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());
            const mDelta = this.itemsDelta.minutes;
            const sDelta = this.itemsDelta.seconds;
            if (this.cursorOnHours(cursor, this.showHoursList)) {
                this.value = this._spinHours(currentVal, min, max, hDelta, sign);
            }
            if (this.cursorOnMinutes(cursor, this.showHoursList, this.showMinutesList)) {
                this.value = this._spinMinutes(currentVal, mDelta, sign);
            }
            if (this.cursorOnSeconds(cursor, this.showHoursList, this.showMinutesList, this.showSecondsList)) {
                this.value = this._spinSeconds(currentVal, sDelta, sign);
            }
            if (this.cursorOnAmPm(cursor, this.showHoursList, this.showMinutesList, this.showSecondsList, this.showAmPmList)) {
                const sections = this.displayValue.split(/[\s:]+/);
                sign = sections[sections.length - 1] === 'AM' ? 1 : -1;
                currentVal.setHours(currentVal.getHours() + (sign * 12));
                this.value = currentVal;
            }
            displayVal = this._formatTime(this.value, this.format);
        }
        // minor hack for preventing cursor jumping in IE
        this._displayValue = this.inputFormat.transform(displayVal);
        this._inputElementRef.nativeElement.value = this._displayValue;
        this._setCursorPosition(cursor);
        requestAnimationFrame(() => {
            this._setCursorPosition(cursor);
        });
    }
    cursorOnHours(cursor, showHours) {
        return showHours && this._hoursPos.has(cursor);
    }
    cursorOnMinutes(cursor, showHours, showMinutes) {
        return showMinutes &&
            (showHours && this._minutesPos.has(cursor)) ||
            (!showHours && this._minutesPos.has(cursor));
    }
    cursorOnSeconds(cursor, showHours, showMinutes, showSeconds) {
        return showSeconds &&
            (showHours && showMinutes && this._secondsPos.has(cursor)) ||
            ((!showHours || !showMinutes) && this._secondsPos.has(cursor)) ||
            (!showHours && !showMinutes && this._secondsPos.has(cursor));
    }
    cursorOnAmPm(cursor, showHours, showMinutes, showSeconds, showAmPm) {
        return showAmPm &&
            (showHours && showMinutes && showSeconds && this._amPmPos.has(cursor)) ||
            ((!showHours || !showMinutes || !showSeconds) && this._amPmPos.has(cursor)) ||
            (!showHours && (!showMinutes || !showSeconds) && this._amPmPos.has(cursor));
    }
    _updateValidityOnBlur() {
        this._onTouchedCallback();
        const input = this._inputDirective || this._inputDirectiveUserTemplate;
        if (this._ngControl && !this._ngControl.valid) {
            input.valid = IgxInputState.INVALID;
        }
        else {
            input.valid = IgxInputState.INITIAL;
        }
    }
    // Workaround method for #8135
    // TODO: It must be removed in #6482
    isReset() {
        var _a, _b, _c;
        return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.getHours()) === 0
            && ((_b = this.value) === null || _b === void 0 ? void 0 : _b.getMinutes()) === 0
            && ((_c = this.value) === null || _c === void 0 ? void 0 : _c.getSeconds()) === 0;
    }
}
IgxTimePickerComponent.ɵfac = function IgxTimePickerComponent_Factory(t) { return new (t || IgxTimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxTimePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxTimePickerComponent, selectors: [["igx-time-picker"]], contentQueries: function IgxTimePickerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxTimePickerTemplateDirective, true, IgxTimePickerTemplateDirective);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxTimePickerActionsDirective, true, IgxTimePickerActionsDirective);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxLabelDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxInputDirective, true, IgxInputDirective);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.timePickerTemplateDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.timePickerActionsDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.labelDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputDirectiveUserTemplate = _t.first);
    } }, viewQuery: function IgxTimePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
        ɵngcc0.ɵɵviewQuery(_c3, true);
        ɵngcc0.ɵɵstaticViewQuery(_c4, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c5, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(IgxToggleDirective, true);
        ɵngcc0.ɵɵviewQuery(IgxInputDirective, true, ElementRef);
        ɵngcc0.ɵɵviewQuery(IgxInputDirective, true, IgxInputDirective);
        ɵngcc0.ɵɵviewQuery(IgxInputGroupComponent, true, IgxInputGroupComponent);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.hourList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.minuteList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.secondsList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ampmList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultTimePickerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdownInputTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toggleRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElementRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputGroup = _t.first);
    } }, hostVars: 1, hostBindings: function IgxTimePickerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.spacebar", function IgxTimePickerComponent_keydown_spacebar_HostBindingHandler($event) { return ctx.onKeydownSpace($event); })("keydown.space", function IgxTimePickerComponent_keydown_space_HostBindingHandler($event) { return ctx.onKeydownSpace($event); })("keydown.Alt.ArrowDown", function IgxTimePickerComponent_keydown_Alt_ArrowDown_HostBindingHandler() { return ctx.onAltArrowDown(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
    } }, inputs: { id: "id", disabled: "disabled", isSpinLoop: "isSpinLoop", vertical: "vertical", promptChar: "promptChar", mode: "mode", value: "value", resourceStrings: "resourceStrings", okButtonLabel: "okButtonLabel", cancelButtonLabel: "cancelButtonLabel", itemsDelta: "itemsDelta", format: "format", overlaySettings: "overlaySettings", minValue: "minValue", maxValue: "maxValue", outlet: "outlet" }, outputs: { onValueChanged: "onValueChanged", onValidationFailed: "onValidationFailed", onOpened: "onOpened", onClosed: "onClosed", onClosing: "onClosing" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxTimePickerComponent,
                multi: true
            },
            {
                provide: HAMMER_GESTURE_CONFIG,
                useClass: TimePickerHammerConfig
            },
            {
                provide: IGX_TIME_PICKER_COMPONENT,
                useExisting: IgxTimePickerComponent
            }
        ])], ngContentSelectors: _c9, decls: 18, vars: 12, consts: [["labelTemplate", ""], ["dropdownInputTemplate", ""], ["defaultTimePickerTemplate", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultTimePickerActions", ""], ["igxToggle", "", 1, "igx-time-picker", 3, "ngClass"], ["class", "igx-time-picker__header", 4, "ngIf"], [1, "igx-time-picker__main"], [1, "igx-time-picker__body"], [3, "igxItemList", 4, "ngIf"], [4, "ngTemplateOutlet"], [3, "suppressInputAutofocus", "mousedown"], ["group", ""], ["igxLabel", "", 4, "ngIf"], ["ngProjectAs", "[igxLabel]", 5, ["", "igxLabel", ""], 4, "ngTemplateOutlet"], [3, "click"], ["type", "text", "igxInput", "", 3, "igxMask", "includeLiterals", "placeholder", "displayValuePipe", "focusedValuePipe", "promptChar", "value", "igxTextSelection", "disabled", "input", "blur", "focus", "wheel"], ["igxRipple", "", 3, "click", 4, "ngIf"], ["igxLabel", ""], ["ngProjectAs", "[igxLabel]", 5, ["", "igxLabel", ""]], ["igxRipple", "", 3, "click"], ["fontSet", "material"], [3, "click", "mousedown"], ["igxInput", "", "tabindex", "0", "readonly", "", 3, "value", "disabled", "blur"], ["class", "igx-time-picker__buttons", 4, "ngIf"], [1, "igx-time-picker__buttons"], ["igxButton", "flat", 3, "click", 4, "ngIf"], ["igxButton", "flat", 3, "click"], [1, "igx-time-picker__header"], [1, "igx-time-picker__header-ampm"], [1, "igx-time-picker__header-hour"], [3, "igxItemList"], ["hourList", ""], [3, "igxHourItem", "ngClass", 4, "ngFor", "ngForOf"], [3, "igxHourItem", "ngClass"], ["minuteList", ""], [3, "igxMinuteItem", "ngClass", 4, "ngFor", "ngForOf"], [3, "igxMinuteItem", "ngClass"], ["secondsList", ""], [3, "igxSecondsItem", "ngClass", 4, "ngFor", "ngForOf"], [3, "igxSecondsItem", "ngClass"], ["ampmList", ""], [3, "igxAmPmItem", "ngClass", 4, "ngFor", "ngForOf"], [3, "igxAmPmItem", "ngClass"]], template: function IgxTimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c7);
        ɵngcc0.ɵɵtemplate(0, IgxTimePickerComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, IgxTimePickerComponent_ng_template_2_Template, 9, 13, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, IgxTimePickerComponent_ng_template_4_Template, 7, 4, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, IgxTimePickerComponent_ng_container_6_Template, 1, 0, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(7, IgxTimePickerComponent_ng_template_7_Template, 1, 1, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(9, "div", 5);
        ɵngcc0.ɵɵtemplate(10, IgxTimePickerComponent_div_10_Template, 12, 4, "div", 6);
        ɵngcc0.ɵɵelementStart(11, "div", 7);
        ɵngcc0.ɵɵelementStart(12, "div", 8);
        ɵngcc0.ɵɵtemplate(13, IgxTimePickerComponent_div_13_Template, 3, 2, "div", 9);
        ɵngcc0.ɵɵtemplate(14, IgxTimePickerComponent_div_14_Template, 3, 2, "div", 9);
        ɵngcc0.ɵɵtemplate(15, IgxTimePickerComponent_div_15_Template, 3, 2, "div", 9);
        ɵngcc0.ɵɵtemplate(16, IgxTimePickerComponent_div_16_Template, 3, 2, "div", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, IgxTimePickerComponent_ng_container_17_Template, 1, 0, "ng-container", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r7 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ctx.context);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(9, _c8, ctx.mode === "dropdown", ctx.vertical && ctx.mode === "dialog"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "dialog");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showHoursList);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showMinutesList);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSecondsList);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showAmPmList);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.timePickerActionsDirective ? ctx.timePickerActionsDirective.template : _r7);
    } }, directives: function () { return [ɵngcc1.NgTemplateOutlet, ɵngcc2.IgxToggleDirective, ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc3.IgxInputGroupComponent, ɵngcc4.IgxPrefixDirective, ɵngcc5.IgxIconComponent, ɵngcc6.IgxInputDirective, ɵngcc7.IgxMaskDirective, ɵngcc8.IgxTextSelectionDirective, ɵngcc9.IgxLabelDirective, ɵngcc10.IgxSuffixDirective, ɵngcc11.IgxButtonDirective, IgxItemListDirective, ɵngcc1.NgForOf, IgxHourItemDirective,
        IgxMinuteItemDirective,
        IgxSecondsItemDirective,
        IgxAmPmItemDirective]; }, styles: ["[_nghost-%COMP%] {\n            display: block;\n        }"] });
IgxTimePickerComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
IgxTimePickerComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    resourceStrings: [{ type: Input }],
    okButtonLabel: [{ type: Input }],
    cancelButtonLabel: [{ type: Input }],
    itemsDelta: [{ type: Input }],
    minValue: [{ type: Input }],
    maxValue: [{ type: Input }],
    isSpinLoop: [{ type: Input }],
    vertical: [{ type: Input }],
    format: [{ type: Input }],
    promptChar: [{ type: Input }],
    mode: [{ type: Input }],
    outlet: [{ type: Input }],
    overlaySettings: [{ type: Input }],
    onValueChanged: [{ type: Output }],
    onValidationFailed: [{ type: Output }],
    onOpened: [{ type: Output }],
    onClosed: [{ type: Output }],
    onClosing: [{ type: Output }],
    hourList: [{ type: ViewChild, args: ['hourList',] }],
    minuteList: [{ type: ViewChild, args: ['minuteList',] }],
    secondsList: [{ type: ViewChild, args: ['secondsList',] }],
    ampmList: [{ type: ViewChild, args: ['ampmList',] }],
    defaultTimePickerTemplate: [{ type: ViewChild, args: ['defaultTimePickerTemplate', { read: TemplateRef, static: true },] }],
    dropdownInputTemplate: [{ type: ViewChild, args: ['dropdownInputTemplate', { read: TemplateRef, static: true },] }],
    timePickerTemplateDirective: [{ type: ContentChild, args: [IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective },] }],
    timePickerActionsDirective: [{ type: ContentChild, args: [IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective },] }],
    labelDirective: [{ type: ContentChild, args: [IgxLabelDirective,] }],
    toggleRef: [{ type: ViewChild, args: [IgxToggleDirective, { static: true },] }],
    _inputElementRef: [{ type: ViewChild, args: [IgxInputDirective, { read: ElementRef },] }],
    _inputDirective: [{ type: ViewChild, args: [IgxInputDirective, { read: IgxInputDirective },] }],
    _inputDirectiveUserTemplate: [{ type: ContentChild, args: [IgxInputDirective, { read: IgxInputDirective },] }],
    _inputGroup: [{ type: ViewChild, args: [IgxInputGroupComponent, { read: IgxInputGroupComponent },] }],
    onKeydownSpace: [{ type: HostListener, args: ['keydown.spacebar', ['$event'],] }, { type: HostListener, args: ['keydown.space', ['$event'],] }],
    onAltArrowDown: [{ type: HostListener, args: ['keydown.Alt.ArrowDown',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTimePickerComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IgxTimePickerComponent,
                        multi: true
                    },
                    {
                        provide: HAMMER_GESTURE_CONFIG,
                        useClass: TimePickerHammerConfig
                    },
                    {
                        provide: IGX_TIME_PICKER_COMPONENT,
                        useExisting: IgxTimePickerComponent
                    }
                ],
                selector: 'igx-time-picker',
                template: "<ng-template #labelTemplate>\n    <ng-content select=\"[igxLabel]\"></ng-content>\n</ng-template>\n\n<ng-template #dropdownInputTemplate>\n    <igx-input-group #group (mousedown)=\"mouseDown($event)\" [suppressInputAutofocus]=\"true\">\n        <label igxLabel *ngIf=\"!labelDirective\">Time</label>\n        <ng-container ngProjectAs=\"[igxLabel]\" *ngTemplateOutlet=\"labelTemplate\"></ng-container>\n        <igx-prefix (click)=\"openDialog(group.element.nativeElement)\">\n            <igx-icon>access_time</igx-icon>\n        </igx-prefix>\n        <input\n            type=\"text\"\n            [igxMask]=\"mask\"\n            igxInput\n            [includeLiterals]=\"true\"\n            [placeholder]=\"format\"\n            [displayValuePipe]=\"displayFormat\"\n            [focusedValuePipe]=\"inputFormat\"\n            [promptChar]=\"promptChar\"\n            [value]=\"displayValue\"\n            [igxTextSelection]=\"true\"\n            (input)=\"onInput($event)\"\n            (blur)=\"onBlur($event)\"\n            (focus)=\"onFocus($event)\"\n            (wheel)=\"spinOnEdit($event)\"\n            [disabled]=\"disabled\" />\n        <igx-suffix *ngIf=\"showClearButton\" igxRipple (click)=\"clear()\">\n            <igx-icon fontSet=\"material\">clear</igx-icon>\n        </igx-suffix>\n    </igx-input-group>\n</ng-template>\n<ng-template #defaultTimePickerTemplate>\n    <igx-input-group (click)=\"openDialog()\" (mousedown)=\"mouseDown($event)\">\n        <igx-prefix>\n            <igx-icon>access_time</igx-icon>\n        </igx-prefix>\n        <label igxLabel *ngIf=\"!labelDirective\">Time</label>\n        <ng-container ngProjectAs=\"[igxLabel]\" *ngTemplateOutlet=\"labelTemplate\"></ng-container>\n        <input\n            igxInput\n            [value]=\"displayTime || ''\"\n            [disabled]=\"disabled\"\n            tabindex=\"0\" readonly\n            (blur)=\"onBlur($event)\" />\n    </igx-input-group>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n\n<ng-template #defaultTimePickerActions>\n    <div *ngIf=\"cancelButtonLabel || okButtonLabel\" class=\"igx-time-picker__buttons\">\n        <button *ngIf=\"cancelButtonLabel\" igxButton=\"flat\" (click)=\"cancelButtonClick()\">\n            {{cancelButtonLabel}}\n        </button>\n        <button *ngIf=\"okButtonLabel\" igxButton=\"flat\" (click)=\"okButtonClick()\">\n            {{okButtonLabel}}\n        </button>\n    </div>\n</ng-template>\n<div igxToggle class=\"igx-time-picker\"\n    [ngClass]=\"{'igx-time-picker--dropdown': mode === 'dropdown', 'igx-time-picker--vertical': vertical && mode === 'dialog'}\">\n    <div *ngIf=\"mode === 'dialog'\" class=\"igx-time-picker__header\">\n        <h5 class=\"igx-time-picker__header-ampm\">{{ selectedAmPm }}</h5>\n        <h2 class=\"igx-time-picker__header-hour\">\n            <span>{{ selectedHour }}</span>:<span>{{ selectedMinute }}</span>:<span>{{ selectedSeconds }}</span>\n        </h2>\n    </div>\n    <div class=\"igx-time-picker__main\">\n        <div class=\"igx-time-picker__body\">\n            <div *ngIf=\"showHoursList\" #hourList [igxItemList]=\"'hourList'\">\n                <span [igxHourItem]=\"hour\"\n                [ngClass]=\"{'igx-time-picker__item--disabled': applyDisabledStyleForItem(timeParts.Hour, hour)}\"\n                *ngFor=\"let hour of hourView\">{{ hour }}</span>\n            </div>\n            <div *ngIf=\"showMinutesList\" #minuteList [igxItemList]=\"'minuteList'\">\n                <span [igxMinuteItem]=\"minute\"\n                [ngClass]=\"{'igx-time-picker__item--disabled': applyDisabledStyleForItem(timeParts.Minute, minute)}\"\n                *ngFor=\"let minute of minuteView\" >{{ minute }}</span>\n            </div>\n            <div *ngIf=\"showSecondsList\" #secondsList [igxItemList]=\"'secondsList'\">\n                <span [igxSecondsItem]=\"seconds\"\n                [ngClass]=\"{'igx-time-picker__item--disabled': applyDisabledStyleForItem(timeParts.Seconds, seconds)}\"\n                *ngFor=\"let seconds of secondsView\">{{ seconds }}</span>\n            </div>\n            <div *ngIf=\"showAmPmList\" #ampmList [igxItemList]=\"'ampmList'\">\n                <span [igxAmPmItem]=\"ampm\"\n                [ngClass]=\"{'igx-time-picker__item--disabled': applyDisabledStyleForItem(timeParts.amPM, ampm)}\"\n                *ngFor=\"let ampm of ampmView\">{{ ampm }}</span>\n            </div>\n        </div>\n        <ng-container\n            *ngTemplateOutlet=\"timePickerActionsDirective ? timePickerActionsDirective.template : defaultTimePickerActions\">\n        </ng-container>\n    </div>\n</div>\n",
                styles: [`:host {
            display: block;
        }`]
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.ChangeDetectorRef }]; }, { id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], disabled: [{
            type: Input
        }], isSpinLoop: [{
            type: Input
        }], vertical: [{
            type: Input
        }], promptChar: [{
            type: Input
        }], mode: [{
            type: Input
        }], onValueChanged: [{
            type: Output
        }], onValidationFailed: [{
            type: Output
        }], onOpened: [{
            type: Output
        }], onClosed: [{
            type: Output
        }], onClosing: [{
            type: Output
        }], value: [{
            type: Input
        }], resourceStrings: [{
            type: Input
        }], okButtonLabel: [{
            type: Input
        }], cancelButtonLabel: [{
            type: Input
        }], itemsDelta: [{
            type: Input
        }], format: [{
            type: Input
        }], overlaySettings: [{
            type: Input
        }], 
    /**
     * @hidden
     */
    onKeydownSpace: [{
            type: HostListener,
            args: ['keydown.spacebar', ['$event']]
        }, {
            type: HostListener,
            args: ['keydown.space', ['$event']]
        }], 
    /**
     * @hidden
     */
    onAltArrowDown: [{
            type: HostListener,
            args: ['keydown.Alt.ArrowDown']
        }], minValue: [{
            type: Input
        }], maxValue: [{
            type: Input
        }], outlet: [{
            type: Input
        }], hourList: [{
            type: ViewChild,
            args: ['hourList']
        }], minuteList: [{
            type: ViewChild,
            args: ['minuteList']
        }], secondsList: [{
            type: ViewChild,
            args: ['secondsList']
        }], ampmList: [{
            type: ViewChild,
            args: ['ampmList']
        }], defaultTimePickerTemplate: [{
            type: ViewChild,
            args: ['defaultTimePickerTemplate', { read: TemplateRef, static: true }]
        }], dropdownInputTemplate: [{
            type: ViewChild,
            args: ['dropdownInputTemplate', { read: TemplateRef, static: true }]
        }], timePickerTemplateDirective: [{
            type: ContentChild,
            args: [IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective }]
        }], timePickerActionsDirective: [{
            type: ContentChild,
            args: [IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective }]
        }], labelDirective: [{
            type: ContentChild,
            args: [IgxLabelDirective]
        }], toggleRef: [{
            type: ViewChild,
            args: [IgxToggleDirective, { static: true }]
        }], _inputElementRef: [{
            type: ViewChild,
            args: [IgxInputDirective, { read: ElementRef }]
        }], _inputDirective: [{
            type: ViewChild,
            args: [IgxInputDirective, { read: IgxInputDirective }]
        }], _inputDirectiveUserTemplate: [{
            type: ContentChild,
            args: [IgxInputDirective, { read: IgxInputDirective }]
        }], _inputGroup: [{
            type: ViewChild,
            args: [IgxInputGroupComponent, { read: IgxInputGroupComponent }]
        }] }); })();
/**
 * @hidden
 */
export class IgxTimePickerModule {
}
IgxTimePickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IgxTimePickerModule });
IgxTimePickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IgxTimePickerModule_Factory(t) { return new (t || IgxTimePickerModule)(); }, providers: [], imports: [[
            CommonModule,
            IgxInputGroupModule,
            IgxIconModule,
            IgxButtonModule,
            IgxMaskModule,
            IgxToggleModule,
            IgxTextSelectionModule
        ], IgxInputGroupModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IgxTimePickerModule, { declarations: function () { return [IgxTimePickerComponent, IgxHourItemDirective,
        IgxMinuteItemDirective,
        IgxSecondsItemDirective,
        IgxItemListDirective,
        IgxAmPmItemDirective,
        IgxTimePickerTemplateDirective,
        IgxTimePickerActionsDirective,
        TimeDisplayFormatPipe,
        TimeInputFormatPipe]; }, imports: function () { return [CommonModule,
        IgxInputGroupModule,
        IgxIconModule,
        IgxButtonModule,
        IgxMaskModule,
        IgxToggleModule,
        IgxTextSelectionModule]; }, exports: function () { return [IgxTimePickerComponent, IgxTimePickerTemplateDirective,
        IgxTimePickerActionsDirective,
        TimeDisplayFormatPipe,
        TimeInputFormatPipe,
        IgxInputGroupModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTimePickerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    IgxTimePickerComponent,
                    IgxHourItemDirective,
                    IgxMinuteItemDirective,
                    IgxSecondsItemDirective,
                    IgxItemListDirective,
                    IgxAmPmItemDirective,
                    IgxTimePickerTemplateDirective,
                    IgxTimePickerActionsDirective,
                    TimeDisplayFormatPipe,
                    TimeInputFormatPipe
                ],
                exports: [
                    IgxTimePickerComponent,
                    IgxTimePickerTemplateDirective,
                    IgxTimePickerActionsDirective,
                    TimeDisplayFormatPipe,
                    TimeInputFormatPipe,
                    IgxInputGroupModule
                ],
                imports: [
                    CommonModule,
                    IgxInputGroupModule,
                    IgxIconModule,
                    IgxButtonModule,
                    IgxMaskModule,
                    IgxToggleModule,
                    IgxTextSelectionModule
                ],
                providers: []
            }]
    }], null, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,