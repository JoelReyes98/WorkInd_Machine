import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ViewChildren, ElementRef } from '@angular/core';
import { Calendar } from '../calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxCalendarMonthDirective } from '../calendar.directives';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../calendar.directives';

function IgxMonthsViewComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵlistener("onMonthSelection", function IgxMonthsViewComponent_div_2_Template_div_onMonthSelection_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.selectMonth($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "titlecase");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const month_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxCalendarMonth", month_r1)("date", ctx_r0.date)("index", i_r2);
    ɵngcc0.ɵɵattribute("tabindex", ctx_r0.activeMonth === month_r1.getMonth() ? 0 : -1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 5, ctx_r0.formattedMonth(month_r1)), " ");
} }
let NEXT_ID = 0;
export class IgxMonthsViewComponent {
    constructor(el) {
        this.el = el;
        /**
         * Sets/gets the `id` of the months view.
         * If not set, the `id` will have value `"igx-months-view-0"`.
         * ```html
         * <igx-months-view id="my-months-view"></igx-months-view>
         * ```
         * ```typescript
         * let monthsViewId =  this.monthsView.id;
         * ```
         * @memberof IgxMonthsViewComponent
         */
        this.id = `igx-months-view-${NEXT_ID++}`;
        /**
         * Gets/sets whether the view should be rendered
         * according to the locale and monthFormat, if any.
         */
        this.formatView = true;
        /**
         * Emits an event when a selection is made in the months view.
         * Provides reference the `date` property in the `IgxMonthsViewComponent`.
         * ```html
         * <igx-months-view (onSelection)="onSelection($event)"></igx-months-view>
         * ```
         * @memberof IgxMonthsViewComponent
         */
        this.onSelection = new EventEmitter();
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
        this._date = new Date();
        /**
         * @hidden
         */
        this._locale = 'en';
        /**
         * @hidden
         */
        this._monthFormat = 'short';
        /**
         * @hidden
         */
        this._onTouchedCallback = () => { };
        /**
         * @hidden
         */
        this._onChangeCallback = () => { };
        this.initMonthFormatter();
        this._calendarModel = new Calendar();
    }
    /**
     * Gets/sets the selected date of the months view.
     * By default it is the current date.
     * ```html
     * <igx-months-view [date]="myDate"></igx-months-view>
     * ```
     * ```typescript
     * let date =  this.monthsView.date;
     * ```
     * @memberof IgxMonthsViewComponent
     */
    set date(value) {
        if (!(value instanceof Date)) {
            return;
        }
        this._date = value;
        this.activeMonth = this.date.getMonth();
    }
    get date() {
        return this._date;
    }
    /**
     * Gets the month format option of the months view.
     * ```typescript
     * let monthFormat = this.monthsView.monthFormat.
     * ```
     */
    get monthFormat() {
        return this._monthFormat;
    }
    /**
     * Sets the month format option of the months view.
     * ```html
     * <igx-months-view> [monthFormat] = "short'"</igx-months-view>
     * ```
     * @memberof IgxMonthsViewComponent
     */
    set monthFormat(value) {
        this._monthFormat = value;
        this.initMonthFormatter();
    }
    /**
     * Gets the `locale` of the months view.
     * Default value is `"en"`.
     * ```typescript
     * let locale =  this.monthsView.locale;
     * ```
     * @memberof IgxMonthsViewComponent
     */
    get locale() {
        return this._locale;
    }
    /**
     * Sets the `locale` of the months view.
     * Expects a valid BCP 47 language tag.
     * Default value is `"en"`.
     * ```html
     * <igx-months-view [locale]="de"></igx-months-view>
     * ```
     * @memberof IgxMonthsViewComponent
     */
    set locale(value) {
        this._locale = value;
        this.initMonthFormatter();
    }
    /**
     * Returns an array of date objects which are then used to
     * properly render the month names.
     *
     * Used in the template of the component
     *
     * @hidden
     */
    get months() {
        let start = new Date(this.date.getFullYear(), 0, 1);
        const result = [];
        for (let i = 0; i < 12; i++) {
            result.push(start);
            start = this._calendarModel.timedelta(start, 'month', 1);
        }
        return result;
    }
    /**
     * Returns the locale representation of the month in the months view.
     *
     * @hidden
     */
    formattedMonth(value) {
        if (this.formatView) {
            return this._formatterMonth.format(value);
        }
        return `${value.getMonth()}`;
    }
    /**
     * @hidden
     */
    selectMonth(event) {
        this.onSelection.emit(event);
        this.date = event;
        this.activeMonth = this.date.getMonth();
        this._onChangeCallback(this.date);
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    writeValue(value) {
        if (value) {
            this.date = value;
        }
    }
    /**
     * @hidden
     */
    monthTracker(index, item) {
        return `${item.getMonth()}}`;
    }
    /**
     * @hidden
     */
    initMonthFormatter() {
        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });
    }
    /**
     * @hidden
     */
    onKeydownArrowUp(event) {
        event.preventDefault();
        event.stopPropagation();
        const node = this.monthsRef.find((date) => date.nativeElement === event.target);
        if (!node) {
            return;
        }
        const months = this.monthsRef.toArray();
        const nodeRect = node.nativeElement.getBoundingClientRect();
        for (let index = months.indexOf(node) - 1; index >= 0; index--) {
            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();
            const tolerance = 6;
            if (nodeRect.top !== nextNodeRect.top && (nextNodeRect.left - nodeRect.left) < tolerance) {
                const month = months[index];
                month.nativeElement.focus();
                this.activeMonth = month.value.getMonth();
                break;
            }
        }
    }
    /**
     * @hidden
     */
    onKeydownArrowDown(event) {
        event.preventDefault();
        event.stopPropagation();
        const node = this.monthsRef.find((date) => date.nativeElement === event.target);
        if (!node) {
            return;
        }
        const months = this.monthsRef.toArray();
        const nodeRect = node.nativeElement.getBoundingClientRect();
        for (let index = months.indexOf(node) + 1; index < months.length; index++) {
            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();
            const tolerance = 6;
            if (nextNodeRect.top !== nodeRect.top && (nodeRect.left - nextNodeRect.left) < tolerance) {
                const month = months[index];
                month.nativeElement.focus();
                this.activeMonth = month.value.getMonth();
                break;
            }
        }
    }
    /**
     * @hidden
     */
    onKeydownArrowRight(event) {
        event.preventDefault();
        event.stopPropagation();
        const node = this.monthsRef.find((date) => date.nativeElement === event.target);
        if (!node) {
            return;
        }
        const months = this.monthsRef.toArray();
        if (months.indexOf(node) + 1 < months.length) {
            const month = months[months.indexOf(node) + 1];
            this.activeMonth = month.value.getMonth();
            month.nativeElement.focus();
        }
    }
    /**
     * @hidden
     */
    onKeydownArrowLeft(event) {
        event.preventDefault();
        event.stopPropagation();
        const node = this.monthsRef.find((date) => date.nativeElement === event.target);
        if (!node) {
            return;
        }
        const months = this.monthsRef.toArray();
        if (months.indexOf(node) - 1 >= 0) {
            const month = months[months.indexOf(node) - 1];
            this.activeMonth = month.value.getMonth();
            month.nativeElement.focus();
        }
    }
    /**
     * @hidden
     */
    onKeydownHome(event) {
        event.preventDefault();
        event.stopPropagation();
        const month = this.monthsRef.toArray()[0];
        this.activeMonth = month.value.getMonth();
        month.nativeElement.focus();
    }
    /**
     * @hidden
     */
    onKeydownEnd(event) {
        event.preventDefault();
        event.stopPropagation();
        const months = this.monthsRef.toArray();
        const month = months[months.length - 1];
        this.activeMonth = month.value.getMonth();
        month.nativeElement.focus();
    }
    /**
     * @hidden
     */
    onKeydownEnter(event) {
        const value = this.monthsRef.find((date) => date.nativeElement === event.target).value;
        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());
        this.activeMonth = this.date.getMonth();
        this.onSelection.emit(this.date);
        this._onChangeCallback(this.date);
    }
    resetActiveMonth(event) {
        this.activeMonth = this.date.getMonth();
    }
}
IgxMonthsViewComponent.ɵfac = function IgxMonthsViewComponent_Factory(t) { return new (t || IgxMonthsViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxMonthsViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxMonthsViewComponent, selectors: [["igx-months-view"]], viewQuery: function IgxMonthsViewComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(IgxCalendarMonthDirective, true, IgxCalendarMonthDirective);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthsRef = _t);
    } }, hostVars: 3, hostBindings: function IgxMonthsViewComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.arrowup", function IgxMonthsViewComponent_keydown_arrowup_HostBindingHandler($event) { return ctx.onKeydownArrowUp($event); })("keydown.arrowdown", function IgxMonthsViewComponent_keydown_arrowdown_HostBindingHandler($event) { return ctx.onKeydownArrowDown($event); })("keydown.arrowright", function IgxMonthsViewComponent_keydown_arrowright_HostBindingHandler($event) { return ctx.onKeydownArrowRight($event); })("keydown.arrowleft", function IgxMonthsViewComponent_keydown_arrowleft_HostBindingHandler($event) { return ctx.onKeydownArrowLeft($event); })("keydown.home", function IgxMonthsViewComponent_keydown_home_HostBindingHandler($event) { return ctx.onKeydownHome($event); })("keydown.end", function IgxMonthsViewComponent_keydown_end_HostBindingHandler($event) { return ctx.onKeydownEnd($event); })("keydown.enter", function IgxMonthsViewComponent_keydown_enter_HostBindingHandler($event) { return ctx.onKeydownEnter($event); })("focusout", function IgxMonthsViewComponent_focusout_HostBindingHandler($event) { return ctx.resetActiveMonth($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
        ɵngcc0.ɵɵclassProp("igx-calendar", ctx.styleClass);
    } }, inputs: { id: "id", formatView: "formatView", date: "date", monthFormat: "monthFormat", locale: "locale" }, outputs: { onSelection: "onSelection" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }])], decls: 3, vars: 2, consts: [[1, "igx-calendar__body"], [1, "igx-calendar__body-row--wrap"], [3, "igxCalendarMonth", "date", "index", "onMonthSelection", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "igxCalendarMonth", "date", "index", "onMonthSelection"]], template: function IgxMonthsViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, IgxMonthsViewComponent_div_2_Template, 3, 7, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.months)("ngForTrackBy", ctx.monthTracker);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.IgxCalendarMonthDirective], pipes: [ɵngcc1.TitleCasePipe], encapsulation: 2 });
IgxMonthsViewComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxMonthsViewComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    date: [{ type: Input }],
    monthFormat: [{ type: Input }],
    locale: [{ type: Input }],
    formatView: [{ type: Input }],
    onSelection: [{ type: Output }],
    styleClass: [{ type: HostBinding, args: ['class.igx-calendar',] }],
    monthsRef: [{ type: ViewChildren, args: [IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective },] }],
    onKeydownArrowUp: [{ type: HostListener, args: ['keydown.arrowup', ['$event'],] }],
    onKeydownArrowDown: [{ type: HostListener, args: ['keydown.arrowdown', ['$event'],] }],
    onKeydownArrowRight: [{ type: HostListener, args: ['keydown.arrowright', ['$event'],] }],
    onKeydownArrowLeft: [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] }],
    onKeydownHome: [{ type: HostListener, args: ['keydown.home', ['$event'],] }],
    onKeydownEnd: [{ type: HostListener, args: ['keydown.end', ['$event'],] }],
    onKeydownEnter: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }],
    resetActiveMonth: [{ type: HostListener, args: ['focusout', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxMonthsViewComponent, [{
        type: Component,
        args: [{
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],
                selector: 'igx-months-view',
                template: "<div class=\"igx-calendar__body\">\n    <div class=\"igx-calendar__body-row--wrap\">\n        <div [igxCalendarMonth]=\"month\" [date]=\"date\" [attr.tabindex]=\"activeMonth === month.getMonth() ? 0 : -1\" (onMonthSelection)=\"selectMonth($event)\" [index]=\"i\" *ngFor=\"let month of months; index as i; trackBy: monthTracker\">\n            {{ formattedMonth(month) | titlecase }}\n        </div>\n    </div>\n</div>\n\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], formatView: [{
            type: Input
        }], onSelection: [{
            type: Output
        }], styleClass: [{
            type: HostBinding,
            args: ['class.igx-calendar']
        }], date: [{
            type: Input
        }], monthFormat: [{
            type: Input
        }], locale: [{
            type: Input
        }], 
    /**
     * @hidden
     */
    onKeydownArrowUp: [{
            type: HostListener,
            args: ['keydown.arrowup', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownArrowDown: [{
            type: HostListener,
            args: ['keydown.arrowdown', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownArrowRight: [{
            type: HostListener,
            args: ['keydown.arrowright', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownArrowLeft: [{
            type: HostListener,
            args: ['keydown.arrowleft', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownHome: [{
            type: HostListener,
            args: ['keydown.home', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownEnd: [{
            type: HostListener,
            args: ['keydown.end', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownEnter: [{
            type: HostListener,
            args: ['keydown.enter', ['$event']]
        }], resetActiveMonth: [{
            type: HostListener,
            args: ['focusout', ['$event']]
        }], monthsRef: [{
            type: ViewChildren,
            args: [IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,