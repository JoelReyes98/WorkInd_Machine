import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable, ViewChildren } from '@angular/core';
import { range, Calendar } from '../calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';
import { IgxCalendarYearDirective } from '../calendar.directives';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../calendar.directives';

function IgxYearsViewComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵlistener("onYearSelection", function IgxYearsViewComponent_span_2_Template_span_onYearSelection_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.selectYear($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const year_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxCalendarYear", year_r1)("date", ctx_r0.date);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.formattedYear(year_r1), " ");
} }
let NEXT_ID = 0;
export class CalendarHammerConfig extends HammerGestureConfig {
    constructor() {
        super(...arguments);
        this.overrides = {
            pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }
        };
    }
}
CalendarHammerConfig.ɵfac = function CalendarHammerConfig_Factory(t) { return ɵCalendarHammerConfig_BaseFactory(t || CalendarHammerConfig); };
CalendarHammerConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CalendarHammerConfig, factory: CalendarHammerConfig.ɵfac });
const ɵCalendarHammerConfig_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(CalendarHammerConfig);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CalendarHammerConfig, [{
        type: Injectable
    }], null, null); })();
export class IgxYearsViewComponent {
    constructor(el) {
        this.el = el;
        /**
         * Sets/gets the `id` of the years view.
         * If not set, the `id` will have value `"igx-years-view-0"`.
         * ```html
         * <igx-years-view id = "my-years-view"></igx-years-view>
         * ```
         * ```typescript
         * let yearsViewId =  this.yearsView.id;
         * ```
         * @memberof IgxCalendarComponent
         */
        this.id = `igx-years-view-${NEXT_ID++}`;
        /**
         * Emits an event when a selection is made in the years view.
         * Provides reference the `date` property in the `IgxYearsViewComponent`.
         * ```html
         * <igx-years-view (onSelection)="onSelection($event)"></igx-years-view>
         * ```
         * @memberof IgxYearsViewComponent
         */
        this.onSelection = new EventEmitter();
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
        /**
         * @hidden
         */
        this._locale = 'en';
        /**
         * @hidden
         */
        this._yearFormat = 'numeric';
        /**
         * @hidden
         */
        this._date = new Date();
        /**
         * @hidden
         */
        this._onTouchedCallback = () => { };
        /**
         * @hidden
         */
        this._onChangeCallback = () => { };
        this.initYearFormatter();
        this._calendarModel = new Calendar();
    }
    /**
     * Gets/sets the selected date of the years view.
     * By default it is the current date.
     * ```html
     * <igx-years-view [date]="myDate"></igx-years-view>
     * ```
     * ```typescript
     * let date =  this.yearsView.date;
     * ```
     * @memberof IgxYearsViewComponent
     */
    get date() {
        return this._date;
    }
    set date(value) {
        if (!(value instanceof Date)) {
            return;
        }
        this._date = value;
    }
    /**
     * Gets the year format option of the years view.
     * ```typescript
     * let yearFormat = this.yearsView.yearFormat.
     * ```
     */
    get yearFormat() {
        return this._yearFormat;
    }
    /**
     * Sets the year format option of the years view.
     * ```html
     * <igx-years-view [yearFormat]="numeric"></igx-years-view>
     * ```
     * @memberof IgxYearsViewComponent
     */
    set yearFormat(value) {
        this._yearFormat = value;
        this.initYearFormatter();
    }
    /**
     * Gets the `locale` of the years view.
     * Default value is `"en"`.
     * ```typescript
     * let locale =  this.yearsView.locale;
     * ```
     * @memberof IgxYearsViewComponent
     */
    get locale() {
        return this._locale;
    }
    /**
     * Sets the `locale` of the years view.
     * Expects a valid BCP 47 language tag.
     * Default value is `"en"`.
     * ```html
     * <igx-years-view [locale]="de"></igx-years-view>
     * ```
     * @memberof IgxYearsViewComponent
     */
    set locale(value) {
        this._locale = value;
        this.initYearFormatter();
    }
    /**
     * Returns an array of date objects which are then used to properly
     * render the years.
     *
     * Used in the template of the component.
     *
     * @hidden
     */
    get decade() {
        const result = [];
        const start = this.date.getFullYear() - 3;
        const end = this.date.getFullYear() + 4;
        for (const year of range(start, end)) {
            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));
        }
        return result;
    }
    /**
     * Returns the locale representation of the year in the years view.
     *
     * @hidden
     */
    formattedYear(value) {
        if (this.formatView) {
            return this._formatterYear.format(value);
        }
        return `${value.getFullYear()}`;
    }
    /**
     * @hidden
     */
    selectYear(event) {
        this.date = event;
        this.onSelection.emit(this.date);
        this._onChangeCallback(this.date);
    }
    /**
     * @hidden
     */
    scroll(event) {
        event.preventDefault();
        event.stopPropagation();
        const delta = event.deltaY < 0 ? -1 : 1;
        this.generateYearRange(delta);
    }
    /**
     * @hidden
     */
    pan(event) {
        const delta = event.deltaY < 0 ? 1 : -1;
        this.generateYearRange(delta);
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    yearTracker(index, item) {
        return `${item.getFullYear()}}`;
    }
    /**
     * @hidden
     */
    writeValue(value) {
        if (value) {
            this.date = value;
        }
    }
    /**
     * @hidden
     */
    onKeydownArrowDown(event) {
        event.preventDefault();
        event.stopPropagation();
        this.generateYearRange(1);
        this.calendarDir.find(date => date.isCurrentYear).nativeElement.nextElementSibling.focus();
    }
    /**
     * @hidden
     */
    onKeydownArrowUp(event) {
        event.preventDefault();
        event.stopPropagation();
        this.generateYearRange(-1);
        this.calendarDir.find(date => date.isCurrentYear).nativeElement.previousElementSibling.focus();
    }
    /**
     * @hidden
     */
    onKeydownEnter() {
        this.onSelection.emit(this.date);
        this._onChangeCallback(this.date);
    }
    /**
     * @hidden
     */
    initYearFormatter() {
        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });
    }
    /**
     * @hidden
     */
    generateYearRange(delta) {
        const currentYear = new Date().getFullYear();
        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||
            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {
            return;
        }
        this.date = this._calendarModel.timedelta(this.date, 'year', delta);
    }
}
IgxYearsViewComponent.ɵfac = function IgxYearsViewComponent_Factory(t) { return new (t || IgxYearsViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IgxYearsViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxYearsViewComponent, selectors: [["igx-years-view"]], viewQuery: function IgxYearsViewComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(IgxCalendarYearDirective, true, IgxCalendarYearDirective);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.calendarDir = _t);
    } }, hostVars: 3, hostBindings: function IgxYearsViewComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.arrowdown", function IgxYearsViewComponent_keydown_arrowdown_HostBindingHandler($event) { return ctx.onKeydownArrowDown($event); })("keydown.arrowup", function IgxYearsViewComponent_keydown_arrowup_HostBindingHandler($event) { return ctx.onKeydownArrowUp($event); })("keydown.enter", function IgxYearsViewComponent_keydown_enter_HostBindingHandler() { return ctx.onKeydownEnter(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
        ɵngcc0.ɵɵclassProp("igx-calendar", ctx.styleClass);
    } }, inputs: { id: "id", date: "date", yearFormat: "yearFormat", locale: "locale", formatView: "formatView" }, outputs: { onSelection: "onSelection" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxYearsViewComponent,
                multi: true
            },
            {
                provide: HAMMER_GESTURE_CONFIG,
                useClass: CalendarHammerConfig
            }
        ])], decls: 3, vars: 2, consts: [[1, "igx-calendar__body"], [1, "igx-calendar__body-column", 3, "wheel", "pan"], [3, "igxCalendarYear", "date", "onYearSelection", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "igxCalendarYear", "date", "onYearSelection"]], template: function IgxYearsViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵlistener("wheel", function IgxYearsViewComponent_Template_div_wheel_1_listener($event) { return ctx.scroll($event); })("pan", function IgxYearsViewComponent_Template_div_pan_1_listener($event) { return ctx.pan($event); });
        ɵngcc0.ɵɵtemplate(2, IgxYearsViewComponent_span_2_Template, 2, 3, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.decade)("ngForTrackBy", ctx.yearTracker);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.IgxCalendarYearDirective], encapsulation: 2 });
IgxYearsViewComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxYearsViewComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    date: [{ type: Input }],
    yearFormat: [{ type: Input }],
    locale: [{ type: Input }],
    formatView: [{ type: Input }],
    onSelection: [{ type: Output }],
    styleClass: [{ type: HostBinding, args: ['class.igx-calendar',] }],
    calendarDir: [{ type: ViewChildren, args: [IgxCalendarYearDirective, { read: IgxCalendarYearDirective },] }],
    onKeydownArrowDown: [{ type: HostListener, args: ['keydown.arrowdown', ['$event'],] }],
    onKeydownArrowUp: [{ type: HostListener, args: ['keydown.arrowup', ['$event'],] }],
    onKeydownEnter: [{ type: HostListener, args: ['keydown.enter',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxYearsViewComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IgxYearsViewComponent,
                        multi: true
                    },
                    {
                        provide: HAMMER_GESTURE_CONFIG,
                        useClass: CalendarHammerConfig
                    }
                ],
                selector: 'igx-years-view',
                template: "<div class=\"igx-calendar__body\">\n    <div class=\"igx-calendar__body-column\" (wheel)=\"scroll($event)\" (pan)=\"pan($event)\">\n        <span [igxCalendarYear]=\"year\" [date]=\"date\" (onYearSelection)=\"selectYear($event)\" *ngFor=\"let year of decade; trackBy: yearTracker\">\n            {{ formattedYear(year) }}\n        </span>\n    </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], onSelection: [{
            type: Output
        }], styleClass: [{
            type: HostBinding,
            args: ['class.igx-calendar']
        }], date: [{
            type: Input
        }], yearFormat: [{
            type: Input
        }], locale: [{
            type: Input
        }], 
    /**
     * @hidden
     */
    onKeydownArrowDown: [{
            type: HostListener,
            args: ['keydown.arrowdown', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownArrowUp: [{
            type: HostListener,
            args: ['keydown.arrowup', ['$event']]
        }], 
    /**
     * @hidden
     */
    onKeydownEnter: [{
            type: HostListener,
            args: ['keydown.enter']
        }], formatView: [{
            type: Input
        }], calendarDir: [{
            type: ViewChildren,
            args: [IgxCalendarYearDirective, { read: IgxCalendarYearDirective }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,