import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, Inject, Injector, Input, LOCALE_ID, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { NgControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { fadeIn, fadeOut } from '../animations/fade';
import { IgxCalendarComponent, WEEKDAYS } from '../calendar/public_api';
import { DateRangeType } from '../core/dates';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { InteractionMode } from '../core/enums';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { DatePickerUtil } from '../date-picker/date-picker.utils';
import { IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { IgxInputDirective, IgxInputGroupComponent, IgxInputState, IgxLabelDirective } from '../input-group/public_api';
import { AutoPositionStrategy } from '../services/public_api';
import { IgxDateRangeEndComponent, IgxDateRangeInputsBaseComponent, IgxDateRangeSeparatorDirective, IgxDateRangeStartComponent, IgxPickerToggleComponent } from './date-range-picker-inputs.common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../directives/toggle/toggle.directive';
import * as ɵngcc2 from '../calendar/calendar.component';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../directives/button/button.directive';
import * as ɵngcc5 from '../icon/icon.component';
import * as ɵngcc6 from '../input-group/input-group.component';
import * as ɵngcc7 from '../directives/input/input.directive';
import * as ɵngcc8 from '../directives/prefix/prefix.directive';
import * as ɵngcc9 from './date-range-picker-inputs.common';

function IgxDateRangePickerComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function IgxDateRangePickerComponent_ng_container_5_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.close(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.doneButtonText);
} }
function IgxDateRangePickerComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxDateRangePickerComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵlistener("click", function IgxDateRangePickerComponent_ng_template_7_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.open(); });
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
function IgxDateRangePickerComponent_ng_template_9_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxDateRangePickerComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 1);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵtemplate(2, IgxDateRangePickerComponent_ng_template_9_ng_container_2_Template, 1, 0, "ng-container", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵprojection(3, 2);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    const _r10 = ɵngcc0.ɵɵreference(14);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("className", ctx_r7.separatorClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r7.dateSeparatorTemplate ? ctx_r7.dateSeparatorTemplate : _r10);
} }
function IgxDateRangePickerComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon");
    ɵngcc0.ɵɵtext(1, " calendar_today ");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxDateRangePickerComponent_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate(ctx_r11.dateSeparator);
} }
function IgxDateRangePickerComponent_ng_template_15_igx_prefix_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxDateRangePickerComponent_ng_template_15_igx_prefix_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-prefix");
    ɵngcc0.ɵɵtemplate(1, IgxDateRangePickerComponent_ng_template_15_igx_prefix_4_ng_container_1_Template, 1, 0, "ng-container", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext(2);
    const _r8 = ɵngcc0.ɵɵreference(12);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r8);
} }
function IgxDateRangePickerComponent_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 15);
    ɵngcc0.ɵɵlistener("click", function IgxDateRangePickerComponent_ng_template_15_Template_igx_input_group_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.open(); });
    ɵngcc0.ɵɵelement(1, "input", 16, 17);
    ɵngcc0.ɵɵpipe(3, "dateRange");
    ɵngcc0.ɵɵtemplate(4, IgxDateRangePickerComponent_ng_template_15_igx_prefix_4_Template, 2, 1, "igx-prefix", 5);
    ɵngcc0.ɵɵelementContainerStart(5, 18);
    ɵngcc0.ɵɵprojection(6, 3);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(7, 19);
    ɵngcc0.ɵɵprojection(8, 4);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(9, 20);
    ɵngcc0.ɵɵprojection(10, 5);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(11, 21);
    ɵngcc0.ɵɵprojection(12, 6);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placeholder", ctx_r13.value ? "" : ctx_r13.singleInputFormat)("value", ɵngcc0.ɵɵpipeBind4(3, 5, ctx_r13.value, ctx_r13.appliedFormat, ctx_r13.locale, ctx_r13.formatter));
    ɵngcc0.ɵɵattribute("aria-expanded", !_r0.collapsed)("aria-labelledby", ctx_r13.label == null ? null : ctx_r13.label.id);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r13.toggleComponents.length);
} }
const _c0 = [[["igx-date-single"]], [["igx-date-range-start"]], [["igx-date-range-end"]], [["", "igxLabel", ""]], [["igx-prefix"], ["", "igxPrefix", ""]], [["igx-suffix"], ["", "igxSuffix", ""]], [["igx-hint"], ["", "igxHint", ""]]];
const _c1 = ["igx-date-single", "igx-date-range-start", "igx-date-range-end", "[igxLabel]", "igx-prefix,[igxPrefix]", "igx-suffix,[igxSuffix]", "igx-hint,[igxHint]"];
const SingleInputDatesConcatenationString = ' - ';
/**
 * Provides the ability to select a range of dates from a calendar UI or editable inputs.
 *
 * @igxModule IgxDateRangeModule
 *
 * @igxTheme igx-input-group-theme, igx-calendar-theme, igx-date-range-picker-theme
 *
 * @igxKeywords date, range, date range, date picker
 *
 * @igxGroup scheduling
 *
 * @remarks
 * It displays the range selection in a single or two input fields.
 * The default template displays a single *readonly* input field
 * while projecting `igx-date-range-start` and `igx-date-range-end`
 * displays two *editable* input fields.
 *
 * @example
 * ```html
 * <igx-date-range-picker mode="dropdown"></igx-date-range-picker>
 * ```
 */
export class IgxDateRangePickerComponent extends DisplayDensityBase {
    constructor(element, _displayDensityOptions, localeId, _injector) {
        super(_displayDensityOptions);
        this.element = element;
        this._displayDensityOptions = _displayDensityOptions;
        this.localeId = localeId;
        this._injector = _injector;
        /**
         * Display calendar in either `dialog` or `dropdown` mode.
         * @remarks
         * Default mode is `dialog`
         *
         * @example
         * ```html
         * <igx-date-range-picker mode="dropdown"></igx-date-range-picker>
         * ```
         */
        this.mode = InteractionMode.Dialog;
        /**
         * The number of displayed month views.
         *
         * @remarks
         * Default is `2`.
         *
         * @example
         * ```html
         * <igx-date-range-picker [monthsViewNumber]="3"></igx-date-range-picker>
         * ```
         */
        this.monthsViewNumber = 2;
        /**
         * The start day of the week.
         *
         * @remarks
         * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
         *
         * @example
         * ```html
         * <igx-date-range-picker [weekStart]="1"></igx-date-range-picker>
         * ```
         */
        this.weekStart = WEEKDAYS.SUNDAY;
        /**
         * The default text of the calendar dialog `done` button.
         *
         * @remarks
         * Default value is `Done`.
         * The button will only show up in `dialog` mode.
         *
         * @example
         * ```html
         * <igx-date-range-picker doneButtonText="完了"></igx-date-range-picker>
         * ```
         */
        this.doneButtonText = 'Done';
        /**
         * Enables/Disables the `IgxDateRangePickerComponent`.
         *  @example
         * ```html
         * <igx-date-range-picker [disabled]="'true'"></igx-date-range-picker>
         * ```
         */
        this.disabled = false;
        /**
         * Sets the `placeholder` for single-input `IgxDateRangePickerComponent`.
         *   @example
         * ```html
         * <igx-date-range-picker [placeholder]="'Choose your dates'"></igx-date-range-picker>
         * ```
         */
        this.placeholder = '';
        /**
         * Emitted when a range is selected.
         *
         * @example
         * ```html
         * <igx-date-range-picker (rangeSelected)="handleSelected($event)"></igx-date-range-picker>
         * ```
         */
        this.rangeSelected = new EventEmitter();
        /**
         * Emitted when the calendar starts opening, cancelable.
         *
         * @example
         * ```html
         * <igx-date-range-picker (onOpening)="handleOpening($event)"></igx-date-range-picker>
         * ```
         */
        this.onOpening = new EventEmitter();
        /**
         * Emitted when the `IgxDateRangeComponent` is opened.
         *
         * @example
         * ```html
         * <igx-date-range-picker (onOpened)="handleOpened($event)"></igx-date-range-picker>
         * ```
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted when the calendar starts closing, cancelable.
         *
         * @example
         * ```html
         * <igx-date-range-picker (onClosing)="handleClosing($event)"></igx-date-range-picker>
         * ```
         */
        this.onClosing = new EventEmitter();
        /**
         * Emitted when the `IgxDateRangeComponent` is closed.
         *
         * @example
         * ```html
         * <igx-date-range-picker (onClosed)="handleClosed($event)"></igx-date-range-picker>
         * ```
         */
        this.onClosed = new EventEmitter();
        /** @hidden @internal */
        this.cssClass = 'igx-date-range-picker';
        /** @hidden @internal */
        this.dateSeparator = CurrentResourceStrings.DateRangePickerResStrings.igx_date_range_picker_date_separator;
        this._collapsed = true;
        this.$destroy = new Subject();
        this.$toggleClickNotifier = new Subject();
        this._dialogOverlaySettings = {
            closeOnOutsideClick: true,
            modal: true
        };
        this._dropDownOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false
        };
        this.onChangeCallback = (dateRange) => { };
        this.onTouchCallback = () => { };
        this.onValidatorChange = () => { };
        this.onStatusChanged = () => {
            if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&
                (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {
                if (this.inputGroup) {
                    this.inputDirective.valid = this.getInputState(this.inputGroup.isFocused);
                }
                else if (this.hasProjectedInputs) {
                    this.projectedInputs
                        .forEach(i => { i.inputDirective.valid = this.getInputState(i.isFocused); });
                }
            }
            this.setRequiredToInputs();
        };
        this.locale = this.locale || this.localeId;
    }
    /**
     * The minimum value in a valid range.
     *
     * @example
     * <igx-date-range-picker [minValue]="minDate"></igx-date-range-picker>
     */
    set minValue(value) {
        this._minValue = value;
        this.onValidatorChange();
    }
    get minValue() {
        return this._minValue;
    }
    /**
     * The maximum value in a valid range.
     *
     * @example
     * <igx-date-range-picker [maxValue]="maxDate"></igx-date-range-picker>
     */
    set maxValue(value) {
        this._maxValue = value;
        this.onValidatorChange();
    }
    get maxValue() {
        return this._maxValue;
    }
    /** @hidden @internal */
    get appliedFormat() {
        return DatePickerUtil.getLocaleDateFormat(this.locale, this.displayFormat)
            || DatePickerUtil.DEFAULT_INPUT_FORMAT;
    }
    /** @hidden @internal */
    get singleInputFormat() {
        if (this.placeholder !== '') {
            return this.placeholder;
        }
        const format = this.appliedFormat;
        return `${format}${SingleInputDatesConcatenationString}${format}`;
    }
    /** @hidden @internal */
    get hasProjectedInputs() {
        var _a;
        return ((_a = this.projectedInputs) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    get dropdownOverlaySettings() {
        return Object.assign({}, this._dropDownOverlaySettings, this.overlaySettings);
    }
    get dialogOverlaySettings() {
        return Object.assign({}, this._dialogOverlaySettings, this.overlaySettings);
    }
    get required() {
        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {
            const error = this._ngControl.control.validator({});
            return (error && error.required) ? true : false;
        }
        return false;
    }
    /**
     * Opens the date range picker's dropdown or dialog.
     *
     * @example
     * ```html
     * <igx-date-range-picker #dateRange></igx-date-range-picker>
     *
     * <button (click)="dateRange.open()">Open Dialog</button
     * ```
     */
    open(overlaySettings) {
        if (!this.collapsed || this.disabled) {
            return;
        }
        this.updateCalendar();
        const settings = this.mode === InteractionMode.Dialog ? this.dialogOverlaySettings : this.dropdownOverlaySettings;
        this.toggleDirective.open(Object.assign(settings, overlaySettings));
    }
    /**
     * Closes the date range picker's dropdown or dialog.
     *
     * @example
     * html```
     * <igx-date-range-picker #dateRange></igx-date-range-picker>
     *
     * <button (click)="dateRange.close()">Close Dialog</button>
     * ```
     */
    close() {
        if (!this.collapsed) {
            this.toggleDirective.close();
        }
    }
    /**
     * Toggles the date range picker's dropdown or dialog
     *
     * @example
     * html```
     * <igx-date-range-picker #dateRange></igx-date-range-picker>
     *
     * <button (click)="dateRange.toggle()">Toggle Dialog</button>
     * ```
     */
    toggle(overlaySettings) {
        if (!this.collapsed) {
            this.close();
        }
        else {
            this.open(overlaySettings);
        }
    }
    /**
     * Gets calendar state.
     *
     * ```typescript
     * let state = this.dateRange.collapsed;
     * ```
     */
    get collapsed() {
        return this._collapsed;
    }
    /**
     * The currently selected value / range from the calendar
     *
     * @remarks
     * The current value is of type `DateRange`
     *
     * @example
     * ```typescript
     * const newValue: DateRange = { start: new Date("2/2/2012"), end: new Date("3/3/2013")};
     * this.dateRangePicker.value = newValue;
     * ```
     */
    get value() {
        return this._value;
    }
    set value(value) {
        this.updateValue(value);
        this.onChangeCallback(value);
    }
    updateValue(value) {
        this._value = value ? value : null;
        this.updateInputs();
    }
    /**
     * Selects a range of dates. If no `endDate` is passed, range is 1 day (only `startDate`)
     *
     * @example
     * ```typescript
     * public selectFiveDayRange() {
     *  const today = new Date();
     *  const inFiveDays = new Date(new Date().setDate(today.getDate() + 5));
     *  this.dateRange.selectRange(today, inFiveDays);
     * }
     * ```
     */
    selectRange(startDate, endDate) {
        endDate = endDate !== null && endDate !== void 0 ? endDate : startDate;
        const dateRange = [startDate, endDate];
        this.calendar.selectDate(dateRange);
        this.handleSelection(dateRange);
    }
    /** @hidden @internal */
    writeValue(value) {
        this.updateValue(value);
    }
    /** @hidden @internal */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /** @hidden @internal */
    registerOnTouched(fn) {
        this.onTouchCallback = fn;
    }
    /** @hidden @internal */
    validate(control) {
        const value = control.value;
        const errors = {};
        if (value) {
            if (this.hasProjectedInputs) {
                const startInput = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
                const endInput = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
                if (!startInput.dateTimeEditor.value) {
                    Object.assign(errors, { 'startValue': true });
                }
                if (!endInput.dateTimeEditor.value) {
                    Object.assign(errors, { 'endValue': true });
                }
            }
            const min = DatePickerUtil.parseDate(this.minValue);
            const max = DatePickerUtil.parseDate(this.maxValue);
            const start = DatePickerUtil.parseDate(value.start);
            const end = DatePickerUtil.parseDate(value.end);
            if ((min && start && DatePickerUtil.lessThanMinValue(start, min, false))
                || (min && end && DatePickerUtil.lessThanMinValue(end, min, false))) {
                Object.assign(errors, { 'minValue': true });
            }
            if ((max && start && DatePickerUtil.greaterThanMaxValue(start, max, false))
                || (max && end && DatePickerUtil.greaterThanMaxValue(end, max, false))) {
                Object.assign(errors, { 'maxValue': true });
            }
        }
        return Object.keys(errors).length > 0 ? errors : null;
    }
    /** @hidden @internal */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /** @hidden @internal */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** @hidden @internal */
    get separatorClass() {
        return this.getComponentDensityClass('igx-date-range-picker__label');
    }
    /** @hidden */
    ngOnInit() {
        this._ngControl = this._injector.get(NgControl, null);
    }
    /** @hidden */
    ngAfterViewInit() {
        if (this.mode === InteractionMode.DropDown) {
            this.attachOnKeydown();
        }
        this.subscribeToDateEditorEvents();
        this.configPositionStrategy();
        this.configOverlaySettings();
        this.cacheFocusedInput();
        this.attachOnTouched();
        const subsToClicked = () => {
            this.$toggleClickNotifier.next();
            this.toggleComponents.forEach(toggle => {
                toggle.clicked.pipe(takeUntil(this.$toggleClickNotifier)).subscribe(() => this.open());
            });
        };
        this.toggleComponents.changes.pipe(takeUntil(this.$destroy)).subscribe(() => subsToClicked());
        subsToClicked();
        this.setRequiredToInputs();
        if (this._ngControl) {
            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
        // delay invocations until the current change detection cycle has completed
        Promise.resolve().then(() => {
            this.updateDisabledState();
            this.initialSetValue();
            this.updateInputs();
        });
        this.updateDisplayFormat();
        this.updateInputFormat();
    }
    /** @hidden @internal */
    ngOnChanges(changes) {
        if (changes['locale']) {
            this.inputFormat = DatePickerUtil.getDefaultInputFormat(this.locale || 'en') || DatePickerUtil.DEFAULT_INPUT_FORMAT;
        }
        if (changes['displayFormat'] && this.hasProjectedInputs) {
            this.updateDisplayFormat();
        }
        if (changes['inputFormat'] && this.hasProjectedInputs) {
            this.updateInputFormat();
        }
        if (changes['disabled']) {
            this.updateDisabledState();
        }
    }
    /** @hidden @internal */
    ngOnDestroy() {
        this.$destroy.next();
        this.$destroy.complete();
        this.$toggleClickNotifier.next();
        this.$toggleClickNotifier.complete();
    }
    /** @hidden @internal */
    handleOpening(event) {
        const args = { owner: this, cancel: event.cancel, event: event.event };
        this.onOpening.emit(args);
        event.cancel = args.cancel;
        if (!args.cancel) {
            this._collapsed = false;
        }
    }
    /** @hidden @internal */
    handleOpened() {
        this.calendar.daysView.focusActiveDate();
        this.onOpened.emit({ owner: this });
    }
    /** @hidden @internal */
    handleClosing(event) {
        if (this.value && !this.value.start && !this.value.end) {
            this.value = null;
        }
        const args = { owner: this, cancel: event.cancel, event: event.event };
        this.onClosing.emit(args);
        event.cancel = args.cancel;
        if (args.cancel) {
            return;
        }
        if (this.mode === InteractionMode.DropDown && event.event && !this.element.nativeElement.contains(event.event.target)) {
            // outside click
            this.updateValidityOnBlur();
        }
        else {
            // input click
            if (this.hasProjectedInputs && this._focusedInput) {
                this._focusedInput.setFocus();
                this._focusedInput = null;
            }
            if (this.inputDirective) {
                this.inputDirective.focus();
            }
        }
    }
    updateValidityOnBlur() {
        this.onTouchCallback();
        if (this._ngControl) {
            if (this.hasProjectedInputs) {
                this.projectedInputs.forEach(i => {
                    if (!this._ngControl.valid) {
                        i.updateInputValidity(IgxInputState.INVALID);
                    }
                    else {
                        i.updateInputValidity(IgxInputState.INITIAL);
                    }
                });
            }
            if (this.inputDirective) {
                if (!this._ngControl.valid) {
                    this.inputDirective.valid = IgxInputState.INVALID;
                }
                else {
                    this.inputDirective.valid = IgxInputState.INITIAL;
                }
            }
        }
    }
    /** @hidden @internal */
    handleClosed() {
        this._collapsed = true;
        this.onClosed.emit({ owner: this });
    }
    /** @hidden @internal */
    onKeyDown(event) {
        switch (event.key) {
            case "ArrowUp" /* UP_ARROW */:
            case "Up" /* UP_ARROW_IE */:
                if (event.altKey) {
                    this.close();
                }
                break;
            case "ArrowDown" /* DOWN_ARROW */:
            case "Down" /* DOWN_ARROW_IE */:
                if (event.altKey) {
                    this.open();
                }
                break;
            case "Escape" /* ESCAPE */:
            case "Esc" /* ESCAPE_IE */:
                this.close();
                break;
        }
    }
    /** @hidden @internal */
    handleSelection(selectionData) {
        this.value = this.extractRange(selectionData);
        this.rangeSelected.emit(this.value);
        if (this.mode === InteractionMode.DropDown && (selectionData === null || selectionData === void 0 ? void 0 : selectionData.length) > 1) {
            this.close();
        }
    }
    updateDisabledState() {
        if (this.hasProjectedInputs) {
            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
            start.inputDirective.disabled = this.disabled;
            end.inputDirective.disabled = this.disabled;
            return;
        }
        if (this.inputDirective) {
            this.inputDirective.disabled = this.disabled;
        }
    }
    getInputState(focused) {
        if (focused) {
            return this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
        }
        else {
            return this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
        }
    }
    setRequiredToInputs() {
        // workaround for igxInput setting required
        Promise.resolve().then(() => {
            const isRequired = this.required;
            if (this.inputGroup && this.inputGroup.isRequired !== isRequired) {
                this.inputGroup.isRequired = isRequired;
            }
            else if (this.hasProjectedInputs && this._ngControl) {
                this.projectedInputs.forEach(i => i.isRequired = isRequired);
            }
        });
    }
    parseMinValue(value) {
        let minValue = DatePickerUtil.parseDate(value);
        if (!minValue && this.hasProjectedInputs) {
            const start = this.projectedInputs.filter(i => i instanceof IgxDateRangeStartComponent)[0];
            if (start) {
                minValue = DatePickerUtil.parseDate(start.dateTimeEditor.minValue);
            }
        }
        return minValue;
    }
    parseMaxValue(value) {
        let maxValue = DatePickerUtil.parseDate(value);
        if (!maxValue && this.projectedInputs) {
            const end = this.projectedInputs.filter(i => i instanceof IgxDateRangeEndComponent)[0];
            if (end) {
                maxValue = DatePickerUtil.parseDate(end.dateTimeEditor.maxValue);
            }
        }
        return maxValue;
    }
    updateCalendar() {
        var _a, _b;
        this.calendar.disabledDates = [];
        const minValue = this.parseMinValue(this.minValue);
        if (minValue) {
            this.calendar.disabledDates.push({ type: DateRangeType.Before, dateRange: [minValue] });
        }
        const maxValue = this.parseMaxValue(this.maxValue);
        if (maxValue) {
            this.calendar.disabledDates.push({ type: DateRangeType.After, dateRange: [maxValue] });
        }
        const range = [];
        if (((_a = this.value) === null || _a === void 0 ? void 0 : _a.start) && ((_b = this.value) === null || _b === void 0 ? void 0 : _b.end)) {
            if (DatePickerUtil.greaterThanMaxValue(this.value.start, this.value.end)) {
                this.swapEditorDates();
            }
            if (this.valueInRange(this.value, minValue, maxValue)) {
                range.push(this.value.start, this.value.end);
            }
        }
        if (range.length > 0) {
            this.calendar.selectDate(range);
        }
        else {
            this.calendar.deselectDate();
        }
        this.calendar.viewDate = range[0] || new Date();
    }
    swapEditorDates() {
        if (this.hasProjectedInputs) {
            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
            [start.dateTimeEditor.value, end.dateTimeEditor.value] = [end.dateTimeEditor.value, start.dateTimeEditor.value];
            [this.value.start, this.value.end] = [this.value.end, this.value.start];
        }
    }
    valueInRange(value, minValue, maxValue) {
        if (minValue && DatePickerUtil.lessThanMinValue(value.start, minValue, false)) {
            return false;
        }
        if (maxValue && DatePickerUtil.greaterThanMaxValue(value.end, maxValue, false)) {
            return false;
        }
        return true;
    }
    extractRange(selection) {
        return {
            start: selection[0],
            end: selection.length > 0 ? selection[selection.length - 1] : null
        };
    }
    attachOnKeydown() {
        fromEvent(this.element.nativeElement, 'keydown')
            .pipe(takeUntil(this.$destroy))
            .subscribe((evt) => this.onKeyDown(evt));
    }
    subscribeToDateEditorEvents() {
        if (this.hasProjectedInputs) {
            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
            if (start && end) {
                start.dateTimeEditor.valueChange
                    .pipe(takeUntil(this.$destroy))
                    .subscribe(value => {
                    if (this.value) {
                        this.value = { start: value, end: this.value.end };
                    }
                    else {
                        this.value = { start: value, end: null };
                    }
                });
                end.dateTimeEditor.valueChange
                    .pipe(takeUntil(this.$destroy))
                    .subscribe(value => {
                    if (this.value) {
                        this.value = { start: this.value.start, end: value };
                    }
                    else {
                        this.value = { start: null, end: value };
                    }
                });
            }
        }
    }
    attachOnTouched() {
        if (this.hasProjectedInputs) {
            this.projectedInputs.forEach(i => {
                fromEvent(i.dateTimeEditor.nativeElement, 'blur')
                    .pipe(takeUntil(this.$destroy))
                    .subscribe(() => {
                    if (this.collapsed) {
                        this.updateValidityOnBlur();
                    }
                });
            });
        }
        else {
            fromEvent(this.inputDirective.nativeElement, 'blur')
                .pipe(takeUntil(this.$destroy))
                .subscribe(() => {
                if (this.collapsed) {
                    this.updateValidityOnBlur();
                }
            });
        }
    }
    cacheFocusedInput() {
        if (this.hasProjectedInputs) {
            this.projectedInputs.forEach(i => {
                fromEvent(i.dateTimeEditor.nativeElement, 'focus')
                    .pipe(takeUntil(this.$destroy))
                    .subscribe(() => this._focusedInput = i);
            });
        }
    }
    configPositionStrategy() {
        this._positionSettings = {
            openAnimation: fadeIn,
            closeAnimation: fadeOut
        };
        this._dropDownOverlaySettings.positionStrategy = new AutoPositionStrategy(this._positionSettings);
        this._dropDownOverlaySettings.target = this.element.nativeElement;
    }
    configOverlaySettings() {
        if (this.overlaySettings !== null) {
            this._dropDownOverlaySettings = Object.assign({}, this._dropDownOverlaySettings, this.overlaySettings);
            this._dialogOverlaySettings = Object.assign({}, this._dialogOverlaySettings, this.overlaySettings);
        }
    }
    initialSetValue() {
        // if there is no value and no ngControl on the picker but we have inputs we may have value set through
        // their ngModels - we should generate our initial control value
        if ((!this.value || (!this.value.start && !this.value.end)) && this.hasProjectedInputs && !this._ngControl) {
            const start = this.projectedInputs.find(i => i instanceof IgxDateRangeStartComponent);
            const end = this.projectedInputs.find(i => i instanceof IgxDateRangeEndComponent);
            this._value = {
                start: start.dateTimeEditor.value,
                end: end.dateTimeEditor.value
            };
        }
    }
    updateInputs() {
        var _a, _b, _c, _d, _e, _f;
        const start = (_a = this.projectedInputs) === null || _a === void 0 ? void 0 : _a.find(i => i instanceof IgxDateRangeStartComponent);
        const end = (_b = this.projectedInputs) === null || _b === void 0 ? void 0 : _b.find(i => i instanceof IgxDateRangeEndComponent);
        if (start && end) {
            start.updateInputValue((_d = (_c = this.value) === null || _c === void 0 ? void 0 : _c.start) !== null && _d !== void 0 ? _d : null);
            end.updateInputValue((_f = (_e = this.value) === null || _e === void 0 ? void 0 : _e.end) !== null && _f !== void 0 ? _f : null);
        }
    }
    updateDisplayFormat() {
        this.projectedInputs.forEach(i => {
            const input = i;
            input.dateTimeEditor.displayFormat = this.displayFormat;
        });
    }
    updateInputFormat() {
        this.projectedInputs.forEach(i => {
            const input = i;
            if (input.dateTimeEditor.inputFormat !== this.inputFormat) {
                input.dateTimeEditor.inputFormat = this.inputFormat;
            }
        });
    }
}
IgxDateRangePickerComponent.ɵfac = function IgxDateRangePickerComponent_Factory(t) { return new (t || IgxDateRangePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DisplayDensityToken, 8), ɵngcc0.ɵɵdirectiveInject(LOCALE_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
IgxDateRangePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxDateRangePickerComponent, selectors: [["igx-date-range-picker"]], contentQueries: function IgxDateRangePickerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxLabelDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxDateRangeSeparatorDirective, true, TemplateRef);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxPickerToggleComponent, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxDateRangeInputsBaseComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dateSeparatorTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toggleComponents = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.projectedInputs = _t);
    } }, viewQuery: function IgxDateRangePickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(IgxCalendarComponent, true);
        ɵngcc0.ɵɵviewQuery(IgxInputGroupComponent, true);
        ɵngcc0.ɵɵviewQuery(IgxInputDirective, true);
        ɵngcc0.ɵɵviewQuery(IgxToggleDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.calendar = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputGroup = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toggleDirective = _t.first);
    } }, hostVars: 2, hostBindings: function IgxDateRangePickerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("igx-date-range-picker", ctx.cssClass);
    } }, inputs: { mode: "mode", monthsViewNumber: "monthsViewNumber", weekStart: "weekStart", doneButtonText: "doneButtonText", disabled: "disabled", placeholder: "placeholder", locale: "locale", minValue: "minValue", maxValue: "maxValue", value: "value", inputFormat: "inputFormat", hideOutsideDays: "hideOutsideDays", formatter: "formatter", overlaySettings: "overlaySettings", displayFormat: "displayFormat" }, outputs: { rangeSelected: "rangeSelected", onOpening: "onOpening", onOpened: "onOpened", onClosing: "onClosing", onClosed: "onClosed" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateRangePickerComponent, multi: true },
            { provide: NG_VALIDATORS, useExisting: IgxDateRangePickerComponent, multi: true }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 17, vars: 14, consts: [["igxToggle", "", 1, "igx-date-picker", 3, "onOpening", "onOpened", "onClosing", "onClosed"], ["toggle", "toggle"], ["selection", "range", 3, "weekStart", "hideOutsideDays", "monthsViewNumber", "locale", "keydown", "onSelection"], ["calendar", ""], [1, "igx-date-range-picker-buttons"], [4, "ngIf"], [4, "ngTemplateOutlet"], ["singleTemplate", ""], ["startEndTemplate", ""], ["defIcon", ""], ["defDateSeparatorTemplate", ""], ["defTemplate", ""], ["igxButton", "", "type", "button", 3, "click"], [1, "content-wrap", 3, "click"], [3, "className"], [3, "click"], ["igxInput", "", "type", "text", "readonly", "", "role", "combobox", "aria-haspopup", "grid", 3, "placeholder", "value"], ["singleInput", ""], ["ngProjectAs", "[igxLabel]", 5, ["", "igxLabel", ""]], ["ngProjectAs", "igx-prefix", 5, ["igx-prefix"]], ["ngProjectAs", "igx-suffix", 5, ["igx-suffix"]], ["ngProjectAs", "igx-hint", 5, ["igx-hint"]]], template: function IgxDateRangePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("onOpening", function IgxDateRangePickerComponent_Template_div_onOpening_0_listener($event) { return ctx.handleOpening($event); })("onOpened", function IgxDateRangePickerComponent_Template_div_onOpened_0_listener() { return ctx.handleOpened(); })("onClosing", function IgxDateRangePickerComponent_Template_div_onClosing_0_listener($event) { return ctx.handleClosing($event); })("onClosed", function IgxDateRangePickerComponent_Template_div_onClosed_0_listener() { return ctx.handleClosed(); });
        ɵngcc0.ɵɵelementStart(2, "igx-calendar", 2, 3);
        ɵngcc0.ɵɵlistener("keydown", function IgxDateRangePickerComponent_Template_igx_calendar_keydown_2_listener($event) { return ctx.onKeyDown($event); })("onSelection", function IgxDateRangePickerComponent_Template_igx_calendar_onSelection_2_listener($event) { return ctx.handleSelection($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵtemplate(5, IgxDateRangePickerComponent_ng_container_5_Template, 3, 1, "ng-container", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, IgxDateRangePickerComponent_ng_container_6_Template, 1, 0, "ng-container", 6);
        ɵngcc0.ɵɵtemplate(7, IgxDateRangePickerComponent_ng_template_7_Template, 2, 0, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(9, IgxDateRangePickerComponent_ng_template_9_Template, 4, 2, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(11, IgxDateRangePickerComponent_ng_template_11_Template, 2, 0, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(13, IgxDateRangePickerComponent_ng_template_13_Template, 1, 1, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(15, IgxDateRangePickerComponent_ng_template_15_Template, 13, 10, "ng-template", null, 11, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r6 = ɵngcc0.ɵɵreference(10);
        const _r12 = ɵngcc0.ɵɵreference(16);
        ɵngcc0.ɵɵstyleProp("flex-basis", ctx.monthsViewNumber * 320 + "px")("width", ctx.monthsViewNumber * 320 + "px")("max-width", "90vw");
        ɵngcc0.ɵɵclassProp("igx-date-picker--dropdown", ctx.mode === "dropdown");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("weekStart", ctx.weekStart)("hideOutsideDays", ctx.hideOutsideDays)("monthsViewNumber", ctx.monthsViewNumber)("locale", ctx.locale);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mode === "dialog");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.hasProjectedInputs ? _r6 : _r12);
    } }, directives: [ɵngcc1.IgxToggleDirective, ɵngcc2.IgxCalendarComponent, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.IgxButtonDirective, ɵngcc5.IgxIconComponent, ɵngcc6.IgxInputGroupComponent, ɵngcc7.IgxInputDirective, ɵngcc8.IgxPrefixDirective], pipes: [ɵngcc9.DateRangePickerFormatPipe], encapsulation: 2 });
IgxDateRangePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: Injector }
];
IgxDateRangePickerComponent.propDecorators = {
    mode: [{ type: Input }],
    monthsViewNumber: [{ type: Input }],
    hideOutsideDays: [{ type: Input }],
    weekStart: [{ type: Input }],
    locale: [{ type: Input }],
    formatter: [{ type: Input }],
    doneButtonText: [{ type: Input }],
    overlaySettings: [{ type: Input }],
    displayFormat: [{ type: Input }],
    inputFormat: [{ type: Input }],
    minValue: [{ type: Input }],
    maxValue: [{ type: Input }],
    disabled: [{ type: Input }],
    placeholder: [{ type: Input }],
    rangeSelected: [{ type: Output }],
    onOpening: [{ type: Output }],
    onOpened: [{ type: Output }],
    onClosing: [{ type: Output }],
    onClosed: [{ type: Output }],
    cssClass: [{ type: HostBinding, args: ['class.igx-date-range-picker',] }],
    calendar: [{ type: ViewChild, args: [IgxCalendarComponent,] }],
    inputGroup: [{ type: ViewChild, args: [IgxInputGroupComponent,] }],
    inputDirective: [{ type: ViewChild, args: [IgxInputDirective,] }],
    toggleDirective: [{ type: ViewChild, args: [IgxToggleDirective,] }],
    toggleComponents: [{ type: ContentChildren, args: [IgxPickerToggleComponent, { descendants: true },] }],
    projectedInputs: [{ type: ContentChildren, args: [IgxDateRangeInputsBaseComponent,] }],
    label: [{ type: ContentChild, args: [IgxLabelDirective,] }],
    dateSeparatorTemplate: [{ type: ContentChild, args: [IgxDateRangeSeparatorDirective, { read: TemplateRef },] }],
    value: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxDateRangePickerComponent, [{
        type: Component,
        args: [{
                selector: 'igx-date-range-picker',
                template: "<div #toggle=\"toggle\" igxToggle class=\"igx-date-picker\" [class.igx-date-picker--dropdown]=\"mode === 'dropdown'\"\n    (onOpening)=\"handleOpening($event)\" (onOpened)=\"handleOpened()\"\n    (onClosing)=\"handleClosing($event)\" (onClosed)=\"handleClosed()\"\n    [style.flex-basis]=\"monthsViewNumber * 320 + 'px'\"\n    [style.width]=\"monthsViewNumber * 320 + 'px'\"\n    [style.max-width]=\"'90vw'\"\n>\n    <!-- TODO: use IgxCalendarContainerComponent instead -->\n    <igx-calendar #calendar (keydown)=\"onKeyDown($event)\" selection=\"range\" [weekStart]=\"weekStart\"\n        [hideOutsideDays]=\"hideOutsideDays\" [monthsViewNumber]=\"monthsViewNumber\" [locale]=\"locale\"\n        (onSelection)=\"handleSelection($event)\"></igx-calendar>\n    <div class=\"igx-date-range-picker-buttons\">\n        <ng-container *ngIf=\"mode === 'dialog'\">\n            <button igxButton type=\"button\" (click)=\"close()\">{{ doneButtonText }}</button>\n        </ng-container>\n    </div>\n</div>\n\n<ng-container *ngTemplateOutlet=\"this.hasProjectedInputs ? startEndTemplate : defTemplate\"></ng-container>\n\n<ng-template #singleTemplate>\n    <div (click)=\"open()\" class=\"content-wrap\">\n        <ng-content select=\"igx-date-single\"></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #startEndTemplate>\n    <ng-content select=\"igx-date-range-start\"></ng-content>\n    <div [className]=\"separatorClass\">\n        <ng-container *ngTemplateOutlet=\"dateSeparatorTemplate ? dateSeparatorTemplate : defDateSeparatorTemplate;\"></ng-container>\n    </div>\n    <ng-content select=\"igx-date-range-end\"></ng-content>\n</ng-template>\n\n<ng-template #defIcon>\n    <igx-icon>\n        calendar_today\n    </igx-icon>\n</ng-template>\n\n<ng-template #defDateSeparatorTemplate>{{ dateSeparator }}</ng-template>\n\n<ng-template #defTemplate>\n    <igx-input-group (click)=\"open()\">\n        <input #singleInput igxInput type=\"text\" readonly\n            [placeholder]=\"this.value ? '' : singleInputFormat\"\n            role=\"combobox\"\n            aria-haspopup=\"grid\"\n            [attr.aria-expanded]=\"!toggle.collapsed\"\n            [attr.aria-labelledby]=\"this.label?.id\"\n            [value]=\"this.value | dateRange: this.appliedFormat : this.locale : this.formatter\"\n        />\n\n        <igx-prefix *ngIf=\"!this.toggleComponents.length\">\n            <ng-container *ngTemplateOutlet=\"defIcon\"></ng-container>\n        </igx-prefix>\n\n        <ng-container ngProjectAs=\"[igxLabel]\">\n            <ng-content select=\"[igxLabel]\"></ng-content>\n        </ng-container>\n        <ng-container ngProjectAs=\"igx-prefix\">\n            <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n        </ng-container>\n        <ng-container ngProjectAs=\"igx-suffix\">\n            <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n        </ng-container>\n        <ng-container ngProjectAs=\"igx-hint\">\n            <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n        </ng-container>\n    </igx-input-group>\n</ng-template>\n",
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateRangePickerComponent, multi: true },
                    { provide: NG_VALIDATORS, useExisting: IgxDateRangePickerComponent, multi: true }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DisplayDensityToken]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }, { type: ɵngcc0.Injector }]; }, { mode: [{
            type: Input
        }], monthsViewNumber: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], doneButtonText: [{
            type: Input
        }], disabled: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], rangeSelected: [{
            type: Output
        }], onOpening: [{
            type: Output
        }], onOpened: [{
            type: Output
        }], onClosing: [{
            type: Output
        }], onClosed: [{
            type: Output
        }], cssClass: [{
            type: HostBinding,
            args: ['class.igx-date-range-picker']
        }], locale: [{
            type: Input
        }], minValue: [{
            type: Input
        }], maxValue: [{
            type: Input
        }], value: [{
            type: Input
        }], inputFormat: [{
            type: Input
        }], hideOutsideDays: [{
            type: Input
        }], formatter: [{
            type: Input
        }], overlaySettings: [{
            type: Input
        }], displayFormat: [{
            type: Input
        }], calendar: [{
            type: ViewChild,
            args: [IgxCalendarComponent]
        }], inputGroup: [{
            type: ViewChild,
            args: [IgxInputGroupComponent]
        }], inputDirective: [{
            type: ViewChild,
            args: [IgxInputDirective]
        }], toggleDirective: [{
            type: ViewChild,
            args: [IgxToggleDirective]
        }], toggleComponents: [{
            type: ContentChildren,
            args: [IgxPickerToggleComponent, { descendants: true }]
        }], projectedInputs: [{
            type: ContentChildren,
            args: [IgxDateRangeInputsBaseComponent]
        }], label: [{
            type: ContentChild,
            args: [IgxLabelDirective]
        }], dateSeparatorTemplate: [{
            type: ContentChild,
            args: [IgxDateRangeSeparatorDirective, { read: TemplateRef }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,