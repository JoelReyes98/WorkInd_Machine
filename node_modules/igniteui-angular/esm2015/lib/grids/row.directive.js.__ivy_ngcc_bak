import { ChangeDetectorRef, ElementRef, forwardRef, HostBinding, HostListener, Input, QueryList, ViewChild, ViewChildren, Directive, Output, EventEmitter } from '@angular/core';
import { IgxCheckboxComponent } from '../checkbox/checkbox.component';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { GridBaseAPIService } from './api.service';
import { TransactionType } from '../services/public_api';
import { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from './selection/selection.service';
import mergeWith from 'lodash.mergewith';
import { cloneValue } from '../core/utils';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class IgxRowDirective {
    constructor(gridAPI, crudService, selectionService, element, cdr) {
        this.gridAPI = gridAPI;
        this.crudService = crudService;
        this.selectionService = selectionService;
        this.element = element;
        this.cdr = cdr;
        /**
         * @hidden
         */
        this.animateAdd = false;
        /**
         * @hidden
         */
        this.onAnimationEnd = new EventEmitter();
        /**
         * Sets whether this specific row has disabled functionality for editing and row selection.
         * Default value is `false`.
         * ```typescript
         * this.grid.selectedRows[0].pinned = true;
         * ```
         */
        this.disabled = false;
        /**
         * @hidden
         */
        this.role = 'row';
        /**
         * @hidden
         */
        this.focused = false;
        /**
         * @hidden
         * @internal
         */
        this.defaultCssClass = 'igx-grid__tr';
        this.destroy$ = new Subject();
    }
    /**
     *  The data passed to the row component.
     *
     * ```typescript
     * // get the row data for the first selected row
     * let selectedRowData = this.grid.selectedRows[0].rowData;
     * ```
     */
    get rowData() {
        if (this.inEditMode) {
            return mergeWith(cloneValue(this._rowData), this.grid.transactions.getAggregatedValue(this.rowID, false), (objValue, srcValue) => {
                if (Array.isArray(srcValue)) {
                    return objValue = srcValue;
                }
            });
        }
        return this._rowData;
    }
    set rowData(v) {
        this._rowData = v;
    }
    /**
     * Gets whether the row is pinned.
     * ```typescript
     * let isPinned = row.pinned;
     * ```
     */
    get pinned() {
        return this.grid.isRecordPinned(this.rowData);
    }
    get addRow() {
        return this._addRow;
    }
    set addRow(v) {
        this._addRow = v;
    }
    get rowHeight() {
        let height = this.grid.rowHeight || 32;
        if (this.grid.hasColumnLayouts) {
            const maxRowSpan = this.grid.multiRowLayoutRowSize;
            height = height * maxRowSpan;
        }
        return this.addRow ? height : null;
    }
    get cellHeight() {
        return this.addRow && !this.inEditMode ? null : this.grid.rowHeight || 32;
    }
    /**
     * Sets whether the row is pinned.
     * Default value is `false`.
     * ```typescript
     * this.grid.selectedRows[0].pinned = true;
     * ```
     */
    set pinned(value) {
        if (value) {
            this.grid.pinRow(this.rowID);
        }
        else {
            this.grid.unpinRow(this.rowID);
        }
    }
    get virtDirRow() {
        return this._virtDirRow ? this._virtDirRow.first : null;
    }
    /**
     * Gets the rendered cells in the row component.
     *
     * ```typescript
     * // get the cells of the third selected row
     * let selectedRowCells = this.grid.selectedRows[2].cells;
     * ```
     */
    get cells() {
        const res = new QueryList();
        if (!this._cells) {
            return res;
        }
        const cList = this._cells.filter((item) => item.nativeElement.parentElement !== null)
            .sort((item1, item2) => item1.column.visibleIndex - item2.column.visibleIndex);
        res.reset(cList);
        return res;
    }
    set cells(cells) {
    }
    get dataRowIndex() {
        return this.index;
    }
    /**
     * @hidden
     */
    get styleClasses() {
        return this.resolveClasses();
    }
    /**
     * @hidden
     */
    get selected() {
        return this.selectionService.isRowSelected(this.rowID);
    }
    set selected(value) {
        value ? this.selectionService.selectRowsWithNoEvent([this.rowID]) :
            this.selectionService.deselectRowsWithNoEvent([this.rowID]);
        this.grid.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    get columns() {
        return this.grid.visibleColumns;
    }
    /**
     * @hidden
     * @internal
     */
    get viewIndex() {
        if (this.grid.groupingExpressions.length) {
            return this.grid.filteredSortedData.indexOf(this.rowData);
        }
        return this.index + this.grid.page * this.grid.perPage;
    }
    /**
     * @hidden
     */
    get pinnedColumns() {
        return this.grid.pinnedColumns;
    }
    /**
     * @hidden
     */
    get isRoot() {
        return true;
    }
    /**
     * @hidden
     */
    get hasChildren() {
        return false;
    }
    /**
     * @hidden
     */
    get unpinnedColumns() {
        return this.grid.unpinnedColumns;
    }
    /**
     * @hidden
     */
    get showRowSelectors() {
        return this.grid.showRowSelectors;
    }
    /** @hidden */
    get dirty() {
        const row = this.grid.transactions.getState(this.rowID);
        if (row) {
            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;
        }
        return false;
    }
    /**
     * @hidden
     */
    get rowDraggable() {
        return this.grid.rowDraggable;
    }
    /** @hidden */
    get added() {
        const row = this.grid.transactions.getState(this.rowID);
        if (row) {
            return row.type === TransactionType.ADD;
        }
        return false;
    }
    /** @hidden */
    get deleted() {
        return this.gridAPI.row_deleted_transaction(this.rowID);
    }
    /**
     * @hidden
     */
    get dragging() {
        return this.grid.dragRowID === this.rowID;
    }
    // TODO: Refactor
    get inEditMode() {
        if (this.grid.rowEditable) {
            const editRowState = this.crudService.row;
            return (editRowState && editRowState.id === this.rowID) || false;
        }
        else {
            return false;
        }
    }
    /**
     * Get a reference to the grid that contains the selected row.
     *
     * ```typescript
     * handleRowSelection(event) {
     *  // the grid on which the onRowSelectionChange event was triggered
     *  const grid = event.row.grid;
     * }
     * ```
     *
     * ```html
     *  <igx-grid
     *    [data]="data"
     *    (onRowSelectionChange)="handleRowSelection($event)">
     *  </igx-grid>
     * ```
     */
    get grid() {
        return this.gridAPI.grid;
    }
    /**
     * Gets the ID of the row.
     * A row in the grid is identified either by:
     * - primaryKey data value,
     * - the whole rowData, if the primaryKey is omitted.
     *
     * ```typescript
     * let rowID = this.grid.selectedRows[2].rowID;
     * ```
     */
    get rowID() {
        const primaryKey = this.grid.primaryKey;
        return primaryKey ? this._rowData[primaryKey] : this._rowData;
    }
    /**
     * The native DOM element representing the row. Could be null in certain environments.
     *
     * ```typescript
     * // get the nativeElement of the second selected row
     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;
     * ```
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    ngAfterViewInit() {
        // If the template of the row changes, the forOf in it is recreated and is not detected by the grid and rows can't be scrolled.
        this._virtDirRow.changes.pipe(takeUntil(this.destroy$)).subscribe(() => this.grid.resetHorizontalForOfs());
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden
     * @internal
     */
    onClick(event) {
        if (this.grid.rowSelection === 'none' || this.deleted) {
            return;
        }
        if (event.shiftKey && this.grid.rowSelection === 'multiple') {
            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);
            return;
        }
        this.selectionService.selectRowById(this.rowID, !event.ctrlKey, event);
    }
    /**
     * @hidden
     * @internal
     */
    showActionStrip(event) {
        if (this.grid.actionStrip) {
            this.grid.actionStrip.show(this);
        }
    }
    /**
     * @hidden
     */
    onRowSelectorClick(event) {
        event.stopPropagation();
        if (event.shiftKey && this.grid.rowSelection === 'multiple') {
            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);
            return;
        }
        this.selected ? this.selectionService.deselectRow(this.rowID, event) :
            this.selectionService.selectRowById(this.rowID, false, event);
    }
    /**
     * Updates the specified row object and the data source record with the passed value.
     * This method emits `onEditDone` event.
     *
     * ```typescript
     * // update the second selected row's value
     * let newValue = "Apple";
     * this.grid.selectedRows[1].update(newValue);
     * ```
     */
    update(value) {
        const crudService = this.crudService;
        if (crudService.cellInEditMode && crudService.cell.id.rowID === this.rowID) {
            this.grid.endEdit(false);
        }
        const row = new IgxRow(this.rowID, this.index, this.rowData, this.grid);
        this.gridAPI.update_row(row, value);
        this.cdr.markForCheck();
    }
    /**
     * Removes the specified row from the grid's data source.
     * This method emits `onRowDeleted` event.
     *
     * ```typescript
     * // delete the third selected row from the grid
     * this.grid.selectedRows[2].delete();
     * ```
     */
    delete() {
        this.grid.deleteRowById(this.rowID);
    }
    isCellActive(visibleColumnIndex) {
        const node = this.grid.navigation.activeNode;
        return node ? node.row === this.index && node.column === visibleColumnIndex : false;
    }
    /**
     * Pins the specified row.
     * This method emits `onRowPinning` event.
     *
     * ```typescript
     * // pin the selected row from the grid
     * this.grid.selectedRows[0].pin();
     * ```
     */
    pin() {
        return this.grid.pinRow(this.rowID);
    }
    /**
     * Unpins the specified row.
     * This method emits `onRowPinning` event.
     *
     * ```typescript
     * // unpin the selected row from the grid
     * this.grid.selectedRows[0].unpin();
     * ```
     */
    unpin() {
        return this.grid.unpinRow(this.rowID);
    }
    /**
     * @hidden
     */
    get rowCheckboxAriaLabel() {
        return this.grid.primaryKey ?
            this.selected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :
            this.selected ? 'Deselect row' : 'Select row';
    }
    /**
     * @hidden
     */
    ngDoCheck() {
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    shouldDisplayPinnedChip(visibleColumnIndex) {
        return this.pinned && this.disabled && visibleColumnIndex === 0;
    }
    animationEndHandler() {
        this.onAnimationEnd.emit(this);
    }
    /**
     * @hidden
     */
    resolveClasses() {
        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;
        const selectedClass = this.selected ? 'igx-grid__tr--selected' : '';
        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';
        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';
        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';
        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';
        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';
        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}
         ${deletedClass} ${mrlClass} ${dragClass}`.trim();
    }
    /**
     * @hidden
     */
    get resolveDragIndicatorClasses() {
        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';
        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';
        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;
    }
    /**
     * Spawns the add row UI for the specific row.
     * @example
     * ```typescript
     * const row = this.grid1.getRowByIndex(1);
     * row.beginAddRow();
     * ```
     */
    beginAddRow() {
        this.grid.beginAddRowByIndex(this.rowID, this.index);
    }
}
IgxRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxRowBaseComponent]'
            },] }
];
IgxRowDirective.ctorParameters = () => [
    { type: GridBaseAPIService },
    { type: IgxGridCRUDService },
    { type: IgxGridSelectionService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
IgxRowDirective.propDecorators = {
    onAnimationEnd: [{ type: Output }],
    rowData: [{ type: Input }],
    index: [{ type: Input }],
    disabled: [{ type: Input }, { type: HostBinding, args: ['attr.aria-disabled',] }, { type: HostBinding, args: ['class.igx-grid__tr--disabled',] }],
    addRow: [{ type: Input }],
    rowHeight: [{ type: HostBinding, args: ['style.min-height.px',] }],
    gridID: [{ type: Input }],
    _virtDirRow: [{ type: ViewChildren, args: ['igxDirRef', { read: IgxGridForOfDirective },] }],
    checkboxElement: [{ type: ViewChild, args: [forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent },] }],
    _cells: [{ type: ViewChildren, args: ['cell',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    dataRowIndex: [{ type: HostBinding, args: ['attr.data-rowIndex',] }],
    styleClasses: [{ type: HostBinding, args: ['class',] }],
    selected: [{ type: Input }, { type: HostBinding, args: ['attr.aria-selected',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    showActionStrip: [{ type: HostListener, args: ['mouseenter', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,