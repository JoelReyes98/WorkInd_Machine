import { ChangeDetectionStrategy, Component, HostBinding, Input, forwardRef, TemplateRef, ContentChild, ViewChild } from '@angular/core';
import { IgxTreeGridAPIService } from './tree-grid-api.service';
import { IgxGridBaseDirective } from '../grid-base.directive';
import { GridBaseAPIService } from '../api.service';
import { TransactionType, TransactionEventOrigin } from '../../services/transaction/transaction';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { IgxGridSelectionService, IgxGridCRUDService } from '../selection/selection.service';
import { mergeObjects } from '../../core/utils';
import { first, takeUntil } from 'rxjs/operators';
import { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';
import { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';
import { IgxGridNavigationService } from '../grid-navigation.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../directives/for-of/for_of.directive';
import * as ɵngcc3 from '../../directives/toggle/toggle.directive';
import * as ɵngcc4 from '../grid.common';
import * as ɵngcc5 from '../selection/drag-select.directive';
import * as ɵngcc6 from '../../snackbar/snackbar.component';
import * as ɵngcc7 from '../selection/row-selectors';
import * as ɵngcc8 from '../toolbar/grid-toolbar.component';
import * as ɵngcc9 from '../moving/moving.drop.directive';
import * as ɵngcc10 from '../headers/grid-header-group.component';
import * as ɵngcc11 from '../filtering/base/grid-filtering-row.component';
import * as ɵngcc12 from '../../progressbar/progressbar.component';
import * as ɵngcc13 from '../../directives/template-outlet/template_outlet.directive';
import * as ɵngcc14 from './tree-grid-row.component';
import * as ɵngcc15 from '../summaries/summary-row.component';
import * as ɵngcc16 from '../../paginator/paginator.component';
import * as ɵngcc17 from '../../directives/button/button.directive';
import * as ɵngcc18 from '../../directives/ripple/ripple.directive';
import * as ɵngcc19 from '../grid.rowEdit.directive';
import * as ɵngcc20 from '../../icon/icon.component';
import * as ɵngcc21 from '../../checkbox/checkbox.component';
import * as ɵngcc22 from '../resizing/resizer.component';
import * as ɵngcc23 from '../common/pipes';
import * as ɵngcc24 from './tree-grid.summary.pipe';
import * as ɵngcc25 from './tree-grid.pipes';
import * as ɵngcc26 from './tree-grid.filtering.pipe';
import * as ɵngcc27 from '../summaries/grid-root-summary.pipe';

const _c0 = ["dragIndicatorIconBase"];
const _c1 = ["record_template"];
const _c2 = ["summary_template"];
function IgxTreeGridComponent_igx_grid_toolbar_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-toolbar", 66, 67);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("max-width", ctx_r0.outerWidth, "px")("flex-basis", ctx_r0.outerWidth, "px");
    ɵngcc0.ɵɵproperty("gridID", ctx_r0.id)("displayDensity", ctx_r0.displayDensity);
} }
function IgxTreeGridComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 68);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("left", ctx_r2.featureColumnsWidth, "px");
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r2.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxTreeGridComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 69);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("left", ctx_r3.pinnedWidth, "px");
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r3.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxTreeGridComponent_ng_container_7_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r70 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 70, 71);
    ɵngcc0.ɵɵlistener("pointerdown", function IgxTreeGridComponent_ng_container_7_Template_div_pointerdown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r70); return $event.preventDefault(); });
    ɵngcc0.ɵɵelementStart(3, "div", 72);
    ɵngcc0.ɵɵtemplate(4, IgxTreeGridComponent_ng_container_7_ng_container_4_Template, 1, 0, "ng-container", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    const _r59 = ɵngcc0.ɵɵreference(95);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.dragIndicatorIconTemplate ? ctx_r4.dragIndicatorIconTemplate : _r59);
} }
function IgxTreeGridComponent_ng_container_8_3_ng_template_0_Template(rf, ctx) { }
function IgxTreeGridComponent_ng_container_8_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridComponent_ng_container_8_3_ng_template_0_Template, 0, 0, "ng-template", null, 76, ɵngcc0.ɵɵtemplateRefExtractor);
} }
const _c3 = function (a0) { return { "igx-grid__cbx-selection--push": a0 }; };
const _c4 = function (a0, a1) { return { selectedCount: a0, totalCount: a1 }; };
const _c5 = function (a0) { return { $implicit: a0 }; };
function IgxTreeGridComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    const _r76 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 73, 74);
    ɵngcc0.ɵɵlistener("click", function IgxTreeGridComponent_ng_container_8_Template_div_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r76); const ctx_r75 = ɵngcc0.ɵɵnextContext(); return ctx_r75.onHeaderSelectorClick($event); })("pointerdown", function IgxTreeGridComponent_ng_container_8_Template_div_pointerdown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r76); return $event.preventDefault(); });
    ɵngcc0.ɵɵtemplate(3, IgxTreeGridComponent_ng_container_8_3_Template, 2, 0, undefined, 75);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    const _r61 = ɵngcc0.ɵɵreference(97);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c3, ctx_r5.filteringService.isFilterRowVisible));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.headSelectorTemplate ? ctx_r5.headSelectorTemplate : _r61)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(8, _c5, ɵngcc0.ɵɵpureFunction2(5, _c4, ctx_r5.selectionService.filteredSelectedRowIds.length, ctx_r5.totalRowsCountAfterFilter)));
} }
function IgxTreeGridComponent_ng_container_9_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-header-group", 78);
} if (rf & 2) {
    const col_r79 = ctx.$implicit;
    const ctx_r78 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("min-width", ctx_r78.getHeaderGroupWidth(col_r79))("flex-basis", ctx_r78.getHeaderGroupWidth(col_r79));
    ɵngcc0.ɵɵproperty("column", col_r79)("gridID", ctx_r78.id);
} }
function IgxTreeGridComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridComponent_ng_container_9_ng_template_1_Template, 1, 6, "ng-template", 77);
    ɵngcc0.ɵɵpipe(2, "igxTopLevel");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r6.pinnedColumns));
} }
function IgxTreeGridComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-header-group", 78);
} if (rf & 2) {
    const col_r80 = ctx.$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("min-width", ctx_r8.getHeaderGroupWidth(col_r80))("flex-basis", ctx_r8.getHeaderGroupWidth(col_r80));
    ɵngcc0.ɵɵproperty("column", col_r80)("gridID", ctx_r8.id);
} }
function IgxTreeGridComponent_ng_container_13_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-header-group", 78);
} if (rf & 2) {
    const col_r82 = ctx.$implicit;
    const ctx_r81 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("min-width", ctx_r81.getHeaderGroupWidth(col_r82))("flex-basis", ctx_r81.getHeaderGroupWidth(col_r82))("left", col_r82.rightPinnedOffset);
    ɵngcc0.ɵɵproperty("column", col_r82)("gridID", ctx_r81.id);
} }
function IgxTreeGridComponent_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridComponent_ng_container_13_ng_template_1_Template, 1, 8, "ng-template", 77);
    ɵngcc0.ɵɵpipe(2, "igxTopLevel");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r9.pinnedColumns));
} }
function IgxTreeGridComponent_igx_grid_filtering_row_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-filtering-row", 79, 80);
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("column", ctx_r10.filteringService.filteredColumn);
} }
function IgxTreeGridComponent_igx_circular_bar_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-circular-bar", 81);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("indeterminate", true);
} }
function IgxTreeGridComponent_span_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 82);
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r13.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxTreeGridComponent_span_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 68);
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r15.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxTreeGridComponent_span_24_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 69);
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("left", ctx_r16.pinnedWidth, "px");
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r16.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxTreeGridComponent_ng_template_25_ng_container_0_div_1_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_ng_template_25_ng_container_0_div_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridComponent_ng_template_25_ng_container_0_div_1_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 75);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const rowData_r89 = ctx.$implicit;
    const rowIndex_r90 = ctx.index;
    const ctx_r88 = ɵngcc0.ɵɵnextContext(4);
    const _r25 = ɵngcc0.ɵɵreference(44);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r25)("ngTemplateOutletContext", ctx_r88.getContext(rowData_r89, rowIndex_r90, true));
} }
const _c6 = function (a0, a1) { return { "igx-grid__tr--pinned-bottom": a0, "igx-grid__tr--pinned-top": a1 }; };
function IgxTreeGridComponent_ng_template_25_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 84, 85);
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridComponent_ng_template_25_ng_container_0_div_1_ng_container_2_Template, 2, 2, "ng-container", 86);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const pinnedData_r85 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r86 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("width", ctx_r86.calcWidth, "px");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(4, _c6, !ctx_r86.isRowPinningToTop, ctx_r86.isRowPinningToTop));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", pinnedData_r85);
} }
function IgxTreeGridComponent_ng_template_25_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridComponent_ng_template_25_ng_container_0_div_1_Template, 3, 7, "div", 83);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const pinnedData_r85 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", pinnedData_r85.length > 0);
} }
const _c7 = function (a0, a1, a2, a3, a4, a5, a6) { return [a0, a1, a2, a3, a4, a5, a6, true]; };
const _c8 = function (a0, a1, a2, a3, a4) { return [a0, a1, a2, a3, a4, true]; };
function IgxTreeGridComponent_ng_template_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridComponent_ng_template_25_ng_container_0_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵpipe(1, "gridAddRow");
    ɵngcc0.ɵɵpipe(2, "treeGridSorting");
    ɵngcc0.ɵɵpipe(3, "treeGridFiltering");
    ɵngcc0.ɵɵpipe(4, "gridRowPinning");
    ɵngcc0.ɵɵpipe(5, "treeGridNormalizeRecord");
    ɵngcc0.ɵɵpipe(6, "visibleColumns");
    ɵngcc0.ɵɵpipe(7, "treeGridTransaction");
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind3(1, 1, ɵngcc0.ɵɵpipeBindV(2, 5, ɵngcc0.ɵɵpureFunction5(44, _c8, ɵngcc0.ɵɵpipeBindV(3, 12, ɵngcc0.ɵɵpureFunction7(36, _c7, ɵngcc0.ɵɵpipeBind4(4, 21, ɵngcc0.ɵɵpipeBind2(5, 26, ɵngcc0.ɵɵpipeBind2(6, 29, ɵngcc0.ɵɵpipeBind3(7, 32, ctx_r18.data, ctx_r18.id, ctx_r18.pipeTrigger), ctx_r18.hasVisibleColumns), ctx_r18.pipeTrigger), ctx_r18.id, true, ctx_r18.pipeTrigger), ctx_r18.filteringExpressionsTree, ctx_r18.filterStrategy, ctx_r18.advancedFilteringExpressionsTree, ctx_r18.id, ctx_r18.pipeTrigger, ctx_r18.filteringPipeTrigger)), ctx_r18.sortingExpressions, ctx_r18.sortStrategy, ctx_r18.id, ctx_r18.pipeTrigger)), true, ctx_r18.pipeTrigger));
} }
function IgxTreeGridComponent_ng_container_27_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_ng_template_28_ng_template_0_Template(rf, ctx) { }
function IgxTreeGridComponent_ng_template_28_Template(rf, ctx) { if (rf & 1) {
    const _r97 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridComponent_ng_template_28_ng_template_0_Template, 0, 0, "ng-template", 87);
    ɵngcc0.ɵɵlistener("onCachedViewLoaded", function IgxTreeGridComponent_ng_template_28_Template_ng_template_onCachedViewLoaded_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r97); const ctx_r96 = ɵngcc0.ɵɵnextContext(); return ctx_r96.cachedViewLoaded($event); });
} if (rf & 2) {
    const rowData_r93 = ctx.$implicit;
    const rowIndex_r94 = ctx.index;
    const ctx_r21 = ɵngcc0.ɵɵnextContext();
    const _r27 = ɵngcc0.ɵɵreference(46);
    const _r23 = ɵngcc0.ɵɵreference(42);
    ɵngcc0.ɵɵproperty("igxTemplateOutlet", ctx_r21.isSummaryRow(rowData_r93) ? _r27 : _r23)("igxTemplateOutletContext", ctx_r21.getContext(rowData_r93, rowIndex_r94, false));
} }
function IgxTreeGridComponent_ng_container_40_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_ng_template_41_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-tree-grid-row", 88, 89);
} if (rf & 2) {
    const rowIndex_r98 = ctx.index;
    const disabledRow_r99 = ctx.disabled;
    const rowData_r100 = ctx.$implicit;
    const isAddRow_r101 = ctx.addRow;
    const ctx_r24 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("gridID", ctx_r24.id)("index", rowIndex_r98)("treeRow", rowData_r100)("disabled", disabledRow_r99)("addRow", isAddRow_r101);
} }
function IgxTreeGridComponent_ng_template_43_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-tree-grid-row", 90, 91);
} if (rf & 2) {
    const rowIndex_r103 = ctx.index;
    const rowData_r104 = ctx.$implicit;
    const isAddRow_r105 = ctx.addRow;
    const ctx_r26 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("gridID", ctx_r26.id)("index", rowIndex_r103)("treeRow", rowData_r104)("addRow", isAddRow_r105);
} }
function IgxTreeGridComponent_ng_template_45_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-summary-row", 92, 93);
} if (rf & 2) {
    const rowIndex_r108 = ctx.index;
    const rowData_r109 = ctx.$implicit;
    const ctx_r28 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("gridID", ctx_r28.id)("summaries", rowData_r109.summaries)("firstCellIndentation", rowData_r109.cellIndentation)("index", rowIndex_r108);
} }
function IgxTreeGridComponent_ng_container_47_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_span_51_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 82);
} if (rf & 2) {
    const ctx_r31 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("igxColumnMovingDrop", ctx_r31.headerContainer);
    ɵngcc0.ɵɵattribute("droppable", true);
} }
function IgxTreeGridComponent_ng_template_55_Template(rf, ctx) { }
function IgxTreeGridComponent_igx_grid_summary_row_64_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-summary-row", 94, 93);
    ɵngcc0.ɵɵpipe(2, "igxGridSummaryDataPipe");
} if (rf & 2) {
    const ctx_r36 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("width", ctx_r36.calcWidth, "px")("height", ctx_r36.summariesHeight, "px");
    ɵngcc0.ɵɵproperty("gridID", ctx_r36.id)("summaries", ɵngcc0.ɵɵpipeBind2(2, 7, ctx_r36.id, ctx_r36.summaryService.retriggerRootPipe))("index", ctx_r36.dataView.length);
} }
function IgxTreeGridComponent_ng_template_70_Template(rf, ctx) { }
function IgxTreeGridComponent_ng_container_76_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_ng_container_76_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridComponent_ng_container_76_ng_container_1_Template, 1, 0, "ng-container", 75);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r41 = ɵngcc0.ɵɵnextContext();
    const _r42 = ɵngcc0.ɵɵreference(78);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r41.paginationTemplate ? ctx_r41.paginationTemplate : _r42)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c5, ctx_r41));
} }
function IgxTreeGridComponent_ng_template_77_Template(rf, ctx) { if (rf & 1) {
    const _r114 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-paginator", 95);
    ɵngcc0.ɵɵlistener("pageChange", function IgxTreeGridComponent_ng_template_77_Template_igx_paginator_pageChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r114); const ctx_r113 = ɵngcc0.ɵɵnextContext(); return ctx_r113.page = $event; })("perPageChange", function IgxTreeGridComponent_ng_template_77_Template_igx_paginator_perPageChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r114); const ctx_r115 = ɵngcc0.ɵɵnextContext(); return ctx_r115.perPage = $event; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r43 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("overlaySettings", ctx_r43.paginatorSettings)("displayDensity", ctx_r43.displayDensity)("page", ctx_r43.page)("totalRecords", ctx_r43.totalRecords)("perPage", ctx_r43.perPage);
} }
function IgxTreeGridComponent_ng_template_79_span_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_ng_template_79_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridComponent_ng_template_79_span_3_ng_container_1_Template, 1, 0, "ng-container", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r116 = ɵngcc0.ɵɵnextContext(2);
    const _r48 = ɵngcc0.ɵɵreference(84);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r116.addRowEmptyTemplate || _r48);
} }
function IgxTreeGridComponent_ng_template_79_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 96);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, IgxTreeGridComponent_ng_template_79_span_3_Template, 2, 1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r45 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r45.emptyFilteredGridMessage);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r45.showAddButton);
} }
function IgxTreeGridComponent_ng_template_81_span_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_ng_template_81_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, IgxTreeGridComponent_ng_template_81_span_3_ng_container_1_Template, 1, 0, "ng-container", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r118 = ɵngcc0.ɵɵnextContext(2);
    const _r48 = ɵngcc0.ɵɵreference(84);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r118.addRowEmptyTemplate || _r48);
} }
function IgxTreeGridComponent_ng_template_81_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 96);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, IgxTreeGridComponent_ng_template_81_span_3_Template, 2, 1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r47 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r47.emptyGridMessage);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r47.showAddButton);
} }
function IgxTreeGridComponent_ng_template_83_Template(rf, ctx) { if (rf & 1) {
    const _r121 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 97);
    ɵngcc0.ɵɵlistener("click", function IgxTreeGridComponent_ng_template_83_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r121); const ctx_r120 = ɵngcc0.ɵɵnextContext(); return ctx_r120.beginAddRowByIndex(null, -1); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r49 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r49.resourceStrings.igx_grid_add_row_label, " ");
} }
function IgxTreeGridComponent_ng_template_85_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 98);
    ɵngcc0.ɵɵelement(1, "igx-circular-bar", 81);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("indeterminate", true);
} }
function IgxTreeGridComponent_div_87_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c9 = function (a0, a1) { return { rowChangesCount: a0, endEdit: a1 }; };
function IgxTreeGridComponent_div_87_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12, 99);
    ɵngcc0.ɵɵelementStart(2, "div", 100);
    ɵngcc0.ɵɵtemplate(3, IgxTreeGridComponent_div_87_ng_container_3_Template, 1, 0, "ng-container", 75);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r52 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("className", ctx_r52.bannerClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r52.rowEditContainer)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(3, _c9, ctx_r52.rowChangesCount, ctx_r52.endEdit.bind(ctx_r52)));
} }
function IgxTreeGridComponent_ng_template_88_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r54 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" You have ", ctx_r54.rowChangesCount, " changes in this row\n");
} }
function IgxTreeGridComponent_ng_template_90_Template(rf, ctx) { if (rf & 1) {
    const _r125 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 101);
    ɵngcc0.ɵɵlistener("click", function IgxTreeGridComponent_ng_template_90_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r125); const ctx_r124 = ɵngcc0.ɵɵnextContext(); return ctx_r124.endRowEdit(false, $event); });
    ɵngcc0.ɵɵtext(1, "Cancel");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "button", 101);
    ɵngcc0.ɵɵlistener("click", function IgxTreeGridComponent_ng_template_90_Template_button_click_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r125); const ctx_r126 = ɵngcc0.ɵɵnextContext(); return ctx_r126.endRowEdit(true, $event); });
    ɵngcc0.ɵɵtext(3, "Done");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxTreeGridComponent_ng_template_92_div_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_ng_template_92_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 105);
    ɵngcc0.ɵɵelementStart(1, "span", 106);
    ɵngcc0.ɵɵtemplate(2, IgxTreeGridComponent_ng_template_92_div_0_ng_container_2_Template, 1, 0, "ng-container", 75);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r127 = ɵngcc0.ɵɵnextContext(2);
    const _r53 = ɵngcc0.ɵɵreference(89);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r127.rowEditText ? ctx_r127.rowEditText : _r53)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c5, ctx_r127.rowChangesCount));
} }
function IgxTreeGridComponent_ng_template_92_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxTreeGridComponent_ng_template_92_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxTreeGridComponent_ng_template_92_div_0_Template, 3, 4, "div", 102);
    ɵngcc0.ɵɵelementStart(1, "div", 103);
    ɵngcc0.ɵɵelementStart(2, "div", 104);
    ɵngcc0.ɵɵtemplate(3, IgxTreeGridComponent_ng_template_92_ng_container_3_Template, 1, 0, "ng-container", 75);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r58 = ɵngcc0.ɵɵnextContext();
    const _r55 = ɵngcc0.ɵɵreference(91);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r58.crudService.row == null ? null : ctx_r58.crudService.row.isAddRow));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r58.rowEditActions ? ctx_r58.rowEditActions : _r55)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(3, _c5, ctx_r58.endEdit.bind(ctx_r58)));
} }
function IgxTreeGridComponent_ng_template_94_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 107);
    ɵngcc0.ɵɵtext(1, "drag_indicator");
    ɵngcc0.ɵɵelementEnd();
} }
const _c10 = function (a0) { return { "visibility": a0 }; };
function IgxTreeGridComponent_ng_template_96_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 108);
    ɵngcc0.ɵɵelement(1, "igx-checkbox", 109, 110);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const context_r130 = ctx.$implicit;
    const ctx_r62 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("tabindex", -1)("checked", context_r130.selectedCount > 0 && context_r130.totalCount === context_r130.selectedCount)("ngStyle", ɵngcc0.ɵɵpureFunction1(6, _c10, ctx_r62.isMultiRowSelectionEnabled ? "visible" : "hidden"))("readonly", true)("indeterminate", context_r130.selectedCount > 0 && context_r130.selectedCount !== context_r130.totalCount)("aria-label", ctx_r62.headSelectorBaseAriaLabel);
} }
function IgxTreeGridComponent_igx_grid_column_resizer_98_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-grid-column-resizer");
} }
const _c11 = [[["igx-grid-footer"]]];
const _c12 = function (a0, a1, a2, a3, a4, a5) { return [a0, a1, a2, a3, a4, a5]; };
const _c13 = function (a0, a1, a2, a3, a4, a5, a6) { return [a0, a1, a2, a3, a4, a5, a6]; };
const _c14 = function (a0, a1, a2, a3, a4) { return [a0, a1, a2, a3, a4]; };
const _c15 = function (a0, a1, a2, a3, a4, a5, a6, a7) { return [a0, a1, a2, a3, a4, a5, a6, a7]; };
const _c16 = function () { return []; };
const _c17 = ["igx-grid-footer"];
let NEXT_ID = 0;
/**
 * **Ignite UI for Angular Tree Grid** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid/grid)
 *
 * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and
 * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.
 *
 * Example:
 * ```html
 * <igx-tree-grid [data]="employeeData" primaryKey="employeeID" foreignKey="PID" autoGenerate="false">
 *   <igx-column field="first" header="First Name"></igx-column>
 *   <igx-column field="last" header="Last Name"></igx-column>
 *   <igx-column field="role" header="Role"></igx-column>
 * </igx-tree-grid>
 * ```
 */
export class IgxTreeGridComponent extends IgxGridBaseDirective {
    constructor() {
        super(...arguments);
        this._id = `igx-tree-grid-${NEXT_ID++}`;
        /**
         * Returns a map of all `ITreeGridRecord`s.
         * ```typescript
         * // gets the record with primaryKey=2
         * const states = this.grid.records.get(2);
         * ```
         * @memberof IgxTreeGridComponent
         */
        this.records = new Map();
        /**
         * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.
         * ```typescript
         * // gets the processed record with primaryKey=2
         * const states = this.grid.processedRecords.get(2);
         * ```
         * @memberof IgxTreeGridComponent
         */
        this.processedRecords = new Map();
        /**
         * An @Input property indicating whether child records should be deleted when their parent gets deleted.
         * By default it is set to true and deletes all children along with the parent.
         * ```html
         * <igx-tree-grid [data]="employeeData" [primaryKey]="'employeeID'" [foreignKey]="'parentID'" cascadeOnDelete="false">
         * </igx-tree-grid>
         * ```
         * @memberof IgxTreeGridComponent
         */
        this.cascadeOnDelete = true;
        this._expansionDepth = Infinity;
        /**
         * @hidden
         */
        this.loadingRows = new Set();
        this._filteredData = null;
    }
    /**
     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-tree-grid [id]="'igx-tree-grid-1'"></igx-tree-grid>
     * ```
     * @memberof IgxTreeGridComponent
     */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.
     * ```html
     * <igx-tree-grid [data]="Data" [autoGenerate]="true"></igx-tree-grid>
     * ```
     * @memberof IgxTreeGridComponent
     */
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value || [];
        this.summaryService.clearSummaryCache();
        if (this.shouldGenerate) {
            this.setupColumns();
        }
        this.cdr.markForCheck();
    }
    /**
     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.
     * ```typescript
     * let filteredData = this.grid.filteredData;
     * ```
     * @memberof IgxTreeGridComponent
     */
    get filteredData() {
        return this._filteredData;
    }
    /**
     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.
     * ```typescript
     * this.grid.filteredData = [{
     *       ID: 1,
     *       Name: "A"
     * }];
     * ```
     * @memberof IgxTreeGridComponent
     */
    set filteredData(value) {
        this._filteredData = value;
    }
    /**
     * Get transactions service for the grid.
     * @experimental @hidden
     */
    get transactions() {
        return this._transactions;
    }
    /**
     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is
     * set to `Infinity` which means all levels would be expanded.
     * ```html
     * <igx-tree-grid #grid [data]="employeeData" [childDataKey]="'employees'" expansionDepth="1" [autoGenerate]="true"></igx-tree-grid>
     * ```
     * @memberof IgxTreeGridComponent
     */
    get expansionDepth() {
        return this._expansionDepth;
    }
    set expansionDepth(value) {
        this._expansionDepth = value;
        this.notifyChanges();
    }
    /**
     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.
     * ```html
     * <ng-template #rowLoadingTemplate>
     *     <igx-icon fontSet="material">loop</igx-icon>
     * </ng-template>
     *
     * <igx-tree-grid #grid [data]="employeeData" [primaryKey]="'ID'" [foreignKey]="'parentID'"
     *                [loadChildrenOnDemand]="loadChildren"
     *                [rowLoadingIndicatorTemplate]="rowLoadingTemplate">
     * </igx-tree-grid>
     * ```
     * @memberof IgxTreeGridComponent
     */
    get rowLoadingIndicatorTemplate() {
        return this._rowLoadingIndicatorTemplate;
    }
    set rowLoadingIndicatorTemplate(value) {
        this._rowLoadingIndicatorTemplate = value;
        this.notifyChanges();
    }
    // Kind of stupid
    get _gridAPI() {
        return this.gridAPI;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        super.ngOnInit();
        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {
            this.loadChildrenOnRowExpansion(args);
        });
        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe((event) => {
            let actions = [];
            if (event.origin === TransactionEventOrigin.REDO) {
                actions = event.actions ? event.actions.filter(x => x.transaction.type === TransactionType.DELETE) : [];
            }
            else if (event.origin === TransactionEventOrigin.UNDO) {
                actions = event.actions ? event.actions.filter(x => x.transaction.type === TransactionType.ADD) : [];
            }
            if (actions.length) {
                for (const action of actions) {
                    this.deselectChildren(action.transaction.id);
                }
            }
        });
    }
    ngDoCheck() {
        super.ngDoCheck();
    }
    /**
     * @hidden
     */
    ngAfterContentInit() {
        if (this.rowLoadingTemplate) {
            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;
        }
        super.ngAfterContentInit();
    }
    loadChildrenOnRowExpansion(args) {
        if (this.loadChildrenOnDemand) {
            const parentID = args.rowID;
            if (args.expanded && !this._expansionStates.has(parentID)) {
                this.loadingRows.add(parentID);
                this.loadChildrenOnDemand(parentID, children => {
                    this.loadingRows.delete(parentID);
                    this.addChildRows(children, parentID);
                    this.notifyChanges();
                });
            }
        }
    }
    addChildRows(children, parentID) {
        if (this.primaryKey && this.foreignKey) {
            for (const child of children) {
                child[this.foreignKey] = parentID;
            }
            this.data.push(...children);
        }
        else if (this.childDataKey) {
            let parent = this.records.get(parentID);
            let parentData = parent.data;
            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {
                const path = [];
                while (parent) {
                    path.push(parent.rowID);
                    parent = parent.parent;
                }
                let collection = this.data;
                let record;
                for (let i = path.length - 1; i >= 0; i--) {
                    const pid = path[i];
                    record = collection.find(r => r[this.primaryKey] === pid);
                    if (!record) {
                        break;
                    }
                    collection = record[this.childDataKey];
                }
                if (record) {
                    parentData = record;
                }
            }
            parentData[this.childDataKey] = children;
        }
        this.selectionService.clearHeaderCBState();
        this._pipeTrigger++;
    }
    findRecordIndexInView(rec) {
        return this.dataView.findIndex(x => x.data[this.primaryKey] === rec[this.primaryKey]);
    }
    getUnpinnedIndexById(id) {
        return this.unpinnedRecords.findIndex(x => x.data[this.primaryKey] === id);
    }
    cloneMap(mapIn) {
        const mapCloned = new Map();
        mapIn.forEach((value, key, mapObj) => {
            mapCloned.set(key, value);
        });
        return mapCloned;
    }
    getDefaultExpandState(record) {
        return record.children && record.children.length && record.level < this.expansionDepth;
    }
    /**
     * Expands all rows.
     * ```typescript
     * this.grid.expandAll();
     * ```
     * @memberof IgxTreeGridComponent
     */
    expandAll() {
        this._expansionDepth = Infinity;
        this.expansionStates = new Map();
    }
    /**
     * Collapses all rows.
     *
     * ```typescript
     * this.grid.collapseAll();
     *  ```
     * @memberof IgxTreeGridComponent
     */
    collapseAll() {
        this._expansionDepth = 0;
        this.expansionStates = new Map();
    }
    /**
     * @hidden
     */
    refreshGridState(args) {
        super.refreshGridState();
        if (this.primaryKey && this.foreignKey) {
            const rowID = args.data[this.foreignKey];
            this.summaryService.clearSummaryCache({ rowID: rowID });
            this._pipeTrigger++;
            this.cdr.detectChanges();
        }
    }
    /**
     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created
     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches
     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.
     * ```typescript
     * const record = {
     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,
     *     Name: this.newRecord
     * };
     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.
     * ```
     * @param data
     * @param parentRowID
     * @memberof IgxTreeGridComponent
     */
    addRow(data, parentRowID) {
        super.endEdit(true);
        this.gridAPI.addRowToData(data, parentRowID);
        this.onRowAdded.emit({ data });
        this._pipeTrigger++;
        this.notifyChanges();
    }
    /**
     * @hidden
     * @internal
     */
    _getParentRecordId() {
        var _a;
        if (this.addRowParent.asChild) {
            return super._getParentRecordId();
        }
        else if (this.addRowParent.rowID !== null && this.addRowParent.rowID !== undefined) {
            const spawnedForRecord = this._gridAPI.get_rec_by_id(this.addRowParent.rowID);
            return (_a = spawnedForRecord === null || spawnedForRecord === void 0 ? void 0 : spawnedForRecord.parent) === null || _a === void 0 ? void 0 : _a.rowID;
        }
    }
    /** @hidden */
    deleteRowById(rowId) {
        //  if this is flat self-referencing data, and CascadeOnDelete is set to true
        //  and if we have transactions we should start pending transaction. This allows
        //  us in case of delete action to delete all child rows as single undo action
        this._gridAPI.deleteRowById(rowId);
    }
    /** @hidden */
    generateRowPath(rowId) {
        const path = [];
        let record = this.records.get(rowId);
        while (record.parent) {
            path.push(record.parent.rowID);
            record = record.parent;
        }
        return path.reverse();
    }
    /**
     * @hidden @internal
     */
    getDataBasedBodyHeight() {
        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?
            0 : this.defaultTargetBodyHeight;
    }
    /**
     * @hidden
     */
    scrollTo(row, column) {
        let delayScrolling = false;
        let record;
        if (typeof (row) !== 'number') {
            const rowData = row;
            const rowID = this._gridAPI.get_row_id(rowData);
            record = this.processedRecords.get(rowID);
            this._gridAPI.expand_path_to_record(record);
            if (this.paging) {
                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);
                const page = Math.floor(rowIndex / this.perPage);
                if (this.page !== page) {
                    delayScrolling = true;
                    this.page = page;
                }
            }
        }
        if (delayScrolling) {
            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {
                this.scrollDirective(this.verticalScrollContainer, typeof (row) === 'number' ? row : this.unpinnedDataView.indexOf(record));
            });
        }
        else {
            this.scrollDirective(this.verticalScrollContainer, typeof (row) === 'number' ? row : this.unpinnedDataView.indexOf(record));
        }
        this.scrollToHorizontally(column);
    }
    /**
     * @hidden
     */
    getContext(rowData, rowIndex, pinned) {
        return {
            $implicit: this.isGhostRecord(rowData) || this.isAddRowRecord(rowData) ? rowData.recordRef : rowData,
            index: this.getDataViewIndex(rowIndex, pinned),
            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow',
            disabled: this.isGhostRecord(rowData) ? rowData.recordRef.isFilteredOutParent === undefined : false,
            addRow: this.isAddRowRecord(rowData) ? rowData.addRow : false
        };
    }
    /**
     * @hidden
     * @internal
     */
    getInitialPinnedIndex(rec) {
        return this._pinnedRecordIDs.indexOf(rec.rowID);
    }
    /**
     * @inheritdoc
     */
    getSelectedData(formatters = false, headers = false) {
        let source = [];
        const process = (record) => {
            if (record.summaries) {
                source.push(null);
                return;
            }
            source.push(record.data);
        };
        this.unpinnedDataView.forEach(process);
        source = this.isRowPinningToTop ? [...this.pinnedDataView, ...source] : [...source, ...this.pinnedDataView];
        return this.extractDataFromSelection(source, formatters, headers);
    }
    getEmptyRecordObjectFor(rec) {
        const row = Object.assign({}, rec);
        const data = rec || {};
        row.data = Object.assign({}, data);
        Object.keys(row.data).forEach(key => {
            // persist foreign key if one is set.
            if (this.foreignKey && key === this.foreignKey) {
                row.data[key] = rec.data[key];
            }
            else {
                row.data[key] = undefined;
            }
        });
        let id = this.generateRowID();
        const rootRecPK = this.foreignKey && this.rootRecords && this.rootRecords.length > 0 ?
            this.rootRecords[0].data[this.foreignKey] : null;
        if (id === rootRecPK) {
            // safeguard in case generated id matches the root foreign key.
            id = this.generateRowID();
        }
        row.rowID = id;
        row.data[this.primaryKey] = id;
        return row;
    }
    writeToData(rowIndex, value) {
        mergeObjects(this.flatData[rowIndex], value);
    }
    /**
     * @hidden
     */
    initColumns(collection, cb = null) {
        if (this.hasColumnLayouts) {
            // invalid configuration - tree grid should not allow column layouts
            // remove column layouts
            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);
            this.columnList.reset(nonColumnLayoutColumns);
        }
        super.initColumns(collection, cb);
    }
    /**
     * @description A recursive way to deselect all selected children of a given record
     * @param recordID ID of the record whose children to deselect
     * @hidden
     * @internal
     */
    deselectChildren(recordID) {
        const selectedChildren = [];
        const rowToDeselect = this.getRowByKey(recordID).treeRow;
        this.selectionService.deselectRow(recordID);
        this._gridAPI.get_selected_children(rowToDeselect, selectedChildren);
        if (selectedChildren.length > 0) {
            selectedChildren.forEach(x => this.deselectChildren(x));
        }
    }
}
IgxTreeGridComponent.ɵfac = function IgxTreeGridComponent_Factory(t) { return ɵIgxTreeGridComponent_BaseFactory(t || IgxTreeGridComponent); };
IgxTreeGridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxTreeGridComponent, selectors: [["igx-tree-grid"]], contentQueries: function IgxTreeGridComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, IgxRowLoadingIndicatorTemplateDirective, true, IgxRowLoadingIndicatorTemplateDirective);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rowLoadingTemplate = _t.first);
    } }, viewQuery: function IgxTreeGridComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dragIndicatorIconBase = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.recordTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.summaryTemplate = _t.first);
    } }, hostVars: 1, hostBindings: function IgxTreeGridComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
    } }, inputs: { cascadeOnDelete: "cascadeOnDelete", id: "id", data: "data", expansionDepth: "expansionDepth", rowLoadingIndicatorTemplate: "rowLoadingIndicatorTemplate", childDataKey: "childDataKey", foreignKey: "foreignKey", hasChildrenKey: "hasChildrenKey", loadChildrenOnDemand: "loadChildrenOnDemand" }, features: [ɵngcc0.ɵɵProvidersFeature([
            IgxGridSelectionService,
            IgxGridCRUDService,
            IgxGridSummaryService,
            IgxGridNavigationService,
            { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },
            { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxTreeGridComponent) },
            IgxFilteringService,
            IgxForOfSyncService,
            IgxForOfScrollSyncService
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c17, decls: 103, vars: 189, consts: [["role", "toolbar", 3, "max-width", "flex-basis", "gridID", "displayDensity", 4, "ngIf"], [1, "igx-grid__thead"], ["role", "rowgroup", "tabindex", "0", 1, "igx-grid__thead-wrapper", 3, "focus", "keydown"], ["theadRow", ""], ["role", "row", 1, "igx-grid__tr"], ["id", "left", "class", "igx-grid__scroll-on-drag-left", 3, "igxColumnMovingDrop", "left", 4, "ngIf"], ["id", "left", "class", "igx-grid__scroll-on-drag-pinned", 3, "igxColumnMovingDrop", "left", 4, "ngIf"], [4, "ngIf"], ["igxGridFor", "", 3, "igxGridForOf", "igxForScrollOrientation", "igxForScrollContainer", "igxForContainerSize", "igxForTrackBy", "igxForSizePropName"], ["hContainer", ""], [3, "column", 4, "ngIf"], [1, "igx-grid__thead-thumb", 3, "hidden"], ["igxToggle", ""], ["loadingOverlay", ""], [3, "indeterminate", 4, "ngIf"], ["id", "right", "class", "igx-grid__scroll-on-drag-right", 3, "igxColumnMovingDrop", 4, "ngIf"], ["igxGridBody", "", 1, "igx-grid__tbody", 3, "keydown.control.c", "copy"], ["tabindex", "0", "role", "rowgroup", 1, "igx-grid__tbody-content", 3, "igxGridDragSelect", "focus", "keydown", "onDragStop", "onDragScroll", "scroll"], ["tbody", ""], ["id", "left", "class", "igx-grid__scroll-on-drag-left", 3, "igxColumnMovingDrop", 4, "ngIf"], ["pinnedRecordsTemplate", ""], [4, "ngTemplateOutlet"], ["igxGridFor", "", 3, "igxGridForOf", "igxForScrollOrientation", "igxForScrollContainer", "igxForContainerSize", "igxForItemSize"], ["verticalScrollContainer", ""], ["record_template", ""], ["pinned_record_template", ""], ["summary_template", ""], ["igxOverlayOutlet", "", 1, "igx-grid__row-editing-outlet"], ["igxRowEditingOverlayOutlet", ""], [1, "igx-grid__tbody-scrollbar", 3, "hidden", "pointerdown"], [1, "igx-grid__tbody-scrollbar-start"], [1, "igx-grid__tbody-scrollbar-main"], ["igxGridFor", "", 3, "igxGridForOf"], ["verticalScrollHolder", ""], [1, "igx-grid__tbody-scrollbar-end"], [1, "igx-grid__addrow-snackbar"], [3, "actionText", "displayTime"], ["addRowSnackbar", ""], ["role", "rowgroup", "tabindex", "0", 1, "igx-grid__tfoot", 3, "focus", "keydown"], ["tfoot", ""], ["role", "row", "class", "igx-grid__summaries", 3, "width", "height", "gridID", "summaries", "index", 4, "ngIf"], [1, "igx-grid__tfoot-thumb", 3, "hidden"], [1, "igx-grid__scroll", 3, "hidden", "pointerdown"], ["scr", ""], [1, "igx-grid__scroll-start"], [1, "igx-grid__scroll-main"], ["scrollContainer", ""], [1, "igx-grid__scroll-end", 3, "hidden"], [1, "igx-grid__footer"], ["footer", ""], ["defaultPaginator", ""], ["emptyFilteredGrid", ""], ["defaultEmptyGrid", ""], ["defaultAddRowEmptyTemplate", ""], ["defaultLoadingGrid", ""], ["igxToggle", "", 4, "ngIf"], ["defaultRowEditText", ""], ["defaultRowEditActions", ""], ["defaultRowEditTemplate", ""], ["dragIndicatorIconBase", ""], ["igxHeadSelector", ""], ["headSelectorBaseTemplate", ""], ["igxOverlayOutlet", "", 1, "igx-grid__loading-outlet"], ["igxLoadingOverlayOutlet", ""], ["igxOverlayOutlet", "", 1, "igx-grid__outlet", 3, "keydown"], ["igxFilteringOverlayOutlet", ""], ["role", "toolbar", 3, "gridID", "displayDensity"], ["toolbar", ""], ["id", "left", 1, "igx-grid__scroll-on-drag-left", 3, "igxColumnMovingDrop"], ["id", "left", 1, "igx-grid__scroll-on-drag-pinned", 3, "igxColumnMovingDrop"], [1, "igx-grid__drag-indicator", 3, "pointerdown"], ["headerDragContainer", ""], [2, "visibility", "hidden"], [1, "igx-grid__cbx-selection", 3, "ngClass", "click", "pointerdown"], ["headerSelectorContainer", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["headSelector", ""], ["ngFor", "", 3, "ngForOf"], [3, "column", "gridID"], [3, "column"], ["filteringRow", ""], [3, "indeterminate"], ["id", "right", 1, "igx-grid__scroll-on-drag-right", 3, "igxColumnMovingDrop"], ["class", "igx-grid__tr--pinned", 3, "ngClass", "width", 4, "ngIf"], [1, "igx-grid__tr--pinned", 3, "ngClass"], ["pinContainer", ""], [4, "ngFor", "ngForOf"], [3, "igxTemplateOutlet", "igxTemplateOutletContext", "onCachedViewLoaded"], [3, "gridID", "index", "treeRow", "disabled", "addRow"], ["row", ""], [3, "gridID", "index", "treeRow", "addRow"], ["row", "", "pinnedRow", ""], [1, "igx-grid__summaries--body", 3, "gridID", "summaries", "firstCellIndentation", "index"], ["summaryRow", ""], ["role", "row", 1, "igx-grid__summaries", 3, "gridID", "summaries", "index"], [3, "overlaySettings", "displayDensity", "page", "totalRecords", "perPage", "pageChange", "perPageChange"], [1, "igx-grid__tbody-message"], ["igxButton", "raised", "igxRipple", "", 3, "click"], [1, "igx-grid__loading"], ["rowEditingOverlay", ""], [3, "className"], ["igxButton", "", "igxRowEditTabStop", "", 3, "click"], ["class", "igx-banner__message", 4, "ngIf"], [1, "igx-banner__actions"], [1, "igx-banner__row"], [1, "igx-banner__message"], [1, "igx-banner__text"], ["fontSet", "material"], [1, "igx-grid__cbx-padding"], ["disableRipple", "true", 3, "tabindex", "checked", "ngStyle", "readonly", "indeterminate", "aria-label"], ["headerCheckbox", ""]], template: function IgxTreeGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c11);
        ɵngcc0.ɵɵtemplate(0, IgxTreeGridComponent_igx_grid_toolbar_0_Template, 2, 6, "igx-grid-toolbar", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2, 3);
        ɵngcc0.ɵɵlistener("focus", function IgxTreeGridComponent_Template_div_focus_2_listener() { return ctx.navigation.focusFirstCell(); })("keydown", function IgxTreeGridComponent_Template_div_keydown_2_listener($event) { return ctx.navigation.headerNavigation($event); });
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵtemplate(5, IgxTreeGridComponent_span_5_Template, 1, 4, "span", 5);
        ɵngcc0.ɵɵtemplate(6, IgxTreeGridComponent_span_6_Template, 1, 4, "span", 6);
        ɵngcc0.ɵɵtemplate(7, IgxTreeGridComponent_ng_container_7_Template, 5, 1, "ng-container", 7);
        ɵngcc0.ɵɵtemplate(8, IgxTreeGridComponent_ng_container_8_Template, 4, 10, "ng-container", 7);
        ɵngcc0.ɵɵtemplate(9, IgxTreeGridComponent_ng_container_9_Template, 3, 3, "ng-container", 7);
        ɵngcc0.ɵɵtemplate(10, IgxTreeGridComponent_ng_template_10_Template, 1, 6, "ng-template", 8, 9, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵpipe(12, "igxTopLevel");
        ɵngcc0.ɵɵtemplate(13, IgxTreeGridComponent_ng_container_13_Template, 3, 3, "ng-container", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(14, IgxTreeGridComponent_igx_grid_filtering_row_14_Template, 2, 1, "igx-grid-filtering-row", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(15, "div", 11);
        ɵngcc0.ɵɵelementStart(16, "div", 12, 13);
        ɵngcc0.ɵɵtemplate(18, IgxTreeGridComponent_igx_circular_bar_18_Template, 1, 1, "igx-circular-bar", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(19, IgxTreeGridComponent_span_19_Template, 1, 2, "span", 15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "div", 16);
        ɵngcc0.ɵɵlistener("keydown.control.c", function IgxTreeGridComponent_Template_div_keydown_control_c_20_listener($event) { return ctx.copyHandler($event); })("copy", function IgxTreeGridComponent_Template_div_copy_20_listener($event) { return ctx.copyHandler($event); });
        ɵngcc0.ɵɵelementStart(21, "div", 17, 18);
        ɵngcc0.ɵɵlistener("focus", function IgxTreeGridComponent_Template_div_focus_21_listener($event) { return ctx.navigation.focusTbody($event); })("keydown", function IgxTreeGridComponent_Template_div_keydown_21_listener($event) { return ctx.navigation.handleNavigation($event); })("onDragStop", function IgxTreeGridComponent_Template_div_onDragStop_21_listener($event) { return ctx.selectionService.dragMode = $event; })("onDragScroll", function IgxTreeGridComponent_Template_div_onDragScroll_21_listener($event) { return ctx.dragScroll($event); })("scroll", function IgxTreeGridComponent_Template_div_scroll_21_listener($event) { return ctx.preventContainerScroll($event); });
        ɵngcc0.ɵɵtemplate(23, IgxTreeGridComponent_span_23_Template, 1, 2, "span", 19);
        ɵngcc0.ɵɵtemplate(24, IgxTreeGridComponent_span_24_Template, 1, 4, "span", 6);
        ɵngcc0.ɵɵtemplate(25, IgxTreeGridComponent_ng_template_25_Template, 8, 50, "ng-template", null, 20, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(27, IgxTreeGridComponent_ng_container_27_Template, 1, 0, "ng-container", 21);
        ɵngcc0.ɵɵtemplate(28, IgxTreeGridComponent_ng_template_28_Template, 1, 2, "ng-template", 22, 23, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵpipe(30, "gridAddRow");
        ɵngcc0.ɵɵpipe(31, "gridRowPinning");
        ɵngcc0.ɵɵpipe(32, "treeGridSummary");
        ɵngcc0.ɵɵpipe(33, "treeGridPaging");
        ɵngcc0.ɵɵpipe(34, "treeGridFlattening");
        ɵngcc0.ɵɵpipe(35, "treeGridSorting");
        ɵngcc0.ɵɵpipe(36, "treeGridFiltering");
        ɵngcc0.ɵɵpipe(37, "treeGridHierarchizing");
        ɵngcc0.ɵɵpipe(38, "visibleColumns");
        ɵngcc0.ɵɵpipe(39, "treeGridTransaction");
        ɵngcc0.ɵɵtemplate(40, IgxTreeGridComponent_ng_container_40_Template, 1, 0, "ng-container", 21);
        ɵngcc0.ɵɵtemplate(41, IgxTreeGridComponent_ng_template_41_Template, 2, 5, "ng-template", null, 24, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(43, IgxTreeGridComponent_ng_template_43_Template, 3, 4, "ng-template", null, 25, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(45, IgxTreeGridComponent_ng_template_45_Template, 2, 4, "ng-template", null, 26, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(47, IgxTreeGridComponent_ng_container_47_Template, 1, 0, "ng-container", 21);
        ɵngcc0.ɵɵelement(48, "div", 27, 28);
        ɵngcc0.ɵɵelement(50, "igc-trial-watermark");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(51, IgxTreeGridComponent_span_51_Template, 1, 2, "span", 15);
        ɵngcc0.ɵɵelementStart(52, "div", 29);
        ɵngcc0.ɵɵlistener("pointerdown", function IgxTreeGridComponent_Template_div_pointerdown_52_listener($event) { return $event.preventDefault(); });
        ɵngcc0.ɵɵelement(53, "div", 30);
        ɵngcc0.ɵɵelementStart(54, "div", 31);
        ɵngcc0.ɵɵtemplate(55, IgxTreeGridComponent_ng_template_55_Template, 0, 0, "ng-template", 32, 33, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(57, "div", 34);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(58, "div", 35);
        ɵngcc0.ɵɵelementStart(59, "igx-snackbar", 36, 37);
        ɵngcc0.ɵɵtext(61);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(62, "div", 38, 39);
        ɵngcc0.ɵɵlistener("focus", function IgxTreeGridComponent_Template_div_focus_62_listener() { return ctx.navigation.focusFirstCell(false); })("keydown", function IgxTreeGridComponent_Template_div_keydown_62_listener($event) { return ctx.navigation.summaryNav($event); });
        ɵngcc0.ɵɵtemplate(64, IgxTreeGridComponent_igx_grid_summary_row_64_Template, 3, 10, "igx-grid-summary-row", 40);
        ɵngcc0.ɵɵelement(65, "div", 41);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(66, "div", 42, 43);
        ɵngcc0.ɵɵlistener("pointerdown", function IgxTreeGridComponent_Template_div_pointerdown_66_listener($event) { return $event.preventDefault(); });
        ɵngcc0.ɵɵelement(68, "div", 44);
        ɵngcc0.ɵɵelementStart(69, "div", 45);
        ɵngcc0.ɵɵtemplate(70, IgxTreeGridComponent_ng_template_70_Template, 0, 0, "ng-template", 32, 46, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(72, "div", 47);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(73, "div", 48, 49);
        ɵngcc0.ɵɵprojection(75);
        ɵngcc0.ɵɵtemplate(76, IgxTreeGridComponent_ng_container_76_Template, 2, 4, "ng-container", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(77, IgxTreeGridComponent_ng_template_77_Template, 1, 5, "ng-template", null, 50, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(79, IgxTreeGridComponent_ng_template_79_Template, 4, 2, "ng-template", null, 51, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(81, IgxTreeGridComponent_ng_template_81_Template, 4, 2, "ng-template", null, 52, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(83, IgxTreeGridComponent_ng_template_83_Template, 2, 1, "ng-template", null, 53, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(85, IgxTreeGridComponent_ng_template_85_Template, 2, 1, "ng-template", null, 54, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(87, IgxTreeGridComponent_div_87_Template, 4, 6, "div", 55);
        ɵngcc0.ɵɵtemplate(88, IgxTreeGridComponent_ng_template_88_Template, 1, 1, "ng-template", null, 56, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(90, IgxTreeGridComponent_ng_template_90_Template, 4, 0, "ng-template", null, 57, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(92, IgxTreeGridComponent_ng_template_92_Template, 4, 5, "ng-template", null, 58, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(94, IgxTreeGridComponent_ng_template_94_Template, 2, 0, "ng-template", null, 59, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(96, IgxTreeGridComponent_ng_template_96_Template, 3, 8, "ng-template", 60, 61, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(98, IgxTreeGridComponent_igx_grid_column_resizer_98_Template, 1, 0, "igx-grid-column-resizer", 7);
        ɵngcc0.ɵɵelement(99, "div", 62, 63);
        ɵngcc0.ɵɵelementStart(101, "div", 64, 65);
        ɵngcc0.ɵɵlistener("keydown", function IgxTreeGridComponent_Template_div_keydown_101_listener($event) { return ctx.gridOutletKeyboardHandler($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r17 = ɵngcc0.ɵɵreference(26);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showToolbar);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("width", ctx.calcWidth, "px");
        ɵngcc0.ɵɵattribute("aria-activedescendant", ctx.activeDescendant);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("width", ctx.calcWidth, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn && ctx.pinnedColumns.length <= 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn && ctx.pinnedColumns.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rowDraggable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showRowSelectors);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pinnedColumns.length > 0 && ctx.isPinningToStart);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpipeBind1(12, 85, ctx.unpinnedColumns))("igxForScrollOrientation", "horizontal")("igxForScrollContainer", ctx.parentVirtDir)("igxForContainerSize", ctx.unpinnedWidth)("igxForTrackBy", ctx.trackColumnChanges)("igxForSizePropName", "calcPixelWidth");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pinnedColumns.length > 0 && !ctx.isPinningToStart);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.filteringService.isFilterRowVisible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.scrollSize, "px");
        ɵngcc0.ɵɵproperty("hidden", !ctx.hasVerticalScroll());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.shouldOverlayLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("height", ctx.totalHeight, "px")("width", ctx.calcWidth, "px");
        ɵngcc0.ɵɵproperty("igxGridDragSelect", ctx.selectionService.dragMode);
        ɵngcc0.ɵɵattribute("aria-activedescendant", ctx.activeDescendant);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn && ctx.pinnedColumns.length <= 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn && ctx.pinnedColumns.length > 0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.hasPinnedRecords && ctx.isRowPinningToTop ? _r17 : null);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpipeBind3(30, 87, ɵngcc0.ɵɵpipeBind4(31, 91, ɵngcc0.ɵɵpipeBindV(32, 96, ɵngcc0.ɵɵpureFunction8(178, _c15, ɵngcc0.ɵɵpipeBindV(33, 105, ɵngcc0.ɵɵpureFunction5(172, _c14, ɵngcc0.ɵɵpipeBindV(34, 111, ɵngcc0.ɵɵpureFunction5(166, _c14, ɵngcc0.ɵɵpipeBindV(35, 117, ɵngcc0.ɵɵpureFunction5(160, _c14, ɵngcc0.ɵɵpipeBindV(36, 123, ɵngcc0.ɵɵpureFunction7(152, _c13, ɵngcc0.ɵɵpipeBindV(37, 131, ɵngcc0.ɵɵpureFunction6(145, _c12, ɵngcc0.ɵɵpipeBind2(38, 138, ɵngcc0.ɵɵpipeBind3(39, 141, ctx.data, ctx.id, ctx.pipeTrigger), ctx.hasVisibleColumns), ctx.primaryKey, ctx.foreignKey, ctx.childDataKey, ctx.id, ctx.pipeTrigger)), ctx.filteringExpressionsTree, ctx.filterStrategy, ctx.advancedFilteringExpressionsTree, ctx.id, ctx.pipeTrigger, ctx.filteringPipeTrigger)), ctx.sortingExpressions, ctx.sortStrategy, ctx.id, ctx.pipeTrigger)), ctx.id, ctx.expansionDepth, ctx.expansionStates, ctx.pipeTrigger)), ctx.page, ctx.perPage, ctx.id, ctx.pipeTrigger)), ctx.hasSummarizedColumns, ctx.summaryCalculationMode, ctx.summaryPosition, ctx.showSummaryOnCollapse, ctx.id, ctx.pipeTrigger, ctx.summaryPipeTrigger)), ctx.id, false, ctx.pipeTrigger), false, ctx.pipeTrigger))("igxForScrollOrientation", "vertical")("igxForScrollContainer", ctx.verticalScroll)("igxForContainerSize", ctx.calcHeight)("igxForItemSize", ctx.renderedRowHeight);
        ɵngcc0.ɵɵadvance(12);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.hasPinnedRecords && !ctx.isRowPinningToTop ? _r17 : null);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasMovableColumns && ctx.draggedColumn);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.scrollSize, "px")("height", ctx.calcHeight, "px");
        ɵngcc0.ɵɵproperty("hidden", !ctx.hasVerticalScroll());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.isRowPinningToTop ? ctx.pinnedRowHeight : 0, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.calcHeight, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpureFunction0(187, _c16));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("height", !ctx.isRowPinningToTop ? ctx.pinnedRowHeight : 0, "px");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("actionText", ctx.snackbarActionText)("displayTime", ctx.snackbarDisplayTime);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.snackbarLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.summariesHeight, "px");
        ɵngcc0.ɵɵattribute("aria-activedescendant", ctx.activeDescendant);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasSummarizedColumns && ctx.rootSummariesEnabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.summariesHeight, "px")("width", ctx.scrollSize, "px");
        ɵngcc0.ɵɵproperty("hidden", !ctx.hasVerticalScroll());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("height", ctx.scrollSize, "px");
        ɵngcc0.ɵɵproperty("hidden", ctx.isHorizontalScrollHidden);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("width", ctx.isPinningToStart ? ctx.pinnedWidth : ctx.headerFeaturesWidth, "px")("min-width", ctx.isPinningToStart ? ctx.pinnedWidth : ctx.headerFeaturesWidth, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.unpinnedWidth, "px");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("igxGridForOf", ɵngcc0.ɵɵpureFunction0(188, _c16));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("float", "right")("width", ctx.pinnedWidth, "px")("min-width", ctx.pinnedWidth, "px");
        ɵngcc0.ɵɵproperty("hidden", ctx.pinnedWidth === 0 || ctx.isPinningToStart);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.paging && ctx.totalRecords);
        ɵngcc0.ɵɵadvance(11);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rowEditable);
        ɵngcc0.ɵɵadvance(11);
        ɵngcc0.ɵɵproperty("ngIf", ctx.colResizingService.showResizer);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.IgxGridForOfDirective, ɵngcc3.IgxToggleDirective, ɵngcc4.IgxGridBodyDirective, ɵngcc5.IgxGridDragSelectDirective, ɵngcc1.NgTemplateOutlet, ɵngcc3.IgxOverlayOutletDirective, ɵngcc6.IgxSnackbarComponent, ɵngcc7.IgxHeadSelectorDirective, ɵngcc8.IgxGridToolbarComponent, ɵngcc9.IgxColumnMovingDropDirective, ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc10.IgxGridHeaderGroupComponent, ɵngcc11.IgxGridFilteringRowComponent, ɵngcc12.IgxCircularProgressBarComponent, ɵngcc13.IgxTemplateOutletDirective, ɵngcc14.IgxTreeGridRowComponent, ɵngcc15.IgxSummaryRowComponent, ɵngcc16.IgxPaginatorComponent, ɵngcc17.IgxButtonDirective, ɵngcc18.IgxRippleDirective, ɵngcc19.IgxRowEditTabStopDirective, ɵngcc20.IgxIconComponent, ɵngcc21.IgxCheckboxComponent, ɵngcc1.NgStyle, ɵngcc22.IgxGridColumnResizerComponent], pipes: [ɵngcc23.IgxGridTopLevelColumns, ɵngcc23.IgxGridAddRowPipe, ɵngcc23.IgxGridRowPinningPipe, ɵngcc24.IgxTreeGridSummaryPipe, ɵngcc25.IgxTreeGridPagingPipe, ɵngcc25.IgxTreeGridFlatteningPipe, ɵngcc25.IgxTreeGridSortingPipe, ɵngcc26.IgxTreeGridFilteringPipe, ɵngcc25.IgxTreeGridHierarchizingPipe, ɵngcc23.IgxHasVisibleColumnsPipe, ɵngcc25.IgxTreeGridTransactionPipe, ɵngcc25.IgxTreeGridNormalizeRecordsPipe, ɵngcc27.IgxSummaryDataPipe], encapsulation: 2, changeDetection: 0 });
IgxTreeGridComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    data: [{ type: Input }],
    childDataKey: [{ type: Input }],
    foreignKey: [{ type: Input }],
    hasChildrenKey: [{ type: Input }],
    cascadeOnDelete: [{ type: Input }],
    expansionDepth: [{ type: Input }],
    rowLoadingTemplate: [{ type: ContentChild, args: [IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective },] }],
    rowLoadingIndicatorTemplate: [{ type: Input }],
    loadChildrenOnDemand: [{ type: Input }],
    dragIndicatorIconBase: [{ type: ViewChild, args: ['dragIndicatorIconBase', { read: TemplateRef, static: true },] }],
    recordTemplate: [{ type: ViewChild, args: ['record_template', { read: TemplateRef, static: true },] }],
    summaryTemplate: [{ type: ViewChild, args: ['summary_template', { read: TemplateRef, static: true },] }]
};
const ɵIgxTreeGridComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(IgxTreeGridComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxTreeGridComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-tree-grid',
                template: "<igx-grid-toolbar role=\"toolbar\" [style.max-width.px]='outerWidth' [style.flex-basis.px]='outerWidth' *ngIf=\"showToolbar\" [gridID]=\"id\"\n    [displayDensity]=\"displayDensity\" #toolbar>\n</igx-grid-toolbar>\n\n<div class=\"igx-grid__thead\">\n    <div class=\"igx-grid__thead-wrapper\" role=\"rowgroup\" [style.width.px]='calcWidth' tabindex=\"0\" [attr.aria-activedescendant]=\"activeDescendant\" (focus)=\"navigation.focusFirstCell()\" (keydown)=\"navigation.headerNavigation($event)\" #theadRow>\n        <div class=\"igx-grid__tr\" [style.width.px]='calcWidth' role=\"row\">\n            <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\"\n                [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n                class=\"igx-grid__scroll-on-drag-left\" [style.left.px]=\"featureColumnsWidth\"></span>\n            <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\"\n                [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n                class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n            <ng-container *ngIf=\"rowDraggable\">\n                <div class=\"igx-grid__drag-indicator\" (pointerdown)=\"$event.preventDefault()\" #headerDragContainer>\n                    <div style=\"visibility: hidden;\">\n                        <ng-container\n                            *ngTemplateOutlet=\"this.dragIndicatorIconTemplate ? this.dragIndicatorIconTemplate : this.dragIndicatorIconBase\">\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n            <ng-container *ngIf=\"showRowSelectors\">\n                <div class=\"igx-grid__cbx-selection\" (click)=\"onHeaderSelectorClick($event)\" #headerSelectorContainer [ngClass]=\"{\n                    'igx-grid__cbx-selection--push': filteringService.isFilterRowVisible }\" (pointerdown)=\"$event.preventDefault()\">\n                    <ng-template #headSelector\n                        *ngTemplateOutlet=\"\n                        this.headSelectorTemplate ? this.headSelectorTemplate : headSelectorBaseTemplate;\n                        context: { $implicit: {\n                                        selectedCount: this.selectionService.filteredSelectedRowIds.length,\n                                        totalCount: this.totalRowsCountAfterFilter }}\">\n                    </ng-template>\n                </div>\n            </ng-container>\n            <ng-container *ngIf=\"pinnedColumns.length > 0 && isPinningToStart\">\n                <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxTopLevel\">\n                    <igx-grid-header-group [column]=\"col\" [gridID]=\"id\" [style.min-width]=\"getHeaderGroupWidth(col)\"\n                        [style.flex-basis]=\"getHeaderGroupWidth(col)\"></igx-grid-header-group>\n                </ng-template>\n            </ng-container>\n            <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxTopLevel\"\n                [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\"\n                [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges'\n                [igxForSizePropName]=\"'calcPixelWidth'\" #hContainer>\n                <igx-grid-header-group [column]=\"col\" [gridID]=\"id\" [style.min-width]=\"getHeaderGroupWidth(col)\"\n                    [style.flex-basis]=\"getHeaderGroupWidth(col)\"></igx-grid-header-group>\n            </ng-template>\n            <ng-container *ngIf=\"pinnedColumns.length > 0 && !isPinningToStart\">\n                <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxTopLevel\">\n                    <igx-grid-header-group [column]=\"col\" [gridID]=\"id\" [style.min-width]=\"getHeaderGroupWidth(col)\"\n                        [style.flex-basis]=\"getHeaderGroupWidth(col)\" [style.left]=\"col.rightPinnedOffset\"></igx-grid-header-group>\n                </ng-template>\n            </ng-container>\n        </div>\n        <igx-grid-filtering-row #filteringRow *ngIf=\"filteringService.isFilterRowVisible\"\n            [column]=\"filteringService.filteredColumn\"></igx-grid-filtering-row>\n    </div>\n    <div class=\"igx-grid__thead-thumb\" [hidden]='!hasVerticalScroll()' [style.width.px]=\"scrollSize\"></div>\n    <div igxToggle #loadingOverlay>\n        <igx-circular-bar [indeterminate]=\"true\" *ngIf='shouldOverlayLoading'>\n        </igx-circular-bar>\n    </div>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n</div>\n\n<div igxGridBody (keydown.control.c)=\"copyHandler($event)\" (copy)=\"copyHandler($event)\" class=\"igx-grid__tbody\">\n    <div class=\"igx-grid__tbody-content\"  tabindex=\"0\" (focus)=\"navigation.focusTbody($event)\" [attr.aria-activedescendant]=\"activeDescendant\" (keydown)=\"navigation.handleNavigation($event)\" role=\"rowgroup\" (onDragStop)=\"selectionService.dragMode = $event\"\n        (onDragScroll)=\"dragScroll($event)\" [igxGridDragSelect]=\"selectionService.dragMode\"\n        [style.height.px]='totalHeight' [style.width.px]='calcWidth' #tbody (scroll)='preventContainerScroll($event)'>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-left\"></span>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\"\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\n            class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n        <ng-template #pinnedRecordsTemplate>\n            <ng-container *ngIf='data\n            | treeGridTransaction:id:pipeTrigger\n            | visibleColumns:hasVisibleColumns\n            | treeGridNormalizeRecord:pipeTrigger\n            | gridRowPinning:id:true:pipeTrigger\n            | treeGridFiltering:filteringExpressionsTree:filterStrategy:advancedFilteringExpressionsTree:id:pipeTrigger:filteringPipeTrigger:true\n            | treeGridSorting:sortingExpressions:sortStrategy:id:pipeTrigger:true\n            | gridAddRow:true:pipeTrigger as pinnedData'>\n                <div #pinContainer *ngIf='pinnedData.length > 0'\n                    [ngClass]=\"{\n                        'igx-grid__tr--pinned-bottom':  !isRowPinningToTop,\n                        'igx-grid__tr--pinned-top': isRowPinningToTop\n                    }\"\n                    class='igx-grid__tr--pinned' [style.width.px]='calcWidth'>\n                    <ng-container *ngFor=\"let rowData of pinnedData;let rowIndex = index;\">\n                        <ng-container *ngTemplateOutlet=\"pinned_record_template; context: getContext(rowData, rowIndex, true)\">\n                        </ng-container>\n                    </ng-container>\n                </div>\n            </ng-container>\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"hasPinnedRecords && isRowPinningToTop ? pinnedRecordsTemplate : null\"></ng-container>\n        <ng-template igxGridFor let-rowData [igxGridForOf]=\"data\n        | treeGridTransaction:id:pipeTrigger\n        | visibleColumns:hasVisibleColumns\n        | treeGridHierarchizing:primaryKey:foreignKey:childDataKey:id:pipeTrigger\n        | treeGridFiltering:filteringExpressionsTree:filterStrategy:advancedFilteringExpressionsTree:id:pipeTrigger:filteringPipeTrigger\n        | treeGridSorting:sortingExpressions:sortStrategy:id:pipeTrigger\n        | treeGridFlattening:id:expansionDepth:expansionStates:pipeTrigger\n        | treeGridPaging:page:perPage:id:pipeTrigger\n        | treeGridSummary:hasSummarizedColumns:summaryCalculationMode:summaryPosition:showSummaryOnCollapse:id:pipeTrigger:summaryPipeTrigger\n        | gridRowPinning:id:false:pipeTrigger\n        | gridAddRow:false:pipeTrigger\"\n            let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\" [igxForScrollContainer]='verticalScroll'\n            [igxForContainerSize]='calcHeight' [igxForItemSize]=\"renderedRowHeight\" #verticalScrollContainer>\n            <ng-template [igxTemplateOutlet]='isSummaryRow(rowData) ? summary_template : record_template'\n                [igxTemplateOutletContext]='getContext(rowData, rowIndex, false)'\n                (onCachedViewLoaded)='cachedViewLoaded($event)'>\n            </ng-template>\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"hasPinnedRecords && !isRowPinningToTop ? pinnedRecordsTemplate : null\"></ng-container>\n        <ng-template #record_template let-rowIndex=\"index\" let-disabledRow=\"disabled\" let-rowData let-isAddRow=\"addRow\">\n            <igx-tree-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [treeRow]=\"rowData\" [disabled]=\"disabledRow\" [addRow]=\"isAddRow\" #row>\n            </igx-tree-grid-row>\n        </ng-template>\n        <ng-template #pinned_record_template let-rowIndex=\"index\" let-rowData let-isAddRow=\"addRow\">\n            <igx-tree-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [treeRow]=\"rowData\" [addRow]=\"isAddRow\" #row #pinnedRow>\n            </igx-tree-grid-row>\n        </ng-template>\n        <ng-template #summary_template let-rowIndex=\"index\" let-rowData>\n            <igx-grid-summary-row [gridID]=\"id\" [summaries]=\"rowData.summaries\"\n                [firstCellIndentation]=\"rowData.cellIndentation\" [index]=\"rowIndex\"\n                class=\"igx-grid__summaries--body\" #summaryRow>\n            </igx-grid-summary-row>\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n        <div class=\"igx-grid__row-editing-outlet\" igxOverlayOutlet #igxRowEditingOverlayOutlet></div>\n        <igc-trial-watermark></igc-trial-watermark>\n    </div>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n        <div [hidden]='!hasVerticalScroll()' class=\"igx-grid__tbody-scrollbar\" [style.width.px]=\"scrollSize\"  (pointerdown)=\"$event.preventDefault()\"\n            [style.height.px]='calcHeight'>\n        <div class=\"igx-grid__tbody-scrollbar-start\" [style.height.px]=' isRowPinningToTop ? pinnedRowHeight : 0'></div>\n        <div class=\"igx-grid__tbody-scrollbar-main\" [style.height.px]='calcHeight'>\n            <ng-template igxGridFor [igxGridForOf]='[]' #verticalScrollHolder></ng-template>\n        </div>\n        <div class=\"igx-grid__tbody-scrollbar-end\" [style.height.px]='!isRowPinningToTop ? pinnedRowHeight : 0'></div>\n    </div>\n    <div class=\"igx-grid__addrow-snackbar\">\n        <igx-snackbar #addRowSnackbar [actionText]=\"snackbarActionText\" [displayTime]='snackbarDisplayTime'>{{snackbarLabel}}</igx-snackbar>\n    </div>\n</div>\n\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.height.px]='summariesHeight' tabindex=\"0\" [attr.aria-activedescendant]=\"activeDescendant\" (focus)=\"navigation.focusFirstCell(false)\" (keydown)=\"navigation.summaryNav($event)\" #tfoot>\n    <igx-grid-summary-row [style.width.px]='calcWidth' [style.height.px]='summariesHeight'\n        *ngIf=\"hasSummarizedColumns && rootSummariesEnabled\" [gridID]=\"id\" role=\"row\"\n        [summaries]=\"id | igxGridSummaryDataPipe:summaryService.retriggerRootPipe\" [index]=\"dataView.length\"\n        class=\"igx-grid__summaries\" #summaryRow>\n    </igx-grid-summary-row>\n    <div class=\"igx-grid__tfoot-thumb\" [hidden]='!hasVerticalScroll()' [style.height.px]='summariesHeight'\n        [style.width.px]=\"scrollSize\"></div>\n</div>\n\n<div class=\"igx-grid__scroll\" [style.height.px]=\"scrollSize\" #scr [hidden]=\"isHorizontalScrollHidden\" (pointerdown)=\"$event.preventDefault()\">\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='isPinningToStart ? pinnedWidth : headerFeaturesWidth' [style.min-width.px]='isPinningToStart ? pinnedWidth : headerFeaturesWidth'></div>\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\n        <ng-template igxGridFor [igxGridForOf]='[]' #scrollContainer>\n        </ng-template>\n    </div>\n    <div class=\"igx-grid__scroll-end\" [style.float]='\"right\"' [style.width.px]='pinnedWidth' [style.min-width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0 || isPinningToStart\"></div>\n</div>\n\n<div class=\"igx-grid__footer\" #footer>\n    <ng-content select=\"igx-grid-footer\"></ng-content>\n    <ng-container *ngIf=\"paging && totalRecords\">\n        <ng-container\n            *ngTemplateOutlet=\"paginationTemplate ? paginationTemplate : defaultPaginator; context: {$implicit: this}\">\n        </ng-container>\n    </ng-container>\n</div>\n\n<ng-template #defaultPaginator>\n    <igx-paginator [overlaySettings]=\"paginatorSettings\" [displayDensity]=\"displayDensity\" [(page)]=\"page\" [totalRecords]=\"totalRecords\"\n        [(perPage)]=\"perPage\">\n    </igx-paginator>\n</ng-template>\n\n<ng-template #emptyFilteredGrid>\n    <span class=\"igx-grid__tbody-message\">\n        <span>{{emptyFilteredGridMessage}}</span>\n        <span *ngIf='showAddButton'>\n            <ng-container *ngTemplateOutlet='addRowEmptyTemplate || defaultAddRowEmptyTemplate'></ng-container>\n        </span>\n    </span>\n</ng-template>\n\n<ng-template #defaultEmptyGrid>\n    <span class=\"igx-grid__tbody-message\">\n        <span>{{emptyGridMessage}}</span>\n        <span *ngIf='showAddButton'>\n            <ng-container *ngTemplateOutlet='addRowEmptyTemplate || defaultAddRowEmptyTemplate'></ng-container>\n        </span>\n    </span>\n</ng-template>\n\n<ng-template #defaultAddRowEmptyTemplate>\n    <button igxButton=\"raised\" igxRipple (click)='beginAddRowByIndex(null, -1)'>\n        {{resourceStrings.igx_grid_add_row_label}}\n    </button>\n</ng-template>\n\n<ng-template #defaultLoadingGrid>\n    <div class=\"igx-grid__loading\">\n        <igx-circular-bar [indeterminate]=\"true\">\n        </igx-circular-bar>\n    </div>\n</ng-template>\n\n<div *ngIf=\"rowEditable\" igxToggle #rowEditingOverlay>\n    <div [className]=\"bannerClass\">\n        <ng-container\n            *ngTemplateOutlet=\"rowEditContainer; context: { rowChangesCount: rowChangesCount, endEdit: endEdit.bind(this) }\">\n        </ng-container>\n    </div>\n</div>\n\n<ng-template #defaultRowEditText>\n    You have {{ rowChangesCount }} changes in this row\n</ng-template>\n\n<ng-template #defaultRowEditActions>\n    <button igxButton igxRowEditTabStop (click)=\"endRowEdit(false, $event)\">Cancel</button>\n    <button igxButton igxRowEditTabStop (click)=\"endRowEdit(true, $event)\">Done</button>\n</ng-template>\n\n<ng-template #defaultRowEditTemplate>\n    <div class=\"igx-banner__message\" *ngIf=\"!this.crudService.row?.isAddRow\">\n        <span class=\"igx-banner__text\">\n            <ng-container\n                *ngTemplateOutlet=\"rowEditText ? rowEditText : defaultRowEditText; context: { $implicit: rowChangesCount }\">\n            </ng-container>\n        </span>\n    </div>\n    <div class=\"igx-banner__actions\">\n        <div class=\"igx-banner__row\">\n            <ng-container\n                *ngTemplateOutlet=\"rowEditActions ? rowEditActions : defaultRowEditActions; context: { $implicit: endEdit.bind(this) }\">\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #dragIndicatorIconBase>\n    <igx-icon fontSet=\"material\">drag_indicator</igx-icon>\n</ng-template>\n\n<ng-template #headSelectorBaseTemplate igxHeadSelector let-context>\n    <div class=\"igx-grid__cbx-padding\">\n        <igx-checkbox\n            [tabindex]=\"-1\"\n            [checked]=\"context.selectedCount > 0 && context.totalCount === context.selectedCount\"\n            [ngStyle]=\"{'visibility': isMultiRowSelectionEnabled? 'visible' : 'hidden' }\"\n            [readonly]=\"true\"\n            disableRipple=\"true\"\n            [indeterminate]=\"context.selectedCount > 0 && context.selectedCount !== context.totalCount\"\n            [aria-label]=\"headSelectorBaseAriaLabel\"\n            #headerCheckbox>\n        </igx-checkbox>\n    </div>\n</ng-template>\n\n<igx-grid-column-resizer *ngIf=\"colResizingService.showResizer\"></igx-grid-column-resizer>\n<div class=\"igx-grid__loading-outlet\" #igxLoadingOverlayOutlet igxOverlayOutlet></div>\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet (keydown)=\"gridOutletKeyboardHandler($event)\"></div>\n",
                providers: [
                    IgxGridSelectionService,
                    IgxGridCRUDService,
                    IgxGridSummaryService,
                    IgxGridNavigationService,
                    { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },
                    { provide: IgxGridBaseDirective, useExisting: forwardRef(() => IgxTreeGridComponent) },
                    IgxFilteringService,
                    IgxForOfSyncService,
                    IgxForOfScrollSyncService
                ]
            }]
    }], null, { cascadeOnDelete: [{
            type: Input
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], data: [{
            type: Input
        }], expansionDepth: [{
            type: Input
        }], rowLoadingIndicatorTemplate: [{
            type: Input
        }], childDataKey: [{
            type: Input
        }], foreignKey: [{
            type: Input
        }], hasChildrenKey: [{
            type: Input
        }], rowLoadingTemplate: [{
            type: ContentChild,
            args: [IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective }]
        }], loadChildrenOnDemand: [{
            type: Input
        }], dragIndicatorIconBase: [{
            type: ViewChild,
            args: ['dragIndicatorIconBase', { read: TemplateRef, static: true }]
        }], recordTemplate: [{
            type: ViewChild,
            args: ['record_template', { read: TemplateRef, static: true }]
        }], summaryTemplate: [{
            type: ViewChild,
            args: ['summary_template', { read: TemplateRef, static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,