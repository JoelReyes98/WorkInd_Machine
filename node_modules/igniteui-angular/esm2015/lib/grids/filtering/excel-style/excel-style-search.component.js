import { Component, ViewChild, ChangeDetectorRef, TemplateRef, Directive, HostBinding } from '@angular/core';
import { IgxInputDirective } from '../../../directives/input/input.directive';
import { DisplayDensity } from '../../../core/density';
import { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';
import { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';
import { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { DataType } from '../../../data-operations/data-util';
import { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand, IgxStringFilteringOperand } from '../../../data-operations/filtering-condition';
import { Subject } from 'rxjs';
import { IgxListComponent } from '../../../list/public_api';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './grid.excel-style-filtering.component';
import * as ɵngcc2 from '../../../input-group/input-group.component';
import * as ɵngcc3 from '../../../icon/icon.component';
import * as ɵngcc4 from '../../../directives/prefix/prefix.directive';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from '../../../directives/input/input.directive';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from '../../../list/list.component';
import * as ɵngcc9 from '../../../directives/for-of/for_of.directive';
import * as ɵngcc10 from '../../../list/list.common';
import * as ɵngcc11 from '../../../directives/button/button.directive';
import * as ɵngcc12 from '../../../directives/suffix/suffix.directive';
import * as ɵngcc13 from '../../../list/list-item.component';
import * as ɵngcc14 from '../../../checkbox/checkbox.component';
import * as ɵngcc15 from '../../../progressbar/progressbar.component';

const _c0 = ["input"];
const _c1 = ["list"];
const _c2 = ["defaultExcelStyleLoadingValuesTemplate"];
function IgxExcelStyleSearchComponent_igx_icon_5_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 13);
    ɵngcc0.ɵɵlistener("click", function IgxExcelStyleSearchComponent_igx_icon_5_Template_igx_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.clearInput(); });
    ɵngcc0.ɵɵtext(1, " clear ");
    ɵngcc0.ɵɵelementEnd();
} }
function IgxExcelStyleSearchComponent_igx_list_item_9_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-list-item");
    ɵngcc0.ɵɵelementStart(1, "igx-checkbox", 14);
    ɵngcc0.ɵɵlistener("change", function IgxExcelStyleSearchComponent_igx_list_item_9_Template_igx_checkbox_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onCheckboxChange($event); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", item_r9)("checked", item_r9.isSelected)("disableRipple", true)("indeterminate", item_r9.indeterminate)("disableTransitions", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r9.label, " ");
} }
function IgxExcelStyleSearchComponent_ng_template_10_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxExcelStyleSearchComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtemplate(1, IgxExcelStyleSearchComponent_ng_template_10_ng_container_1_Template, 1, 0, "ng-container", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.valuesLoadingTemplate);
} }
function IgxExcelStyleSearchComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "igx-circular-bar", 17);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("indeterminate", true);
} }
export class IgxExcelStyleLoadingValuesTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxExcelStyleLoadingValuesTemplateDirective.ɵfac = function IgxExcelStyleLoadingValuesTemplateDirective_Factory(t) { return new (t || IgxExcelStyleLoadingValuesTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
IgxExcelStyleLoadingValuesTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IgxExcelStyleLoadingValuesTemplateDirective, selectors: [["", "igxExcelStyleLoading", ""]] });
IgxExcelStyleLoadingValuesTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxExcelStyleLoadingValuesTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[igxExcelStyleLoading]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/**
 * A component used for presenting Excel style search UI.
 */
export class IgxExcelStyleSearchComponent {
    constructor(cdr, esf) {
        this.cdr = cdr;
        this.esf = esf;
        this.destroy$ = new Subject();
        /**
         * @hidden @internal
         */
        this.class = 'igx-excel-filter__menu-main';
        esf.loadingStart.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.displayedListData = [];
            this.isLoading = true;
        });
        esf.loadingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.isLoading = false;
            this.refreshSize();
        });
        esf.initialized.pipe(takeUntil(this.destroy$)).subscribe(() => {
            requestAnimationFrame(() => {
                this.searchInput.nativeElement.focus();
            });
        });
        esf.columnChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.virtDir.resetScrollPosition();
        });
        esf.listDataLoaded.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.searchValue ?
                this.clearInput() :
                this.filterListData();
            this.cdr.detectChanges();
        });
    }
    /**
     * @hidden @internal
     */
    get addToCurrentFilter() {
        if (!this._addToCurrentFilter) {
            const addToCurrentFilterItem = {
                isSelected: false,
                isFiltered: false,
                indeterminate: false,
                isSpecial: true,
                isBlanks: false,
                value: this.esf.grid.resourceStrings.igx_grid_excel_add_to_filter,
                label: this.esf.grid.resourceStrings.igx_grid_excel_add_to_filter
            };
            this._addToCurrentFilter = addToCurrentFilterItem;
        }
        return this._addToCurrentFilter;
    }
    /**
     * @hidden @internal
     */
    get isLoading() {
        return this._isLoading;
    }
    /**
     * @hidden @internal
     */
    set isLoading(value) {
        this._isLoading = value;
        if (!this.cdr.destroyed) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @hidden @internal
     */
    get valuesLoadingTemplate() {
        var _a;
        if ((_a = this.esf.grid) === null || _a === void 0 ? void 0 : _a.excelStyleLoadingValuesTemplateDirective) {
            return this.esf.grid.excelStyleLoadingValuesTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleLoadingValuesTemplate;
        }
    }
    ngAfterViewInit() {
        this.refreshSize();
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden @internal
     */
    refreshSize() {
        requestAnimationFrame(() => {
            var _a;
            (_a = this.virtDir) === null || _a === void 0 ? void 0 : _a.recalcUpdateSizes();
        });
    }
    /**
     * @hidden @internal
     */
    clearInput() {
        this.searchValue = null;
        this.filterListData();
    }
    /**
     * @hidden @internal
     */
    onCheckboxChange(eventArgs) {
        const selectedIndex = this.displayedListData.indexOf(eventArgs.checkbox.value);
        const selectAllBtn = this.displayedListData[0];
        if (selectedIndex === 0) {
            this.displayedListData.forEach(element => {
                if (element === this.addToCurrentFilter) {
                    return;
                }
                element.isSelected = eventArgs.checked;
            });
            selectAllBtn.indeterminate = false;
        }
        else {
            eventArgs.checkbox.value.isSelected = eventArgs.checked;
            const indexToStartSlicing = this.displayedListData.indexOf(this.addToCurrentFilter) > -1 ? 2 : 1;
            const slicedArray = this.displayedListData.slice(indexToStartSlicing, this.displayedListData.length);
            if (!slicedArray.find(el => el.isSelected === false)) {
                selectAllBtn.indeterminate = false;
                selectAllBtn.isSelected = true;
            }
            else if (!slicedArray.find(el => el.isSelected === true)) {
                selectAllBtn.indeterminate = false;
                selectAllBtn.isSelected = false;
            }
            else {
                selectAllBtn.indeterminate = true;
            }
        }
        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();
    }
    /**
     * @hidden @internal
     */
    get itemSize() {
        let itemSize = '40px';
        switch (this.esf.displayDensity) {
            case DisplayDensity.cosy:
                itemSize = '32px';
                break;
            case DisplayDensity.compact:
                itemSize = '24px';
                break;
            default: break;
        }
        return itemSize;
    }
    /**
     * @hidden @internal
     */
    get type() {
        var _a;
        switch ((_a = this.esf.column) === null || _a === void 0 ? void 0 : _a.dataType) {
            case DataType.Number:
                return 'number';
            default:
                return 'text';
        }
    }
    /**
     * @hidden @internal
     */
    get containerSize() {
        if (this.list) {
            return this.list.element.nativeElement.offsetHeight;
        }
    }
    /**
     * @hidden @internal
     */
    get applyButtonDisabled() {
        return this.esf.listData[0] && !this.esf.listData[0].isSelected && !this.esf.listData[0].indeterminate ||
            this.displayedListData && this.displayedListData.length === 0;
    }
    /**
     * @hidden @internal
     */
    onInputKeyDown(event) {
        switch (event.key) {
            case "Enter" /* ENTER */:
                event.preventDefault();
                this.applyFilter();
                return;
            case "Escape" /* ESCAPE */ || "Esc" /* ESCAPE_IE */:
                if (this.searchValue) {
                    event.stopPropagation();
                    this.clearInput();
                }
                return;
        }
    }
    /**
     * @hidden @internal
     */
    filterListData() {
        if (!this.esf.listData || !this.esf.listData.length) {
            this.displayedListData = [];
            return;
        }
        const searchAllBtn = this.esf.listData[0];
        if (!this.searchValue) {
            const anyFiltered = this.esf.listData.some(i => i.isFiltered);
            const anyUnfiltered = this.esf.listData.some(i => !i.isFiltered);
            if (anyFiltered && anyUnfiltered) {
                searchAllBtn.indeterminate = true;
            }
            this.esf.listData.forEach(i => i.isSelected = i.isFiltered);
            this.displayedListData = this.esf.listData;
            searchAllBtn.label = this.esf.grid.resourceStrings.igx_grid_excel_select_all;
            return;
        }
        const searchVal = this.searchValue.toLowerCase();
        this.displayedListData = this.esf.listData.filter((it, i) => (i === 0 && it.isSpecial) ||
            (it.label !== null && it.label !== undefined) &&
                !it.isBlanks &&
                it.label.toString().toLowerCase().indexOf(searchVal) > -1);
        this.esf.listData.forEach(i => i.isSelected = false);
        this.displayedListData.forEach(i => i.isSelected = true);
        this.displayedListData.splice(1, 0, this.addToCurrentFilter);
        searchAllBtn.indeterminate = false;
        searchAllBtn.label = this.esf.grid.resourceStrings.igx_grid_excel_select_all_search_results;
        if (this.displayedListData.length === 2) {
            this.displayedListData = [];
        }
    }
    /**
     * @hidden @internal
     */
    applyFilter() {
        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.esf.column.field);
        const item = this.displayedListData[1];
        const addToCurrentFilterOptionVisible = item === this.addToCurrentFilter;
        const selectedItems = addToCurrentFilterOptionVisible && item.isSelected ?
            this.esf.listData.slice(1, this.esf.listData.length).filter(el => el.isSelected || el.isFiltered) :
            this.esf.listData.slice(1, this.esf.listData.length).filter(el => el.isSelected);
        const unselectedItem = this.esf.listData.slice(1, this.esf.listData.length).find(el => el.isSelected === false);
        if (unselectedItem) {
            if (selectedItems.length <= IgxExcelStyleSearchComponent.filterOptimizationThreshold) {
                selectedItems.forEach(element => {
                    let condition = null;
                    if (element.value !== null && element.value !== undefined) {
                        if (this.esf.column.dataType === DataType.Boolean) {
                            condition = this.createCondition(element.value.toString());
                        }
                        else {
                            condition = this.createCondition('equals');
                        }
                    }
                    else {
                        condition = this.createCondition('empty');
                    }
                    filterTree.filteringOperands.push({
                        condition: condition,
                        fieldName: this.esf.column.field,
                        ignoreCase: this.esf.column.filteringIgnoreCase,
                        searchVal: element.value
                    });
                });
            }
            else {
                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);
                let blanksItem;
                if (blanksItemIndex >= 0) {
                    blanksItem = selectedItems[blanksItemIndex];
                    selectedItems.splice(blanksItemIndex, 1);
                }
                filterTree.filteringOperands.push({
                    condition: this.createCondition('in'),
                    fieldName: this.esf.column.field,
                    ignoreCase: this.esf.column.filteringIgnoreCase,
                    searchVal: new Set(this.esf.column.dataType === DataType.Date ?
                        selectedItems.map(d => d.value.toISOString()) :
                        selectedItems.map(e => e.value))
                });
                if (blanksItem) {
                    filterTree.filteringOperands.push({
                        condition: this.createCondition('empty'),
                        fieldName: this.esf.column.field,
                        ignoreCase: this.esf.column.filteringIgnoreCase,
                        searchVal: blanksItem.value
                    });
                }
            }
            this.esf.grid.filteringService.filterInternal(this.esf.column.field, filterTree);
            this.esf.expressionsList = new Array();
            this.esf.grid.filteringService.generateExpressionsList(this.esf.column.filteringExpressionsTree, this.esf.grid.filteringLogic, this.esf.expressionsList);
        }
        else {
            this.esf.grid.filteringService.clearFilter(this.esf.column.field);
        }
        this.esf.closeDropdown();
    }
    createCondition(conditionName) {
        switch (this.esf.column.dataType) {
            case DataType.Boolean:
                return IgxBooleanFilteringOperand.instance().condition(conditionName);
            case DataType.Number:
                return IgxNumberFilteringOperand.instance().condition(conditionName);
            case DataType.Date:
                return IgxDateFilteringOperand.instance().condition(conditionName);
            default:
                return IgxStringFilteringOperand.instance().condition(conditionName);
        }
    }
}
IgxExcelStyleSearchComponent.ɵfac = function IgxExcelStyleSearchComponent_Factory(t) { return new (t || IgxExcelStyleSearchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxGridExcelStyleFilteringComponent)); };
IgxExcelStyleSearchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxExcelStyleSearchComponent, selectors: [["igx-excel-style-search"]], viewQuery: function IgxExcelStyleSearchComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, IgxInputDirective);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, IgxListComponent);
        ɵngcc0.ɵɵstaticViewQuery(IgxForOfDirective, true);
        ɵngcc0.ɵɵviewQuery(_c2, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.list = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtDir = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultExcelStyleLoadingValuesTemplate = _t.first);
    } }, hostVars: 2, hostBindings: function IgxExcelStyleSearchComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.class);
    } }, decls: 18, vars: 20, consts: [["type", "box", 3, "displayDensity"], ["igxPrefix", ""], ["igxInput", "", "tabindex", "0", "autocomplete", "off", 3, "ngModel", "placeholder", "type", "ngModelChange", "keydown"], ["input", ""], ["igxSuffix", "", "tabindex", "0", 3, "click", 4, "ngIf"], [3, "displayDensity", "isLoading"], ["list", ""], [4, "igxFor", "igxForOf", "igxForScrollOrientation", "igxForContainerSize", "igxForItemSize"], ["igxDataLoading", ""], ["defaultExcelStyleLoadingValuesTemplate", ""], [1, "igx-excel-filter__menu-footer"], ["igxButton", "", 3, "displayDensity", "click"], ["igxButton", "raised", 3, "displayDensity", "disabled", "click"], ["igxSuffix", "", "tabindex", "0", 3, "click"], ["tabindex", "-1", 3, "value", "checked", "disableRipple", "indeterminate", "disableTransitions", "change"], [1, "igx-excel-filter__loading"], [4, "ngTemplateOutlet"], [3, "indeterminate"]], template: function IgxExcelStyleSearchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "igx-input-group", 0);
        ɵngcc0.ɵɵelementStart(1, "igx-icon", 1);
        ɵngcc0.ɵɵtext(2, "search");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "input", 2, 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function IgxExcelStyleSearchComponent_Template_input_ngModelChange_3_listener($event) { return ctx.searchValue = $event; })("ngModelChange", function IgxExcelStyleSearchComponent_Template_input_ngModelChange_3_listener() { return ctx.filterListData(); })("keydown", function IgxExcelStyleSearchComponent_Template_input_keydown_3_listener($event) { return ctx.onInputKeyDown($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, IgxExcelStyleSearchComponent_igx_icon_5_Template, 2, 0, "igx-icon", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "igx-list", 5, 6);
        ɵngcc0.ɵɵelementStart(8, "div");
        ɵngcc0.ɵɵtemplate(9, IgxExcelStyleSearchComponent_igx_list_item_9_Template, 3, 6, "igx-list-item", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, IgxExcelStyleSearchComponent_ng_template_10_Template, 2, 1, "ng-template", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, IgxExcelStyleSearchComponent_ng_template_11_Template, 1, 1, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(13, "footer", 10);
        ɵngcc0.ɵɵelementStart(14, "button", 11);
        ɵngcc0.ɵɵlistener("click", function IgxExcelStyleSearchComponent_Template_button_click_14_listener() { return ctx.esf.cancel(); });
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "button", 12);
        ɵngcc0.ɵɵlistener("click", function IgxExcelStyleSearchComponent_Template_button_click_16_listener() { return ctx.applyFilter(); });
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("displayDensity", ctx.esf.displayDensity);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngModel", ctx.searchValue)("placeholder", ctx.esf.column == null ? null : ctx.esf.column.grid.resourceStrings.igx_grid_excel_search_placeholder)("type", ctx.type);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchValue || ctx.searchValue === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayDensity", ctx.esf.displayDensity)("isLoading", ctx.isLoading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("overflow", "hidden")("position", "relative");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("igxForOf", ctx.displayedListData)("igxForScrollOrientation", "vertical")("igxForContainerSize", ctx.containerSize)("igxForItemSize", ctx.itemSize);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("displayDensity", ctx.esf.displayDensity);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.esf.grid == null ? null : ctx.esf.grid.resourceStrings.igx_grid_excel_cancel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayDensity", ctx.esf.displayDensity)("disabled", ctx.applyButtonDisabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.esf.grid == null ? null : ctx.esf.grid.resourceStrings.igx_grid_excel_apply);
    } }, directives: [ɵngcc2.IgxInputGroupComponent, ɵngcc3.IgxIconComponent, ɵngcc4.IgxPrefixDirective, ɵngcc5.DefaultValueAccessor, ɵngcc6.IgxInputDirective, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc7.NgIf, ɵngcc8.IgxListComponent, ɵngcc9.IgxForOfDirective, ɵngcc10.IgxDataLoadingTemplateDirective, ɵngcc11.IgxButtonDirective, ɵngcc12.IgxSuffixDirective, ɵngcc13.IgxListItemComponent, ɵngcc14.IgxCheckboxComponent, ɵngcc7.NgTemplateOutlet, ɵngcc15.IgxCircularProgressBarComponent], encapsulation: 2 });
IgxExcelStyleSearchComponent.filterOptimizationThreshold = 2;
IgxExcelStyleSearchComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: IgxGridExcelStyleFilteringComponent }
];
IgxExcelStyleSearchComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class',] }],
    searchInput: [{ type: ViewChild, args: ['input', { read: IgxInputDirective, static: true },] }],
    list: [{ type: ViewChild, args: ['list', { read: IgxListComponent, static: true },] }],
    virtDir: [{ type: ViewChild, args: [IgxForOfDirective, { static: true },] }],
    defaultExcelStyleLoadingValuesTemplate: [{ type: ViewChild, args: ['defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxExcelStyleSearchComponent, [{
        type: Component,
        args: [{
                preserveWhitespaces: false,
                selector: 'igx-excel-style-search',
                template: "<igx-input-group\n            type=\"box\"\n            [displayDensity]=\"esf.displayDensity\">\n    <igx-icon igxPrefix>search</igx-icon>\n    <input\n        #input\n        igxInput\n        tabindex=\"0\"\n        [(ngModel)]=\"searchValue\"\n        (ngModelChange)=\"filterListData()\"\n        (keydown)=\"onInputKeyDown($event)\"\n        [placeholder]=\"esf.column?.grid.resourceStrings.igx_grid_excel_search_placeholder\"\n        [type]=\"type\"\n        autocomplete=\"off\"/>\n    <igx-icon\n        igxSuffix\n        *ngIf=\"searchValue || searchValue === 0\"\n        (click)=\"clearInput()\"\n        tabindex=\"0\">\n        clear\n    </igx-icon>\n</igx-input-group>\n\n<igx-list #list [displayDensity]=\"esf.displayDensity\" [isLoading]=\"isLoading\">\n    <div [style.overflow]=\"'hidden'\" [style.position]=\"'relative'\">\n        <igx-list-item\n        *igxFor=\"let item of displayedListData scrollOrientation : 'vertical'; containerSize: containerSize; itemSize: itemSize\">\n            <igx-checkbox\n            [value]=\"item\"\n            tabindex=\"-1\"\n            [checked]=\"item.isSelected\"\n            [disableRipple]=\"true\"\n            [indeterminate]=\"item.indeterminate\"\n            [disableTransitions]=\"true\"\n            (change)=\"onCheckboxChange($event)\">\n                {{ item.label }}\n            </igx-checkbox>\n        </igx-list-item>\n    </div>\n\n    <ng-template igxDataLoading>\n        <div class=\"igx-excel-filter__loading\">\n            <ng-container *ngTemplateOutlet=\"valuesLoadingTemplate\">\n            </ng-container>\n        </div>\n    </ng-template>\n</igx-list>\n\n<ng-template #defaultExcelStyleLoadingValuesTemplate>\n    <igx-circular-bar [indeterminate]=\"true\">\n    </igx-circular-bar>\n</ng-template>\n\n<footer class=\"igx-excel-filter__menu-footer\">\n    <button igxButton [displayDensity]=\"esf.displayDensity\" (click)=\"esf.cancel()\">{{ esf.grid?.resourceStrings.igx_grid_excel_cancel }}</button>\n    <button igxButton=\"raised\" [displayDensity]=\"esf.displayDensity\" [disabled]=\"applyButtonDisabled\" (click)=\"applyFilter()\">{{ esf.grid?.resourceStrings.igx_grid_excel_apply }}</button>\n</footer>\n"
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.IgxGridExcelStyleFilteringComponent }]; }, { class: [{
            type: HostBinding,
            args: ['class']
        }], searchInput: [{
            type: ViewChild,
            args: ['input', { read: IgxInputDirective, static: true }]
        }], list: [{
            type: ViewChild,
            args: ['list', { read: IgxListComponent, static: true }]
        }], virtDir: [{
            type: ViewChild,
            args: [IgxForOfDirective, { static: true }]
        }], defaultExcelStyleLoadingValuesTemplate: [{
            type: ViewChild,
            args: ['defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,