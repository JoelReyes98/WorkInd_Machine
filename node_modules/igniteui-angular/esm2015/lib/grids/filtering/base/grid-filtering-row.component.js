import { ChangeDetectorRef, Component, Input, TemplateRef, ViewChild, ViewChildren, ElementRef, HostBinding, ChangeDetectionStrategy, HostListener } from '@angular/core';
import { DataType, DataUtil } from '../../../data-operations/data-util';
import { IgxDropDownComponent } from '../../../drop-down/public_api';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { HorizontalAlignment, VerticalAlignment } from '../../../services/overlay/utilities';
import { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';
import { IgxChipsAreaComponent } from '../../../chips/public_api';
import { ExpressionUI } from '../grid-filtering.service';
import { IgxFilteringService } from '../grid-filtering.service';
import { isEdge, isIE } from '../../../core/utils';
import { AbsoluteScrollStrategy } from '../../../services/overlay/scroll';
import { DisplayDensity } from '../../../core/displayDensity';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../grid-filtering.service';
import * as ɵngcc2 from '../../../drop-down/drop-down.component';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../../../chips/chips-area.component';
import * as ɵngcc5 from '../../../directives/ripple/ripple.directive';
import * as ɵngcc6 from '../../../directives/button/button.directive';
import * as ɵngcc7 from '../../../icon/icon.component';
import * as ɵngcc8 from '../../../drop-down/drop-down-item.component';
import * as ɵngcc9 from '../../../input-group/input-group.component';
import * as ɵngcc10 from '../../../directives/prefix/prefix.directive';
import * as ɵngcc11 from '../../../drop-down/drop-down-navigation.directive';
import * as ɵngcc12 from '../../../directives/input/input.directive';
import * as ɵngcc13 from '../../../directives/suffix/suffix.directive';
import * as ɵngcc14 from '../../../date-picker/date-picker.component';
import * as ɵngcc15 from '../../../date-picker/date-picker.directives';
import * as ɵngcc16 from '../../../chips/chip.component';
import * as ɵngcc17 from '../../common/pipes';

const _c0 = ["defaultFilterUI"];
const _c1 = ["defaultDateUI"];
const _c2 = ["input"];
const _c3 = ["inputGroupConditions"];
const _c4 = ["chipsArea"];
const _c5 = ["inputGroup"];
const _c6 = ["inputGroupPrefix"];
const _c7 = ["container"];
const _c8 = ["operand"];
const _c9 = ["closeButton"];
const _c10 = ["operators"];
function IgxGridFilteringRowComponent_igx_drop_down_item_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-drop-down-item", 17);
    ɵngcc0.ɵɵelementStart(1, "div", 18);
    ɵngcc0.ɵɵelement(2, "igx-icon", 19);
    ɵngcc0.ɵɵelementStart(3, "span", 20);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const condition_r14 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", condition_r14)("selected", ctx_r1.isConditionSelected(condition_r14));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("name", ctx_r1.getCondition(condition_r14).iconName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.translateCondition(condition_r14));
} }
function IgxGridFilteringRowComponent_ng_template_3_igx_suffix_7_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-suffix");
    ɵngcc0.ɵɵelementStart(1, "igx-icon", 28);
    ɵngcc0.ɵɵlistener("keydown", function IgxGridFilteringRowComponent_ng_template_3_igx_suffix_7_Template_igx_icon_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.onCommitKeyDown($event); })("click", function IgxGridFilteringRowComponent_ng_template_3_igx_suffix_7_Template_igx_icon_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onCommitClick(); });
    ɵngcc0.ɵɵtext(2, "done");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "igx-icon", 28);
    ɵngcc0.ɵɵlistener("keydown", function IgxGridFilteringRowComponent_ng_template_3_igx_suffix_7_Template_igx_icon_keydown_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r22 = ɵngcc0.ɵɵnextContext(2); return ctx_r22.onClearKeyDown($event); })("click", function IgxGridFilteringRowComponent_ng_template_3_igx_suffix_7_Template_igx_icon_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.onClearClick(); });
    ɵngcc0.ɵɵtext(4, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function IgxGridFilteringRowComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 21, 22);
    ɵngcc0.ɵɵlistener("focusout", function IgxGridFilteringRowComponent_ng_template_3_Template_igx_input_group_focusout_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.onInputGroupFocusout(); });
    ɵngcc0.ɵɵelementStart(2, "igx-prefix", 23, 24);
    ɵngcc0.ɵɵlistener("click", function IgxGridFilteringRowComponent_ng_template_3_Template_igx_prefix_click_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.inputGroupPrefixClick($event); })("keydown", function IgxGridFilteringRowComponent_ng_template_3_Template_igx_prefix_keydown_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.onPrefixKeyDown($event); });
    ɵngcc0.ɵɵelement(4, "igx-icon", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "input", 25, 26);
    ɵngcc0.ɵɵlistener("input", function IgxGridFilteringRowComponent_ng_template_3_Template_input_input_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.onInput($event); })("click", function IgxGridFilteringRowComponent_ng_template_3_Template_input_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.onInputClick(); })("compositionstart", function IgxGridFilteringRowComponent_ng_template_3_Template_input_compositionstart_5_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.onCompositionStart(); })("compositionend", function IgxGridFilteringRowComponent_ng_template_3_Template_input_compositionend_5_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.onCompositionEnd(); })("keydown", function IgxGridFilteringRowComponent_ng_template_3_Template_input_keydown_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.onInputKeyDown($event); })("keyup", function IgxGridFilteringRowComponent_ng_template_3_Template_input_keyup_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.onInputKeyUp($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, IgxGridFilteringRowComponent_ng_template_3_igx_suffix_7_Template, 5, 0, "igx-suffix", 27);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r3.displayDensity);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("igxDropDownItemNavigation", _r0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("name", ctx_r3.getIconName());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placeholder", ctx_r3.placeholder)("value", ctx_r3.value)("type", ctx_r3.type)("readonly", ctx_r3.isUnaryCondition);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.value || ctx_r3.value === 0);
} }
function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_igx_suffix_9_Template(rf, ctx) { if (rf & 1) {
    const _r41 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-suffix");
    ɵngcc0.ɵɵelementStart(1, "igx-icon", 28);
    ɵngcc0.ɵɵlistener("keydown", function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_igx_suffix_9_Template_igx_icon_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r41); const ctx_r40 = ɵngcc0.ɵɵnextContext(3); return ctx_r40.onCommitKeyDown($event); })("click", function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_igx_suffix_9_Template_igx_icon_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r41); const ctx_r42 = ɵngcc0.ɵɵnextContext(3); return ctx_r42.onCommitClick(); });
    ɵngcc0.ɵɵtext(2, "done");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "igx-icon", 28);
    ɵngcc0.ɵɵlistener("keydown", function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_igx_suffix_9_Template_igx_icon_keydown_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r41); const ctx_r43 = ɵngcc0.ɵɵnextContext(3); return ctx_r43.onClearKeyDown($event); })("click", function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_igx_suffix_9_Template_igx_icon_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r41); const ctx_r44 = ɵngcc0.ɵɵnextContext(3); return ctx_r44.clearInput(); });
    ɵngcc0.ɵɵtext(4, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r46 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-input-group", 21, 22);
    ɵngcc0.ɵɵlistener("focusout", function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_Template_igx_input_group_focusout_0_listener() { ɵngcc0.ɵɵrestoreView(_r46); const ctx_r45 = ɵngcc0.ɵɵnextContext(2); return ctx_r45.onInputGroupFocusout(); });
    ɵngcc0.ɵɵelementStart(2, "igx-prefix", 23, 24);
    ɵngcc0.ɵɵlistener("click", function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_Template_igx_prefix_click_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r46); const ctx_r47 = ɵngcc0.ɵɵnextContext(2); return ctx_r47.inputGroupPrefixClick($event); })("keydown", function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_Template_igx_prefix_keydown_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r46); const ctx_r48 = ɵngcc0.ɵɵnextContext(2); return ctx_r48.onPrefixKeyDown($event); });
    ɵngcc0.ɵɵelement(4, "igx-icon", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "input", 31, 26);
    ɵngcc0.ɵɵlistener("click", function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_Template_input_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r46); const openDialog_r35 = ctx.openDialog; const _r36 = ɵngcc0.ɵɵreference(1); const ctx_r49 = ɵngcc0.ɵɵnextContext(2); return ctx_r49.expression.condition.isUnary ? ctx_r49.noop() : openDialog_r35(_r36.element.nativeElement); })("keydown", function IgxGridFilteringRowComponent_ng_template_5_ng_template_1_Template_input_keydown_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r46); const ctx_r50 = ɵngcc0.ɵɵnextContext(2); return ctx_r50.onInputKeyDown($event); });
    ɵngcc0.ɵɵpipe(7, "columnFormatter");
    ɵngcc0.ɵɵpipe(8, "date");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, IgxGridFilteringRowComponent_ng_template_5_ng_template_1_igx_suffix_9_Template, 5, 0, "igx-suffix", 27);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r34 = ɵngcc0.ɵɵnextContext(2);
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r34.displayDensity);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("igxDropDownItemNavigation", _r0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("name", ctx_r34.expression.condition.iconName);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placeholder", ctx_r34.placeholder)("value", ctx_r34.column.formatter ? ɵngcc0.ɵɵpipeBind2(7, 7, ctx_r34.value, ctx_r34.column.formatter) : ɵngcc0.ɵɵpipeBind4(8, 10, ctx_r34.value, ctx_r34.column.pipeArgs.format, undefined, ctx_r34.filteringService.grid.locale))("readonly", true);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r34.value);
} }
function IgxGridFilteringRowComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r52 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "igx-date-picker", 29);
    ɵngcc0.ɵɵlistener("onSelection", function IgxGridFilteringRowComponent_ng_template_5_Template_igx_date_picker_onSelection_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r52); const ctx_r51 = ɵngcc0.ɵɵnextContext(); return ctx_r51.onDateSelected($event); })("onClosed", function IgxGridFilteringRowComponent_ng_template_5_Template_igx_date_picker_onClosed_0_listener() { ɵngcc0.ɵɵrestoreView(_r52); const ctx_r53 = ɵngcc0.ɵɵnextContext(); return ctx_r53.datePickerClose(); });
    ɵngcc0.ɵɵtemplate(1, IgxGridFilteringRowComponent_ng_template_5_ng_template_1_Template, 10, 15, "ng-template", 30);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r5.value)("outlet", ctx_r5.filteringService.grid.outlet)("locale", ctx_r5.filteringService.grid.locale);
} }
function IgxGridFilteringRowComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridFilteringRowComponent_button_8_Template(rf, ctx) { if (rf & 1) {
    const _r55 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 32);
    ɵngcc0.ɵɵlistener("keydown", function IgxGridFilteringRowComponent_button_8_Template_button_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r55); const ctx_r54 = ɵngcc0.ɵɵnextContext(); return ctx_r54.onLeftArrowKeyDown($event); })("click", function IgxGridFilteringRowComponent_button_8_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r55); const ctx_r56 = ɵngcc0.ɵɵnextContext(); return ctx_r56.scrollChipsOnArrowPress("left"); });
    ɵngcc0.ɵɵelementStart(1, "igx-icon");
    ɵngcc0.ɵɵtext(2, "navigate_before");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function IgxGridFilteringRowComponent_ng_container_14_span_6_Template(rf, ctx) { if (rf & 1) {
    const _r64 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 38);
    ɵngcc0.ɵɵelementStart(1, "button", 39);
    ɵngcc0.ɵɵlistener("click", function IgxGridFilteringRowComponent_ng_container_14_span_6_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r64); const i_r58 = ɵngcc0.ɵɵnextContext().index; const ctx_r63 = ɵngcc0.ɵɵnextContext(); return ctx_r63.toggleOperatorsDropDown($event, i_r58); });
    ɵngcc0.ɵɵelementStart(2, "igx-icon");
    ɵngcc0.ɵɵtext(3, "expand_more");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "igx-drop-down", 40, 41);
    ɵngcc0.ɵɵlistener("onSelection", function IgxGridFilteringRowComponent_ng_container_14_span_6_Template_igx_drop_down_onSelection_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r64); const item_r57 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r66 = ɵngcc0.ɵɵnextContext(); return ctx_r66.onLogicOperatorChanged($event, item_r57); });
    ɵngcc0.ɵɵelementStart(8, "igx-drop-down-item", 17);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "igx-drop-down-item", 17);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r62 = ɵngcc0.ɵɵreference(7);
    const item_r57 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r61 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("igxDropDownItemNavigation", _r62)("displayDensity", ctx_r61.column.grid.displayDensity);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r61.filteringService.getOperatorAsString(item_r57.afterOperator));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("displayDensity", ctx_r61.column.grid.displayDensity);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", 0)("selected", item_r57.afterOperator === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r61.filteringService.grid.resourceStrings.igx_grid_filter_operator_and);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", 1)("selected", item_r57.afterOperator === 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r61.filteringService.grid.resourceStrings.igx_grid_filter_operator_or);
} }
function IgxGridFilteringRowComponent_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    const _r70 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0, 33);
    ɵngcc0.ɵɵelementStart(1, "igx-chip", 34, 35);
    ɵngcc0.ɵɵlistener("pointerdown", function IgxGridFilteringRowComponent_ng_container_14_Template_igx_chip_pointerdown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r70); const _r60 = ɵngcc0.ɵɵreference(2); const ctx_r69 = ɵngcc0.ɵɵnextContext(); return ctx_r69.onChipPointerdown($event, _r60); })("click", function IgxGridFilteringRowComponent_ng_container_14_Template_igx_chip_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r70); const item_r57 = ctx.$implicit; const ctx_r71 = ɵngcc0.ɵɵnextContext(); return ctx_r71.onChipClick($event, item_r57); })("keydown", function IgxGridFilteringRowComponent_ng_container_14_Template_igx_chip_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r70); const item_r57 = ctx.$implicit; const ctx_r72 = ɵngcc0.ɵɵnextContext(); return ctx_r72.onChipKeyDown($event, item_r57); })("onRemove", function IgxGridFilteringRowComponent_ng_container_14_Template_igx_chip_onRemove_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r70); const item_r57 = ctx.$implicit; const ctx_r73 = ɵngcc0.ɵɵnextContext(); return ctx_r73.onChipRemoved($event, item_r57); });
    ɵngcc0.ɵɵelement(3, "igx-icon", 36);
    ɵngcc0.ɵɵelementStart(4, "span");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, IgxGridFilteringRowComponent_ng_container_14_span_6_Template, 12, 10, "span", 37);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r57 = ctx.$implicit;
    const last_r59 = ctx.last;
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("selectable", false)("selected", item_r57.isSelected)("displayDensity", ctx_r10.displayDensity)("removable", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("name", item_r57.expression.condition.iconName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r10.filteringService.getChipLabel(item_r57.expression));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !last_r59);
} }
function IgxGridFilteringRowComponent_button_15_Template(rf, ctx) { if (rf & 1) {
    const _r75 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 42);
    ɵngcc0.ɵɵlistener("click", function IgxGridFilteringRowComponent_button_15_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r75); const ctx_r74 = ɵngcc0.ɵɵnextContext(); return ctx_r74.scrollChipsOnArrowPress("right"); });
    ɵngcc0.ɵɵelementStart(1, "igx-icon");
    ɵngcc0.ɵɵtext(2, "navigate_next");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c11 = function (a0) { return { $implicit: a0 }; };
export class IgxGridFilteringRowComponent {
    constructor(filteringService, element, cdr) {
        this.filteringService = filteringService;
        this.element = element;
        this.cdr = cdr;
        this._positionSettings = {
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Bottom
        };
        this._conditionsOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)
        };
        this._operatorsOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)
        };
        this.chipAreaScrollOffset = 0;
        this._column = null;
        this.isKeyPressed = false;
        this.isComposing = false;
        this._cancelChipClick = false;
    }
    get column() {
        return this._column;
    }
    set column(val) {
        if (this._column) {
            this.expressionsList.forEach(exp => exp.isSelected = false);
        }
        if (val) {
            this._column = val;
            this.expressionsList = this.filteringService.getExpressions(this._column.field);
            this.resetExpression();
            this.chipAreaScrollOffset = 0;
            this.transform(this.chipAreaScrollOffset);
        }
    }
    get value() {
        return this.expression ? this.expression.searchVal : null;
    }
    set value(val) {
        if (!val && val !== 0) {
            this.expression.searchVal = null;
            this.showHideArrowButtons();
        }
        else {
            this.expression.searchVal = DataUtil.parseValue(this.column.dataType, val);
            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {
                this.addExpression(true);
            }
        }
        this.filter();
    }
    get displayDensity() {
        return this.column.grid.displayDensity === DisplayDensity.comfortable ? DisplayDensity.cosy : this.column.grid.displayDensity;
    }
    get styleClasses() {
        let classes = 'igx-grid__filtering-row';
        switch (this.column.grid.displayDensity) {
            case DisplayDensity.compact:
                classes = classes + ' igx-grid__filtering-row--compact';
                break;
            case DisplayDensity.cosy:
                classes = classes + ' igx-grid__filtering-row--cosy';
                break;
        }
        return classes;
    }
    ngAfterViewInit() {
        this._conditionsOverlaySettings.outlet = this.column.grid.outlet;
        this._operatorsOverlaySettings.outlet = this.column.grid.outlet;
        const selectedItem = this.expressionsList.find(expr => expr.isSelected === true);
        if (selectedItem) {
            this.expression = selectedItem.expression;
        }
        this.input.nativeElement.focus();
    }
    onKeydownHandler(evt) {
        if (evt.key === "Escape" /* ESCAPE */ || evt.key === "Esc" /* ESCAPE_IE */ ||
            evt.ctrlKey && evt.shiftKey && evt.key.toLowerCase() === 'l') {
            evt.preventDefault();
            evt.stopPropagation();
            this.close();
        }
    }
    get disabled() {
        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);
    }
    get template() {
        if (this.column.dataType === DataType.Date) {
            return this.defaultDateUI;
        }
        return this.defaultFilterUI;
    }
    get type() {
        switch (this.column.dataType) {
            case DataType.String:
            case DataType.Boolean:
                return 'text';
            case DataType.Number:
                return 'number';
        }
    }
    get conditions() {
        return this.column.filters.conditionList();
    }
    get isUnaryCondition() {
        if (this.expression.condition) {
            return this.expression.condition.isUnary;
        }
        else {
            return true;
        }
    }
    get placeholder() {
        if (this.expression.condition && this.expression.condition.isUnary) {
            return this.filteringService.getChipLabel(this.expression);
        }
        else if (this.column.dataType === DataType.Date) {
            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;
        }
        else if (this.column.dataType === DataType.Boolean) {
            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;
        }
        else {
            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;
        }
    }
    /**
     * Event handler for keydown on the input group's prefix.
     */
    onPrefixKeyDown(event) {
        if ((event.key === "Enter" /* ENTER */ || event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */) && this.dropDownConditions.collapsed) {
            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
            event.stopImmediatePropagation();
        }
        else if (event.key === "Tab" /* TAB */ && !this.dropDownConditions.collapsed) {
            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
        }
    }
    /**
     * Event handler for keydown on the input.
     */
    onInputKeyDown(event) {
        this.isKeyPressed = true;
        event.stopPropagation();
        if (this.column.dataType === DataType.Boolean) {
            if (event.key === "Enter" /* ENTER */ || event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */) {
                this.inputGroupPrefix.nativeElement.focus();
                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
                return;
            }
        }
        if (event.key === "Enter" /* ENTER */) {
            if (this.isComposing) {
                return;
            }
            this.commitInput();
        }
        else if (event.altKey && (event.key === "ArrowDown" /* DOWN_ARROW */ || event.key === "Down" /* DOWN_ARROW_IE */)) {
            this.inputGroupPrefix.nativeElement.focus();
            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
        }
        else if (event.key === "Escape" /* ESCAPE */ || event.key === "Esc" /* ESCAPE_IE */ ||
            event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'l') {
            this.close();
        }
    }
    /**
     * Event handler for keyup on the input.
     */
    onInputKeyUp(eventArgs) {
        this.isKeyPressed = false;
    }
    /**
     * Event handler for input on the input.
     */
    onInput(eventArgs) {
        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,
        // when you have a japanese character as a placeholder, on init the value here is empty string .
        const target = eventArgs.target;
        if (isEdge() && target.type !== 'number' || this.isKeyPressed && isIE() || target.value || target.checkValidity()) {
            this.value = target.value;
        }
    }
    /**
     * Event handler for compositionstart on the input.
     */
    onCompositionStart() {
        this.isComposing = true;
    }
    /**
     * Event handler for compositionend on the input.
     */
    onCompositionEnd() {
        this.isComposing = false;
    }
    /**
     * Event handler for input click event.
     */
    onInputClick() {
        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {
            this.inputGroupPrefix.nativeElement.focus();
            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
        }
    }
    /**
     * Event handler for datepicker's close.
     */
    datePickerClose() {
        this.input.nativeElement.focus();
    }
    /**
     * Returns the filtering operation condition for a given value.
     */
    getCondition(value) {
        return this.column.filters.condition(value);
    }
    /**
     * Returns the translated condition name for a given value.
     */
    translateCondition(value) {
        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;
    }
    /**
     * Returns the icon name of the current condition.
     */
    getIconName() {
        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {
            return this.getCondition(this.conditions[0]).iconName;
        }
        else {
            return this.expression.condition.iconName;
        }
    }
    /**
     * Returns whether a given condition is selected in dropdown.
     */
    isConditionSelected(conditionName) {
        if (this.expression.condition) {
            return this.expression.condition.name === conditionName;
        }
        else {
            return false;
        }
    }
    /**
     * Clears the current filtering.
     */
    clearFiltering() {
        this.filteringService.clearFilter(this.column.field);
        this.resetExpression();
        if (this.input) {
            this.input.nativeElement.focus();
        }
        this.cdr.detectChanges();
        this.chipAreaScrollOffset = 0;
        this.transform(this.chipAreaScrollOffset);
    }
    /**
     * Commits the value of the input.
     */
    commitInput() {
        const selectedItem = this.expressionsList.filter(ex => ex.isSelected === true);
        selectedItem.forEach(e => e.isSelected = false);
        let indexToDeselect = -1;
        for (let index = 0; index < this.expressionsList.length; index++) {
            const expression = this.expressionsList[index].expression;
            if (expression.searchVal === null && !expression.condition.isUnary) {
                indexToDeselect = index;
            }
        }
        if (indexToDeselect !== -1) {
            this.removeExpression(indexToDeselect, this.expression);
        }
        this.resetExpression();
        this.scrollChipsWhenAddingExpression();
    }
    /**
     * Clears the value of the input.
     */
    clearInput() {
        this.value = null;
    }
    /**
     * Event handler for keydown on clear button.
     */
    onClearKeyDown(eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */ || eventArgs.key === " " /* SPACE */ || eventArgs.key === "Spacebar" /* SPACE_IE */) {
            eventArgs.preventDefault();
            this.clearInput();
            this.input.nativeElement.focus();
        }
    }
    /**
     * Event handler for click on clear button.
     */
    onClearClick() {
        this.clearInput();
        this.input.nativeElement.focus();
    }
    /**
     * Event handler for keydown on commit button.
     */
    onCommitKeyDown(eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */ || eventArgs.key === " " /* SPACE */ || eventArgs.key === "Spacebar" /* SPACE_IE */) {
            eventArgs.preventDefault();
            this.commitInput();
            this.input.nativeElement.focus();
        }
    }
    /**
     * Event handler for click on commit button.
     */
    onCommitClick() {
        this.commitInput();
        this.input.nativeElement.focus();
    }
    /**
     * Event handler for focusout on the input group.
     */
    onInputGroupFocusout() {
        if (!this.value && this.value !== 0 &&
            this.expression.condition && !this.expression.condition.isUnary) {
            return;
        }
        requestAnimationFrame(() => {
            const focusedElement = document.activeElement;
            if (focusedElement.className === 'igx-chip__remove' || focusedElement.tagName === 'IGX-DAY-ITEM') {
                return;
            }
            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement))
                && this.dropDownConditions.collapsed) {
                this.commitInput();
            }
        });
    }
    /**
     * Closes the filtering edit row.
     */
    close() {
        if (this.expressionsList.length === 1 &&
            this.expressionsList[0].expression.searchVal === null &&
            this.expressionsList[0].expression.condition.isUnary === false) {
            this.filteringService.getExpressions(this.column.field).pop();
            this.filter();
        }
        else {
            const condToRemove = this.expressionsList.filter(ex => ex.expression.searchVal === null && !ex.expression.condition.isUnary);
            if (condToRemove && condToRemove.length > 0) {
                condToRemove.forEach(c => this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(c)));
                this.filter();
            }
        }
        this.filteringService.isFilterRowVisible = false;
        this.filteringService.updateFilteringCell(this.column);
        this.filteringService.filteredColumn = null;
        this.filteringService.selectedExpression = null;
        this.filteringService.grid.theadRow.nativeElement.focus();
        this.chipAreaScrollOffset = 0;
        this.transform(this.chipAreaScrollOffset);
    }
    /*
    * noop
    */
    noop() { }
    /**
     *  Event handler for date picker's selection.
     */
    onDateSelected(value) {
        this.value = value;
    }
    /** @hidden @internal */
    inputGroupPrefixClick(event) {
        event.stopPropagation();
        event.currentTarget.focus();
        this.toggleConditionsDropDown(event.currentTarget);
    }
    /**
     * Opens the conditions dropdown.
     */
    toggleConditionsDropDown(target) {
        this._conditionsOverlaySettings.target = target;
        this._conditionsOverlaySettings.excludeFromOutsideClick = [target];
        this.dropDownConditions.toggle(this._conditionsOverlaySettings);
    }
    /**
     * Opens the logic operators dropdown.
     */
    toggleOperatorsDropDown(eventArgs, index) {
        this._operatorsOverlaySettings.target = eventArgs.target.parentElement;
        this._operatorsOverlaySettings.excludeFromOutsideClick = [eventArgs.target.parentElement];
        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);
    }
    /**
     * Event handler for change event in conditions dropdown.
     */
    onConditionsChanged(eventArgs) {
        const value = eventArgs.newSelection.value;
        this.expression.condition = this.getCondition(value);
        if (this.expression.condition.isUnary) {
            // update grid's filtering on the next cycle to ensure the drop-down is closed
            // if the drop-down is not closed this event handler will be invoked multiple times
            requestAnimationFrame(() => this.unaryConditionChangedCallback());
        }
        else {
            requestAnimationFrame(() => this.conditionChangedCallback());
        }
        if (this.input) {
            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,
            // if it has been focused and then set to readonly.
            requestAnimationFrame(() => this.input.nativeElement.focus());
        }
    }
    onChipPointerdown(args, chip) {
        const activeElement = document.activeElement;
        this._cancelChipClick = chip.selected && activeElement &&
            this.inputGroup.nativeElement.contains(activeElement);
    }
    onChipClick(args, item) {
        if (this._cancelChipClick) {
            this._cancelChipClick = false;
            return;
        }
        this.expressionsList.forEach(ex => ex.isSelected = false);
        this.toggleChip(item);
    }
    toggleChip(item) {
        item.isSelected = !item.isSelected;
        if (item.isSelected) {
            this.expression = item.expression;
            if (this.input) {
                this.input.nativeElement.focus();
            }
        }
    }
    /**
     * Event handler for chip keydown event.
     */
    onChipKeyDown(eventArgs, item) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            eventArgs.preventDefault();
            this.toggleChip(item);
        }
    }
    /**
     * Scrolls the first chip into view if the tab key is pressed on the left arrow.
     */
    onLeftArrowKeyDown(event) {
        if (event.key === "Tab" /* TAB */) {
            this.chipAreaScrollOffset = 0;
            this.transform(this.chipAreaScrollOffset);
        }
    }
    /**
     * Event handler for chip removed event.
     */
    onChipRemoved(eventArgs, item) {
        const indexToRemove = this.expressionsList.indexOf(item);
        this.removeExpression(indexToRemove, item.expression);
        this.scrollChipsOnRemove();
    }
    /**
     * Event handler for logic operator changed event.
     */
    onLogicOperatorChanged(eventArgs, expression) {
        if (eventArgs.oldSelection) {
            expression.afterOperator = eventArgs.newSelection.value;
            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;
            // update grid's filtering on the next cycle to ensure the drop-down is closed
            // if the drop-down is not closed this event handler will be invoked multiple times
            requestAnimationFrame(() => this.filter());
        }
    }
    /**
     * Scrolls the chips into the chip area when left or right arrows are pressed.
     */
    scrollChipsOnArrowPress(arrowPosition) {
        let count = 0;
        const chipAraeChildren = this.chipsArea.element.nativeElement.children;
        const containerRect = this.container.nativeElement.getBoundingClientRect();
        if (arrowPosition === 'right') {
            for (let index = 0; index < chipAraeChildren.length; index++) {
                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {
                    count++;
                }
            }
            if (count < chipAraeChildren.length) {
                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -
                    Math.ceil(containerRect.right) + 1;
                this.transform(this.chipAreaScrollOffset);
            }
        }
        if (arrowPosition === 'left') {
            for (let index = 0; index < chipAraeChildren.length; index++) {
                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {
                    count++;
                }
            }
            if (count > 0) {
                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -
                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;
                this.transform(this.chipAreaScrollOffset);
            }
        }
    }
    showHideArrowButtons() {
        requestAnimationFrame(() => {
            if (this.filteringService.isFilterRowVisible) {
                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;
                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;
                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;
                // TODO: revise the cdr.detectChanges() usage here
                if (!this.cdr.destroyed) {
                    this.cdr.detectChanges();
                }
            }
        });
    }
    addExpression(isSelected) {
        const exprUI = new ExpressionUI();
        exprUI.expression = this.expression;
        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;
        exprUI.isSelected = isSelected;
        this.expressionsList.push(exprUI);
        const length = this.expressionsList.length;
        if (this.expressionsList[length - 2]) {
            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;
        }
        this.showHideArrowButtons();
    }
    removeExpression(indexToRemove, expression) {
        if (indexToRemove === 0 && this.expressionsList.length === 1) {
            this.clearFiltering();
            return;
        }
        this.filteringService.removeExpression(this.column.field, indexToRemove);
        this.filter();
        if (this.expression === expression) {
            this.resetExpression();
        }
        this.showHideArrowButtons();
    }
    resetExpression() {
        this.expression = {
            fieldName: this.column.field,
            condition: null,
            searchVal: null,
            ignoreCase: this.column.filteringIgnoreCase
        };
        if (this.column.dataType !== DataType.Boolean) {
            this.expression.condition = this.getCondition(this.conditions[0]);
        }
        if (this.column.dataType === DataType.Date && this.input) {
            this.input.nativeElement.value = null;
        }
        this.showHideArrowButtons();
    }
    scrollChipsWhenAddingExpression() {
        const chipAraeChildren = this.chipsArea.element.nativeElement.children;
        if (!chipAraeChildren || chipAraeChildren.length === 0) {
            return;
        }
        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);
        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);
        if (lastChipRectRight >= containerRectRight) {
            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;
            this.transform(this.chipAreaScrollOffset);
        }
    }
    /**
     * @hidden
     * Resets the chips area
     * @memberof IgxGridFilteringRowComponent
     */
    resetChipsArea() {
        this.chipAreaScrollOffset = 0;
        this.transform(this.chipAreaScrollOffset);
        this.showHideArrowButtons();
    }
    transform(offset) {
        requestAnimationFrame(() => {
            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;
        });
    }
    scrollChipsOnRemove() {
        let count = 0;
        const chipAraeChildren = this.chipsArea.element.nativeElement.children;
        const containerRect = this.container.nativeElement.getBoundingClientRect();
        for (let index = 0; index < chipAraeChildren.length; index++) {
            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.left)) {
                count++;
            }
        }
        if (count <= 2) {
            this.chipAreaScrollOffset = 0;
        }
        else {
            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;
            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;
        }
        this.transform(this.chipAreaScrollOffset);
    }
    conditionChangedCallback() {
        if (!!this.expression.searchVal || this.expression.searchVal === 0) {
            this.filter();
        }
        else if (this.value) {
            this.value = null;
        }
    }
    unaryConditionChangedCallback() {
        if (this.value) {
            this.value = null;
        }
        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {
            this.addExpression(true);
        }
        this.filter();
    }
    filter() {
        this.filteringService.filterInternal(this.column.field);
    }
    get isColumnFiltered() {
        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;
    }
    get isNarrowWidth() {
        return this.element.nativeElement.offsetWidth < 432;
    }
}
IgxGridFilteringRowComponent.ɵfac = function IgxGridFilteringRowComponent_Factory(t) { return new (t || IgxGridFilteringRowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxFilteringService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IgxGridFilteringRowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxGridFilteringRowComponent, selectors: [["igx-grid-filtering-row"]], viewQuery: function IgxGridFilteringRowComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, TemplateRef);
        ɵngcc0.ɵɵviewQuery(_c2, true, ElementRef);
        ɵngcc0.ɵɵstaticViewQuery(_c3, true, IgxDropDownComponent);
        ɵngcc0.ɵɵstaticViewQuery(_c4, true, IgxChipsAreaComponent);
        ɵngcc0.ɵɵviewQuery(_c5, true, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c6, true, ElementRef);
        ɵngcc0.ɵɵstaticViewQuery(_c7, true);
        ɵngcc0.ɵɵviewQuery(_c8, true);
        ɵngcc0.ɵɵstaticViewQuery(_c9, true);
        ɵngcc0.ɵɵviewQuery(_c10, true, IgxDropDownComponent);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultFilterUI = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultDateUI = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropDownConditions = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chipsArea = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputGroup = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputGroupPrefix = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.operand = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.closeButton = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropDownOperators = _t);
    } }, hostVars: 2, hostBindings: function IgxGridFilteringRowComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function IgxGridFilteringRowComponent_keydown_HostBindingHandler($event) { return ctx.onKeydownHandler($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.styleClasses);
    } }, inputs: { column: "column", value: "value" }, decls: 27, vars: 19, consts: [[3, "displayDensity", "height", "onSelection"], ["inputGroupConditions", ""], [3, "value", "selected", 4, "ngFor", "ngForOf"], ["defaultFilterUI", ""], ["defaultDateUI", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["igxButton", "icon", "class", "igx-grid__filtering-row-scroll-start", 3, "keydown", "click", 4, "ngIf"], [1, "igx-grid__filtering-row-main"], ["container", ""], ["chipsArea", ""], ["tabindex", "0", 4, "ngFor", "ngForOf"], ["igxButton", "icon", "class", "igx-grid__filtering-row-scroll-end", 3, "click", 4, "ngIf"], [3, "ngClass"], ["buttonsContainer", ""], ["igxRipple", "", 3, "displayDensity", "igxButton", "disabled", "tabindex", "click"], ["igxRipple", "", 3, "displayDensity", "igxButton", "click"], ["closeButton", ""], [3, "value", "selected"], [1, "igx-grid__filtering-dropdown-items"], ["fontSet", "imx-icons", 3, "name"], [1, "igx-grid__filtering-dropdown-text"], ["type", "box", 3, "displayDensity", "focusout"], ["inputGroup", ""], ["tabindex", "0", 3, "igxDropDownItemNavigation", "click", "keydown"], ["inputGroupPrefix", ""], ["igxInput", "", "tabindex", "0", "autocomplete", "off", 3, "placeholder", "value", "type", "readonly", "input", "click", "compositionstart", "compositionend", "keydown", "keyup"], ["input", ""], [4, "ngIf"], ["tabindex", "0", 3, "keydown", "click"], ["tabindex", "0", "mode", "dropdown", 3, "value", "outlet", "locale", "onSelection", "onClosed"], ["igxDatePickerTemplate", ""], ["igxInput", "", "tabindex", "0", "autocomplete", "off", 3, "placeholder", "value", "readonly", "click", "keydown"], ["igxButton", "icon", 1, "igx-grid__filtering-row-scroll-start", 3, "keydown", "click"], ["tabindex", "0"], ["id", "chip", 3, "selectable", "selected", "displayDensity", "removable", "pointerdown", "click", "keydown", "onRemove"], ["chip", ""], ["igxPrefix", "", "fontSet", "imx-icons", 3, "name"], ["id", "operand", 4, "ngIf"], ["id", "operand"], ["igxButton", "", 3, "igxDropDownItemNavigation", "displayDensity", "click"], [3, "displayDensity", "onSelection"], ["operators", ""], ["igxButton", "icon", 1, "igx-grid__filtering-row-scroll-end", 3, "click"]], template: function IgxGridFilteringRowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "igx-drop-down", 0, 1);
        ɵngcc0.ɵɵlistener("onSelection", function IgxGridFilteringRowComponent_Template_igx_drop_down_onSelection_0_listener($event) { return ctx.onConditionsChanged($event); });
        ɵngcc0.ɵɵtemplate(2, IgxGridFilteringRowComponent_igx_drop_down_item_2_Template, 5, 4, "igx-drop-down-item", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, IgxGridFilteringRowComponent_ng_template_3_Template, 8, 8, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(5, IgxGridFilteringRowComponent_ng_template_5_Template, 2, 3, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(7, IgxGridFilteringRowComponent_ng_container_7_Template, 1, 0, "ng-container", 5);
        ɵngcc0.ɵɵtemplate(8, IgxGridFilteringRowComponent_button_8_Template, 3, 0, "button", 6);
        ɵngcc0.ɵɵelementStart(9, "div", 7, 8);
        ɵngcc0.ɵɵelementStart(11, "div");
        ɵngcc0.ɵɵelementStart(12, "igx-chips-area", null, 9);
        ɵngcc0.ɵɵtemplate(14, IgxGridFilteringRowComponent_ng_container_14_Template, 7, 7, "ng-container", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, IgxGridFilteringRowComponent_button_15_Template, 3, 0, "button", 11);
        ɵngcc0.ɵɵelementStart(16, "div", 12, 13);
        ɵngcc0.ɵɵelementStart(18, "button", 14);
        ɵngcc0.ɵɵlistener("click", function IgxGridFilteringRowComponent_Template_button_click_18_listener() { return ctx.clearFiltering(); });
        ɵngcc0.ɵɵelementStart(19, "igx-icon");
        ɵngcc0.ɵɵtext(20, "refresh");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(21);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "button", 15, 16);
        ɵngcc0.ɵɵlistener("click", function IgxGridFilteringRowComponent_Template_button_click_22_listener() { return ctx.close(); });
        ɵngcc0.ɵɵelementStart(24, "igx-icon");
        ɵngcc0.ɵɵtext(25, "close");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(26);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("displayDensity", ctx.displayDensity)("height", "200px");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.conditions);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(17, _c11, ctx));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showArrows);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.expressionsList);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showArrows);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.isNarrowWidth ? "igx-grid__filtering-row-editing-buttons--small" : "igx-grid__filtering-row-editing-buttons");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("displayDensity", ctx.column.grid.displayDensity)("igxButton", ctx.isNarrowWidth ? "icon" : "flat")("disabled", ctx.disabled)("tabindex", ctx.disabled);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.isNarrowWidth ? "" : ctx.filteringService.grid.resourceStrings.igx_grid_filter_row_reset, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayDensity", ctx.column.grid.displayDensity)("igxButton", ctx.isNarrowWidth ? "icon" : "flat");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.isNarrowWidth ? "" : ctx.filteringService.grid.resourceStrings.igx_grid_filter_row_close, " ");
    } }, directives: [ɵngcc2.IgxDropDownComponent, ɵngcc3.NgForOf, ɵngcc3.NgTemplateOutlet, ɵngcc3.NgIf, ɵngcc4.IgxChipsAreaComponent, ɵngcc3.NgClass, ɵngcc5.IgxRippleDirective, ɵngcc6.IgxButtonDirective, ɵngcc7.IgxIconComponent, ɵngcc8.IgxDropDownItemComponent, ɵngcc9.IgxInputGroupComponent, ɵngcc10.IgxPrefixDirective, ɵngcc11.IgxDropDownItemNavigationDirective, ɵngcc12.IgxInputDirective, ɵngcc13.IgxSuffixDirective, ɵngcc14.IgxDatePickerComponent, ɵngcc15.IgxDatePickerTemplateDirective, ɵngcc16.IgxChipComponent], pipes: [ɵngcc17.IgxColumnFormatterPipe, ɵngcc3.DatePipe], encapsulation: 2, changeDetection: 0 });
IgxGridFilteringRowComponent.ctorParameters = () => [
    { type: IgxFilteringService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
IgxGridFilteringRowComponent.propDecorators = {
    column: [{ type: Input }],
    value: [{ type: Input }],
    defaultFilterUI: [{ type: ViewChild, args: ['defaultFilterUI', { read: TemplateRef, static: true },] }],
    defaultDateUI: [{ type: ViewChild, args: ['defaultDateUI', { read: TemplateRef, static: true },] }],
    input: [{ type: ViewChild, args: ['input', { read: ElementRef },] }],
    dropDownConditions: [{ type: ViewChild, args: ['inputGroupConditions', { read: IgxDropDownComponent, static: true },] }],
    chipsArea: [{ type: ViewChild, args: ['chipsArea', { read: IgxChipsAreaComponent, static: true },] }],
    dropDownOperators: [{ type: ViewChildren, args: ['operators', { read: IgxDropDownComponent },] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup', { read: ElementRef },] }],
    inputGroupPrefix: [{ type: ViewChild, args: ['inputGroupPrefix', { read: ElementRef },] }],
    container: [{ type: ViewChild, args: ['container', { static: true },] }],
    operand: [{ type: ViewChild, args: ['operand',] }],
    closeButton: [{ type: ViewChild, args: ['closeButton', { static: true },] }],
    styleClasses: [{ type: HostBinding, args: ['class',] }],
    onKeydownHandler: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridFilteringRowComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-filtering-row',
                template: "<!-- Have to apply styles inline because of the overlay outlet ... -->\n<igx-drop-down #inputGroupConditions [displayDensity]=\"displayDensity\" [height]=\"'200px'\" (onSelection)=\"onConditionsChanged($event)\">\n    <igx-drop-down-item *ngFor=\"let condition of conditions\"\n        [value]=\"condition\"\n        [selected]=\"isConditionSelected(condition)\">\n        <div class=\"igx-grid__filtering-dropdown-items\">\n            <igx-icon fontSet=\"imx-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n            <span class=\"igx-grid__filtering-dropdown-text\">{{ translateCondition(condition) }}</span>\n        </div>\n    </igx-drop-down-item>\n</igx-drop-down>\n\n<ng-template #defaultFilterUI>\n    <igx-input-group #inputGroup type=\"box\" [displayDensity]=\"displayDensity\" (focusout)=\"onInputGroupFocusout()\">\n        <igx-prefix #inputGroupPrefix\n                    (click)=\"inputGroupPrefixClick($event)\"\n                    (keydown)=\"onPrefixKeyDown($event)\"\n                    tabindex=\"0\"\n                    [igxDropDownItemNavigation]=\"inputGroupConditions\">\n            <igx-icon fontSet=\"imx-icons\" [name]=\"getIconName()\"></igx-icon>\n        </igx-prefix>\n        <input\n            #input\n            igxInput\n            tabindex=\"0\"\n            [placeholder]=\"placeholder\"\n            autocomplete=\"off\"\n            [value]=\"value\"\n            (input)=\"onInput($event)\"\n            [type]=\"type\"\n            [readonly]=\"isUnaryCondition\"\n            (click)=\"onInputClick()\"\n            (compositionstart)=\"onCompositionStart()\"\n            (compositionend)=\"onCompositionEnd()\"\n            (keydown)=\"onInputKeyDown($event)\"\n            (keyup)=\"onInputKeyUp($event)\"/>\n            <igx-suffix *ngIf=\"value || value === 0\" >\n                <igx-icon (keydown)=\"onCommitKeyDown($event)\" (click)=\"onCommitClick()\" tabindex=\"0\">done</igx-icon>\n                <igx-icon (keydown)=\"onClearKeyDown($event)\" (click)=\"onClearClick()\" tabindex=\"0\">clear</igx-icon>\n            </igx-suffix>\n    </igx-input-group>\n</ng-template>\n\n<ng-template #defaultDateUI>\n    <igx-date-picker\n        tabindex=\"0\"\n        mode=\"dropdown\"\n        [value]=\"value\"\n        [outlet]=\"filteringService.grid.outlet\"\n        [locale]=\"filteringService.grid.locale\"\n        (onSelection)=\"onDateSelected($event)\"\n        (onClosed)=\"datePickerClose()\">\n        <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\">\n            <igx-input-group #inputGroup type=\"box\" [displayDensity]=\"displayDensity\" (focusout)=\"onInputGroupFocusout()\">\n                <igx-prefix #inputGroupPrefix\n                            tabindex=\"0\"\n                            (click)=\"inputGroupPrefixClick($event)\"\n                            (keydown)=\"onPrefixKeyDown($event)\"\n                            [igxDropDownItemNavigation]=\"inputGroupConditions\">\n                    <igx-icon fontSet=\"imx-icons\" [name]=\"expression.condition.iconName\"></igx-icon>\n                </igx-prefix>\n                <input #input\n                       igxInput\n                       tabindex=\"0\"\n                       (click)=\"expression.condition.isUnary ? noop() : openDialog(inputGroup.element.nativeElement)\"\n                       [placeholder]=\"placeholder\"\n                       autocomplete=\"off\"\n                       [value]=\"\n                            column.formatter\n                            ? (value | columnFormatter:column.formatter)\n                            : (value | date:column.pipeArgs.format:undefined:filteringService.grid.locale)\n                        \"\n                       [readonly]=\"true\"\n                       (keydown)=\"onInputKeyDown($event)\"/>\n                <igx-suffix *ngIf=\"value\">\n                    <igx-icon (keydown)=\"onCommitKeyDown($event)\" (click)=\"onCommitClick()\" tabindex=\"0\">done</igx-icon>\n                    <igx-icon (keydown)=\"onClearKeyDown($event)\" (click)=\"clearInput()\" tabindex=\"0\">clear</igx-icon>\n                </igx-suffix>\n            </igx-input-group>\n            </ng-template>\n    </igx-date-picker>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this }\"></ng-container>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-start\" *ngIf=\"showArrows\" (keydown)=\"onLeftArrowKeyDown($event)\" (click)=\"scrollChipsOnArrowPress('left')\">\n    <igx-icon>navigate_before</igx-icon>\n</button>\n\n<div #container class=\"igx-grid__filtering-row-main\">\n    <div>\n         <igx-chips-area #chipsArea>\n            <ng-container *ngFor=\"let item of expressionsList; index as i; let last = last;\" tabindex=\"0\">\n                <igx-chip #chip id='chip'\n                    (pointerdown)=\"onChipPointerdown($event, chip)\"\n                    (click)=\"onChipClick($event, item)\"\n                    (keydown)=\"onChipKeyDown($event, item)\"\n                    (onRemove)=\"onChipRemoved($event, item)\"\n                    [selectable]=\"false\"\n                    [selected]=\"item.isSelected\"\n                    [displayDensity]=\"displayDensity\"\n                    [removable]=\"true\">\n                    <igx-icon\n                        igxPrefix\n                        fontSet=\"imx-icons\"\n                        [name]=\"item.expression.condition.iconName\">\n                    </igx-icon>\n                    <span>{{filteringService.getChipLabel(item.expression)}}</span>\n                </igx-chip>\n\n                <span id='operand' *ngIf=\"!last\">\n                    <button igxButton (click)=\"toggleOperatorsDropDown($event, i)\" [igxDropDownItemNavigation]=\"operators\" [displayDensity]=\"column.grid.displayDensity\">\n                        <igx-icon>expand_more</igx-icon>\n                        <span>{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n                    </button>\n                    <igx-drop-down [displayDensity]=\"column.grid.displayDensity\" #operators (onSelection)=\"onLogicOperatorChanged($event, item)\">\n                            <igx-drop-down-item [value]=\"0\" [selected]=\"item.afterOperator === 0\">{{filteringService.grid.resourceStrings.igx_grid_filter_operator_and}}</igx-drop-down-item>\n                            <igx-drop-down-item [value]=\"1\" [selected]=\"item.afterOperator === 1\">{{filteringService.grid.resourceStrings.igx_grid_filter_operator_or}}</igx-drop-down-item>\n                    </igx-drop-down>\n                </span>\n            </ng-container>\n        </igx-chips-area>\n    </div>\n</div>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-end\" *ngIf=\"showArrows\" (click)=\"scrollChipsOnArrowPress('right')\">\n    <igx-icon>navigate_next</igx-icon>\n</button>\n\n<div #buttonsContainer [ngClass]=\"isNarrowWidth ? 'igx-grid__filtering-row-editing-buttons--small' : 'igx-grid__filtering-row-editing-buttons'\">\n    <button [displayDensity]=\"column.grid.displayDensity\" [igxButton]=\"isNarrowWidth ? 'icon' : 'flat'\" igxRipple (click)=\"clearFiltering()\" [disabled]=\"disabled\" [tabindex]=\"disabled\">\n        <igx-icon>refresh</igx-icon>\n        {{isNarrowWidth ? '' : filteringService.grid.resourceStrings.igx_grid_filter_row_reset}}\n    </button>\n    <button #closeButton [displayDensity]=\"column.grid.displayDensity\" [igxButton]=\"isNarrowWidth ? 'icon' : 'flat'\"  igxRipple (click)=\"close()\">\n        <igx-icon>close</igx-icon>\n        {{isNarrowWidth ? '' : filteringService.grid.resourceStrings.igx_grid_filter_row_close}}\n    </button>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.IgxFilteringService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { column: [{
            type: Input
        }], value: [{
            type: Input
        }], styleClasses: [{
            type: HostBinding,
            args: ['class']
        }], onKeydownHandler: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], defaultFilterUI: [{
            type: ViewChild,
            args: ['defaultFilterUI', { read: TemplateRef, static: true }]
        }], defaultDateUI: [{
            type: ViewChild,
            args: ['defaultDateUI', { read: TemplateRef, static: true }]
        }], input: [{
            type: ViewChild,
            args: ['input', { read: ElementRef }]
        }], dropDownConditions: [{
            type: ViewChild,
            args: ['inputGroupConditions', { read: IgxDropDownComponent, static: true }]
        }], chipsArea: [{
            type: ViewChild,
            args: ['chipsArea', { read: IgxChipsAreaComponent, static: true }]
        }], dropDownOperators: [{
            type: ViewChildren,
            args: ['operators', { read: IgxDropDownComponent }]
        }], inputGroup: [{
            type: ViewChild,
            args: ['inputGroup', { read: ElementRef }]
        }], inputGroupPrefix: [{
            type: ViewChild,
            args: ['inputGroupPrefix', { read: ElementRef }]
        }], container: [{
            type: ViewChild,
            args: ['container', { static: true }]
        }], operand: [{
            type: ViewChild,
            args: ['operand']
        }], closeButton: [{
            type: ViewChild,
            args: ['closeButton', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,