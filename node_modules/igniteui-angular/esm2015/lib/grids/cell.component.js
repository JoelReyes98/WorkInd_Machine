import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, TemplateRef, ViewChild, NgZone } from '@angular/core';
import { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';
import { GridBaseAPIService } from './api.service';
import { getNodeSizeViaRange, isIE, isLeftClick, PlatformUtil } from '../core/utils';
import { IgxGridSelectionService, IgxGridCRUDService } from './selection/selection.service';
import { DeprecateMethod } from '../core/deprecateDecorators';
import { HammerGesturesManager } from '../core/touch';
import { GridSelectionMode } from './common/enums';
/**
 * Providing reference to `IgxGridCellComponent`:
 * ```typescript
 * @ViewChild('grid', { read: IgxGridComponent })
 *  public grid: IgxGridComponent;
 * ```
 * ```typescript
 *  let column = this.grid.columnList.first;
 * ```
 * ```typescript
 *  let cell = column.cells[0];
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './selection/selection.service';
import * as ɵngcc2 from './api.service';
import * as ɵngcc3 from '../core/touch';
import * as ɵngcc4 from '../core/utils';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '../chips/chip.component';
import * as ɵngcc7 from '../directives/text-highlight/text-highlight.directive';
import * as ɵngcc8 from '../icon/icon.component';
import * as ɵngcc9 from '../input-group/input-group.component';
import * as ɵngcc10 from '../directives/input/input.directive';
import * as ɵngcc11 from '../directives/focus/focus.directive';
import * as ɵngcc12 from '../checkbox/checkbox.component';
import * as ɵngcc13 from '../date-picker/date-picker.component';
import * as ɵngcc14 from './common/pipes';

const _c0 = ["defaultCell"];
const _c1 = ["defaultPinnedIndicator"];
const _c2 = ["inlineEditor"];
const _c3 = ["addRowCell"];
function IgxGridCellComponent_ng_template_0_igx_chip_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-chip", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", true)("displayDensity", "compact");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r10.grid.resourceStrings.igx_grid_pinned_row_indicator);
} }
function IgxGridCellComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxGridCellComponent_ng_template_0_igx_chip_0_Template, 2, 3, "igx-chip", 5);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.displayPinnedChip);
} }
function IgxGridCellComponent_ng_template_2_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵpipe(1, "columnFormatter");
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵpipe(3, "date");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "columnFormatter");
    ɵngcc0.ɵɵpipe(6, "number");
    ɵngcc0.ɵɵpipe(7, "date");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("cssClass", ctx_r11.highlightClass)("activeCssClass", ctx_r11.activeHighlightClass)("groupName", ctx_r11.gridID)("value", ctx_r11.formatter ? ɵngcc0.ɵɵpipeBind2(1, 9, ctx_r11.value, ctx_r11.formatter) : ctx_r11.column.dataType === "number" ? ɵngcc0.ɵɵpipeBind3(2, 12, ctx_r11.value, ctx_r11.column.pipeArgs.digitsInfo, ctx_r11.grid.locale) : ctx_r11.column.dataType === "date" ? ɵngcc0.ɵɵpipeBind4(3, 16, ctx_r11.value, ctx_r11.column.pipeArgs.format, ctx_r11.column.pipeArgs.timezone, ctx_r11.grid.locale) : ctx_r11.value)("row", ctx_r11.rowData)("column", ctx_r11.column.field)("containerClass", "igx-grid__td-text")("metadata", ctx_r11.searchMetadata);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r11.formatter ? ɵngcc0.ɵɵpipeBind2(5, 21, ctx_r11.value, ctx_r11.formatter) : ctx_r11.column.dataType === "number" ? ɵngcc0.ɵɵpipeBind3(6, 24, ctx_r11.value, ctx_r11.column.pipeArgs.digitsInfo, ctx_r11.grid.locale) : ctx_r11.column.dataType === "date" ? ɵngcc0.ɵɵpipeBind4(7, 28, ctx_r11.value, ctx_r11.column.pipeArgs.format, ctx_r11.column.pipeArgs.timezone, ctx_r11.grid.locale) : ctx_r11.value);
} }
const _c4 = function (a0, a1) { return { "igx-icon--success": a0, "igx-icon--error": a1 }; };
function IgxGridCellComponent_ng_template_2_igx_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "igx-icon", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c4, ctx_r12.value, !ctx_r12.value));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r12.value ? "check" : "close");
} }
function IgxGridCellComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxGridCellComponent_ng_template_2_div_0_Template, 8, 33, "div", 7);
    ɵngcc0.ɵɵtemplate(1, IgxGridCellComponent_ng_template_2_igx_icon_1_Template, 2, 5, "igx-icon", 8);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.column.dataType !== "boolean");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.column.dataType === "boolean");
} }
function IgxGridCellComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵpipe(1, "columnFormatter");
    ɵngcc0.ɵɵpipe(2, "number");
    ɵngcc0.ɵɵpipe(3, "date");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("cssClass", ctx_r5.highlightClass)("activeCssClass", ctx_r5.activeHighlightClass)("groupName", ctx_r5.gridID)("value", ctx_r5.formatter ? ɵngcc0.ɵɵpipeBind2(1, 9, ctx_r5.value, ctx_r5.formatter) : ctx_r5.column.dataType === "number" ? ɵngcc0.ɵɵpipeBind3(2, 12, ctx_r5.value, ctx_r5.column.pipeArgs.digitsInfo, ctx_r5.grid.locale) : ctx_r5.column.dataType === "date" ? ɵngcc0.ɵɵpipeBind4(3, 16, ctx_r5.value, ctx_r5.column.pipeArgs.format, ctx_r5.column.pipeArgs.timezone, ctx_r5.grid.locale) : ctx_r5.value)("row", ctx_r5.rowData)("column", ctx_r5.column.field)("containerClass", "igx-grid__td-text")("metadata", ctx_r5.searchMetadata);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(!ctx_r5.isEmptyAddRowCell ? ctx_r5.value : ctx_r5.column.header || ctx_r5.column.field);
} }
function IgxGridCellComponent_ng_template_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "igx-input-group", 12);
    ɵngcc0.ɵɵelementStart(2, "input", 13);
    ɵngcc0.ɵɵlistener("input", function IgxGridCellComponent_ng_template_6_ng_container_0_Template_input_input_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.editValue = $event.target.value; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", ctx_r15.editValue)("igxFocus", true);
} }
function IgxGridCellComponent_ng_template_6_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "igx-input-group", 12);
    ɵngcc0.ɵɵelementStart(2, "input", 14);
    ɵngcc0.ɵɵlistener("input", function IgxGridCellComponent_ng_template_6_ng_container_1_Template_input_input_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.editValue = $event.target.value; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", ctx_r16.editValue)("igxFocus", true);
} }
function IgxGridCellComponent_ng_template_6_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "igx-checkbox", 15);
    ɵngcc0.ɵɵlistener("change", function IgxGridCellComponent_ng_template_6_ng_container_2_Template_igx_checkbox_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.editValue = $event.checked; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r17.editValue)("checked", ctx_r17.editValue)("igxFocus", true)("disableRipple", true);
} }
function IgxGridCellComponent_ng_template_6_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "igx-date-picker", 16);
    ɵngcc0.ɵɵlistener("valueChange", function IgxGridCellComponent_ng_template_6_ng_container_3_Template_igx_date_picker_valueChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.editValue = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("width", 100, "%");
    ɵngcc0.ɵɵproperty("outlet", ctx_r18.grid.outlet)("locale", ctx_r18.grid.locale)("value", ctx_r18.editValue)("igxFocus", true)("labelVisibility", false);
} }
function IgxGridCellComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, IgxGridCellComponent_ng_template_6_ng_container_0_Template, 3, 2, "ng-container", 11);
    ɵngcc0.ɵɵtemplate(1, IgxGridCellComponent_ng_template_6_ng_container_1_Template, 3, 2, "ng-container", 11);
    ɵngcc0.ɵɵtemplate(2, IgxGridCellComponent_ng_template_6_ng_container_2_Template, 2, 4, "ng-container", 11);
    ɵngcc0.ɵɵtemplate(3, IgxGridCellComponent_ng_template_6_ng_container_3_Template, 2, 7, "ng-container", 11);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.column.dataType === "string");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.column.dataType === "number");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.column.dataType === "boolean");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.column.dataType === "date");
} }
function IgxGridCellComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function IgxGridCellComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
export class IgxGridCellComponent {
    constructor(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, platformUtil) {
        this.selectionService = selectionService;
        this.crudService = crudService;
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.element = element;
        this.zone = zone;
        this.touchManager = touchManager;
        this.platformUtil = platformUtil;
        this._vIndex = -1;
        /**
         * Sets/gets the highlight class of the cell.
         * Default value is `"igx-highlight"`.
         * ```typescript
         * let highlightClass = this.cell.highlightClass;
         * ```
         * ```typescript
         * this.cell.highlightClass = 'igx-cell-highlight';
         * ```
         * @memberof IgxGridCellComponent
         */
        this.highlightClass = 'igx-highlight';
        /**
         * Sets/gets the active highlight class class of the cell.
         * Default value is `"igx-highlight__active"`.
         * ```typescript
         * let activeHighlightClass = this.cell.activeHighlightClass;
         * ```
         * ```typescript
         * this.cell.activeHighlightClass = 'igx-cell-highlight_active';
         * ```
         * @memberof IgxGridCellComponent
         */
        this.activeHighlightClass = 'igx-highlight__active';
        /**
         * @hidden
         * @internal
         */
        this.lastPinned = false;
        /**
         * @hidden
         * @internal
         */
        this.firstPinned = false;
        /**
         * Returns whether the cell is in edit mode.
         */
        this.editMode = false;
        /**
         * Sets/get the `role` property of the cell.
         * Default value is `"gridcell"`.
         * ```typescript
         * this.cell.role = 'grid-cell';
         * ```
         * ```typescript
         * let cellRole = this.cell.role;
         * ```
         * @memberof IgxGridCellComponent
         */
        this.role = 'gridcell';
        /**
         * Gets the width of the cell.
         * ```typescript
         * let cellWidth = this.cell.width;
         * ```
         * @memberof IgxGridCellComponent
         */
        this.width = '';
        /**
         * @hidden
         */
        this.active = false;
        /**
         * @hidden
         */
        this.displayPinnedChip = false;
        /** @hidden @internal @deprecated */
        this.focused = this.active;
        this._cellSelection = GridSelectionMode.multiple;
        /**
         *
         * @hidden
         * @internal
         */
        this.pointerdown = (event) => {
            if (this.cellSelectionMode !== GridSelectionMode.multiple) {
                this.activate(event);
                return;
            }
            if (!isLeftClick(event)) {
                event.preventDefault();
                this.grid.navigation.setActiveNode({ rowIndex: this.rowIndex, colIndex: this.visibleColumnIndex });
                this.selectionService.addKeyboardRange();
                this.selectionService.initKeyboardState();
                this.selectionService.primaryButton = false;
                // Ensure RMB Click on edited cell does not end cell editing
                if (!this.selected) {
                    this.gridAPI.submit_value();
                }
                return;
            }
            this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);
            this.activate(event);
        };
        /**
         *
         * @hidden
         * @internal
         */
        this.pointerenter = (event) => {
            const isHierarchicalGrid = this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';
            if (isHierarchicalGrid && (!this.grid.navigation.activeNode.gridID || this.grid.navigation.activeNode.gridID !== this.gridID)) {
                return;
            }
            const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);
            if (dragMode) {
                this.grid.cdr.detectChanges();
                if (isIE()) {
                    this.grid.tbody.nativeElement.focus({ preventScroll: true });
                }
            }
        };
        /**
         * @hidden
         * @internal
         */
        this.pointerup = (event) => {
            const isHierarchicalGrid = this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';
            if (!isLeftClick(event) || (isHierarchicalGrid && (!this.grid.navigation.activeNode.gridID ||
                this.grid.navigation.activeNode.gridID !== this.gridID))) {
                return;
            }
            if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {
                this.grid.cdr.detectChanges();
                if (isIE()) {
                    this.grid.tbody.nativeElement.focus({ preventScroll: true });
                }
            }
        };
        /**
         * @hidden
         * @internal
         */
        this.onDoubleClick = (event) => {
            if (event.type === 'doubletap') {
                // prevent double-tap to zoom on iOS
                event.preventDefault();
            }
            if (this.grid.rowEditable && this.row.addRow) {
                this.crudService.enterEditMode(this);
            }
            if (this.editable && !this.editMode && !this.row.deleted && !this.crudService.rowEditingBlocked) {
                this.crudService.enterEditMode(this);
            }
            this.grid.onDoubleClick.emit({
                cell: this,
                event
            });
        };
    }
    /**
     * @hidden
     * @internal
     */
    get isEmptyAddRowCell() {
        return this.row.addRow && (this.value === undefined || this.value === null);
    }
    /**
     * Gets the cell template context object.
     * ```typescript
     *  let context = this.cell.context();
     * ```
     * @memberof IgxGridCellComponent
     */
    get context() {
        return {
            $implicit: this.value,
            cell: this
        };
    }
    /**
     * Gets the cell template.
     * ```typescript
     * let template = this.cell.template;
     * ```
     * @memberof IgxGridCellComponent
     */
    get template() {
        if (this.editMode) {
            const inlineEditorTemplate = this.column.inlineEditorTemplate;
            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;
        }
        if (this.cellTemplate) {
            return this.cellTemplate;
        }
        if (this.grid.rowEditable && this.row.addRow) {
            return this.addRowCellTemplate;
        }
        return this.defaultCellTemplate;
    }
    /**
     * Gets the cell template.
     * ```typescript
     * let template = this.cell.template;
     * ```
     * @memberof IgxGridCellComponent
     */
    get pinnedIndicatorTemplate() {
        if (this.pinnedIndicator) {
            return this.pinnedIndicator;
        }
        return this.defaultPinnedIndicator;
    }
    /**
     * Gets the `id` of the grid in which the cell is stored.
     * ```typescript
     * let gridId = this.cell.gridID;
     * ```
     * @memberof IgxGridCellComponent
     */
    get gridID() {
        return this.row.gridID;
    }
    /**
     * Gets the grid of the cell.
     * ```typescript
     * let grid = this.cell.grid;
     * ```
     * @memberof IgxGridCellComponent
     */
    get grid() {
        return this.gridAPI.grid;
    }
    /**
     * Gets the `index` of the row where the cell is stored.
     * ```typescript
     * let rowIndex = this.cell.rowIndex;
     * ```
     * @memberof IgxGridCellComponent
     */
    get rowIndex() {
        return this.row.index;
    }
    /**
     * Gets the `index` of the cell column.
     * ```typescript
     * let columnIndex = this.cell.columnIndex;
     * ```
     * @memberof IgxGridCellComponent
     */
    get columnIndex() {
        return this.column.index;
    }
    /**
     * Gets the visible `index` of the in which the cell is stored.
     * ```typescript
     * let visibleColumnIndex = this.cell.visibleColumnIndex;
     * ```
     * @memberof IgxGridCellComponent
     */
    get visibleColumnIndex() {
        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;
    }
    set visibleColumnIndex(val) {
        this._vIndex = val;
    }
    /**
     * Gets the ID of the cell.
     * ```typescript
     * let cellID = this.cell.cellID;
     * ```
     * @memberof IgxGridCellComponent
     */
    get cellID() {
        const primaryKey = this.grid.primaryKey;
        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;
        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };
    }
    get attrCellID() {
        return `${this.row.gridID}_${this.rowIndex}_${this.visibleColumnIndex}`;
    }
    get title() {
        return this.editMode || this.cellTemplate ? '' : this.value;
    }
    get booleanClass() {
        return this.column.dataType === 'boolean' && this.value;
    }
    /**
     * Returns a reference to the nativeElement of the cell.
     * ```typescript
     * let cellNativeElement = this.cell.nativeElement;
     * ```
     * @memberof IgxGridCellComponent
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * @hidden
     * @internal
     */
    get cellSelectionMode() {
        return this._cellSelection;
    }
    /**
     * @hidden
     * @internal
     */
    set lastSearchInfo(value) {
        this._lastSearchInfo = value;
        this.highlightText(this._lastSearchInfo.searchText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);
    }
    set cellSelectionMode(value) {
        if (this._cellSelection === value) {
            return;
        }
        this.zone.runOutsideAngular(() => {
            value === GridSelectionMode.multiple ?
                this.addPointerListeners(value) : this.removePointerListeners(this._cellSelection);
        });
        this._cellSelection = value;
    }
    /**
     * Gets whether the cell is editable.
     * ```typescript
     * let isCellReadonly = this.cell.readonly;
     * ```
     * @memberof IgxGridCellComponent
     */
    get readonly() {
        return !this.editable;
    }
    get gridRowSpan() {
        return this.column.gridRowSpan;
    }
    get gridColumnSpan() {
        return this.column.gridColumnSpan;
    }
    get rowEnd() {
        return this.column.rowEnd;
    }
    get colEnd() {
        return this.column.colEnd;
    }
    get rowStart() {
        return this.column.rowStart;
    }
    get colStart() {
        return this.column.colStart;
    }
    get ariaSelected() {
        return this.selected || this.column.selected || this.row.selected;
    }
    /**
     * Gets whether the cell is selected.
     * ```typescript
     * let isSelected = this.cell.selected;
     * ```
     * @memberof IgxGridCellComponent
     */
    get selected() {
        return this.selectionService.selected(this.selectionNode);
    }
    /**
     * Selects/deselects the cell.
     * ```typescript
     * this.cell.selected = true.
     * ```
     * @memberof IgxGridCellComponent
     */
    set selected(val) {
        const node = this.selectionNode;
        val ? this.selectionService.add(node) : this.selectionService.remove(node);
        this.grid.notifyChanges();
    }
    /**
     * Gets whether the cell column is selected.
     * ```typescript
     * let isCellColumnSelected = this.cell.columnSelected;
     * ```
     * @memberof IgxGridCellComponent
     */
    get columnSelected() {
        return this.selectionService.isColumnSelected(this.column.field);
    }
    /**
     * Sets the current edit value while a cell is in edit mode.
     * Only for cell editing mode.
     * ```typescript
     * this.cell.editValue = value;
     * ```
     * @memberof IgxGridCellComponent
     */
    set editValue(value) {
        if (this.crudService.cellInEditMode) {
            this.crudService.cell.editValue = value;
        }
    }
    /**
     * Gets the current edit value while a cell is in edit mode.
     * Only for cell editing mode.
     * ```typescript
     * let editValue = this.cell.editValue;
     * ```
     * @memberof IgxGridCellComponent
     */
    get editValue() {
        if (this.crudService.cellInEditMode) {
            return this.crudService.cell.editValue;
        }
    }
    /**
     * Returns whether the cell is editable.
     */
    get editable() {
        return this.column.editable && !this.row.disabled;
    }
    set highlight(value) {
        this._highlight = value;
        if (this._highlight && this.grid.lastSearchInfo.searchText) {
            this._highlight.highlight(this.grid.lastSearchInfo.searchText, this.grid.lastSearchInfo.caseSensitive, this.grid.lastSearchInfo.exactMatch);
            this._highlight.activateIfNecessary();
        }
    }
    get highlight() {
        return this._highlight;
    }
    get selectionNode() {
        return {
            row: this.rowIndex,
            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,
            layout: this.column.columnLayoutChild ? {
                rowStart: this.column.rowStart,
                colStart: this.column.colStart,
                rowEnd: this.column.rowEnd,
                colEnd: this.column.colEnd,
                columnVisibleIndex: this.visibleColumnIndex
            } : null
        };
    }
    addPointerListeners(selection) {
        if (selection !== GridSelectionMode.multiple) {
            return;
        }
        this.nativeElement.addEventListener('pointerenter', this.pointerenter);
        this.nativeElement.addEventListener('pointerup', this.pointerup);
    }
    removePointerListeners(selection) {
        if (selection !== GridSelectionMode.multiple) {
            return;
        }
        this.nativeElement.removeEventListener('pointerenter', this.pointerenter);
        this.nativeElement.removeEventListener('pointerup', this.pointerup);
    }
    /**
     * @hidden
     * @internal
     */
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.addEventListener('pointerdown', this.pointerdown);
            this.addPointerListeners(this.cellSelectionMode);
            // IE 11 workarounds
            if (isIE()) {
                this.compositionStartHandler = () => this.crudService.isInCompositionMode = true;
                this.compositionEndHandler = () => this.crudService.isInCompositionMode = false;
                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog
                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);
                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);
            }
        });
        if (this.platformUtil.isIOS) {
            this.touchManager.addEventListener(this.nativeElement, 'doubletap', this.onDoubleClick, {
                cssProps: {} /* don't disable user-select, etc */
            });
        }
    }
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy() {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.removeEventListener('pointerdown', this.pointerdown);
            this.removePointerListeners(this.cellSelectionMode);
            if (isIE()) {
                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);
                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);
            }
        });
        this.touchManager.destroy();
    }
    /**
     * @hidden
     * @internal
     */
    _updateCRUDStatus() {
        if (this.editMode) {
            return;
        }
        const crud = this.crudService;
        const editableCell = this.crudService.cell;
        const editMode = !!(crud.row || crud.cell);
        if (this.editable && editMode && !this.row.deleted) {
            if (editableCell) {
                if (this.row.addRow) {
                    this.gridAPI.update_add_cell(editableCell, editableCell.editValue);
                    this.row.rowData = editableCell.rowData;
                }
                else {
                    this.gridAPI.update_cell(editableCell, editableCell.editValue);
                }
                /* This check is related with the following issue #6517:
                 * when edit cell that belongs to a column which is sorted and press tab,
                 * the next cell in edit mode is with wrong value /its context is not updated/;
                 * So we reapply sorting before the next cell enters edit mode.
                 * Also we need to keep the notifyChanges below, because of the current
                 * change detection cycle when we have editing with enabled transactions
                 */
                if (this.grid.sortingExpressions.length && this.grid.sortingExpressions.indexOf(editableCell.column.field)) {
                    this.grid.cdr.detectChanges();
                }
                if (this.crudService.cellEditingBlocked) {
                    return true;
                }
                crud.exitCellEdit();
            }
            this.grid.tbody.nativeElement.focus({ preventScroll: true });
            this.grid.notifyChanges();
            crud.enterEditMode(this);
            return false;
        }
        if (editableCell && crud.sameRow(this.cellID.rowID)) {
            if (this.row.addRow) {
                this.gridAPI.submit_add_value();
                this.row.rowData = editableCell.rowData;
            }
            else {
                this.gridAPI.submit_value();
            }
        }
        else if (editMode && !crud.sameRow(this.cellID.rowID)) {
            this.grid.endEdit(true);
        }
    }
    /**
     * @deprecated
     * Gets whether the cell is selected.
     * ```typescript
     * let isCellSelected = thid.cell.isCellSelected();
     * ```
     * @memberof IgxGridCellComponent
     */
    isCellSelected() {
        return this.selectionService.selected(this.selectionNode);
    }
    /**
     * @hidden
     * @internal
     */
    ngOnChanges(changes) {
        if (changes.value && !changes.value.firstChange) {
            if (this.highlight) {
                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;
                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;
                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;
            }
        }
    }
    /**
     * Starts/ends edit mode for the cell.
     *
     * ```typescript
     * cell.setEditMode(true);
     * ```
     */
    setEditMode(value) {
        if (this.row.deleted) {
            return;
        }
        if (this.editable && value) {
            this.gridAPI.submit_value();
            this.crudService.enterEditMode(this);
        }
        else {
            this.grid.crudService.exitCellEdit();
        }
        this.grid.notifyChanges();
    }
    /**
     * Sets new value to the cell.
     * ```typescript
     * this.cell.update('New Value');
     * ```
     * @memberof IgxGridCellComponent
     */
    // TODO: Refactor
    update(val) {
        if (this.row.deleted) {
            return;
        }
        const cell = this.crudService.createCell(this);
        const args = this.gridAPI.update_cell(cell, val);
        if (this.crudService.cell && this.crudService.sameCell(cell)) {
            if (args.cancel) {
                return;
            }
            this.grid.crudService.exitCellEdit();
        }
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     * @internal
     */
    onClick(event) {
        this.grid.onCellClick.emit({
            cell: this,
            event
        });
    }
    /**
     * @hidden
     * @internal
     */
    onContextMenu(event) {
        this.grid.onContextMenu.emit({
            cell: this,
            event
        });
    }
    /**
     * @hidden
     * @internal
     */
    activate(event) {
        const node = this.selectionNode;
        const shouldEmitSelection = !this.selectionService.isActiveNode(node);
        if (this.selectionService.primaryButton) {
            this._updateCRUDStatus();
            const activeElement = this.selectionService.activeElement;
            const row = activeElement ? this.gridAPI.get_row_by_index(activeElement.row) : null;
            if ((this.crudService.rowEditingBlocked && row && this.row.rowID !== row.rowID) ||
                (this.crudService.cell && this.crudService.cellEditingBlocked)) {
                return;
            }
            this.selectionService.activeElement = node;
        }
        else {
            this.selectionService.activeElement = null;
            if (this.crudService.cellInEditMode && !this.editMode) {
                this.gridAPI.submit_value();
            }
        }
        this.grid.navigation.setActiveNode({ row: this.rowIndex, column: this.visibleColumnIndex });
        this.selectionService.primaryButton = true;
        if (this.cellSelectionMode === GridSelectionMode.multiple && this.selectionService.activeElement) {
            this.selectionService.add(this.selectionService.activeElement, false); // pointer events handle range generation
            this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection, this.nativeElement);
        }
        if (this.grid.isCellSelectable && shouldEmitSelection) {
            this.grid.onSelection.emit({ cell: this, event });
        }
    }
    /**
     * If the provided string matches the text in the cell, the text gets highlighted.
     * ```typescript
     * this.cell.highlightText('Cell Value', true);
     * ```
     * @memberof IgxGridCellComponent
     */
    highlightText(text, caseSensitive, exactMatch) {
        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;
    }
    /**
     * Clears the highlight of the text in the cell.
     * ```typescript
     * this.cell.clearHighLight();
     * ```
     * @memberof IgxGridCellComponent
     */
    clearHighlight() {
        if (this.highlight && this.column.searchable) {
            this.highlight.clearHighlight();
        }
    }
    /**
     * @hidden
     * @internal
     */
    calculateSizeToFit(range) {
        return Math.max(...Array.from(this.nativeElement.children)
            .map((child) => getNodeSizeViaRange(range, child)));
    }
    /**
     * @hidden
     * @internal
     */
    get searchMetadata() {
        const meta = new Map();
        meta.set('pinned', this.grid.isRecordPinnedByViewIndex(this.row.index));
        return meta;
    }
}
IgxGridCellComponent.ɵfac = function IgxGridCellComponent_Factory(t) { return new (t || IgxGridCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxGridSelectionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IgxGridCRUDService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.GridBaseAPIService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.HammerGesturesManager), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.PlatformUtil)); };
IgxGridCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IgxGridCellComponent, selectors: [["igx-grid-cell"]], viewQuery: function IgxGridCellComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(IgxTextHighlightDirective, true, IgxTextHighlightDirective);
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true, TemplateRef);
        ɵngcc0.ɵɵstaticViewQuery(_c3, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.highlight = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultCellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultPinnedIndicator = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inlineEditorTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.addRowCellTemplate = _t.first);
    } }, hostVars: 25, hostBindings: function IgxGridCellComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("dblclick", function IgxGridCellComponent_dblclick_HostBindingHandler($event) { return ctx.onDoubleClick($event); })("click", function IgxGridCellComponent_click_HostBindingHandler($event) { return ctx.onClick($event); })("contextmenu", function IgxGridCellComponent_contextmenu_HostBindingHandler($event) { return ctx.onContextMenu($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("data-rowIndex", ctx.rowIndex)("data-visibleIndex", ctx.visibleColumnIndex)("id", ctx.attrCellID)("title", ctx.title)("aria-readonly", ctx.readonly)("aria-selected", ctx.ariaSelected);
        ɵngcc0.ɵɵclassProp("igx-grid__td--pinned-last", ctx.lastPinned)("igx-grid__td--pinned-first", ctx.firstPinned)("igx-grid__td--editing", ctx.editMode)("igx-grid__td--active", ctx.active)("igx-grid__td--row-pinned-first", ctx.displayPinnedChip)("igx-grid__td--new", ctx.isEmptyAddRowCell)("igx-grid__td--bool-true", ctx.booleanClass)("igx-grid__td--selected", ctx.selected)("igx-grid__td--column-selected", ctx.columnSelected);
    } }, inputs: { lastPinned: "lastPinned", firstPinned: "firstPinned", editMode: "editMode", width: "width", active: "active", displayPinnedChip: "displayPinnedChip", visibleColumnIndex: "visibleColumnIndex", cellSelectionMode: "cellSelectionMode", lastSearchInfo: "lastSearchInfo", column: "column", row: "row", rowData: "rowData", cellTemplate: "cellTemplate", pinnedIndicator: "pinnedIndicator", value: "value", formatter: "formatter" }, features: [ɵngcc0.ɵɵProvidersFeature([HammerGesturesManager]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 10, vars: 4, consts: [["defaultPinnedIndicator", ""], ["defaultCell", ""], ["addRowCell", ""], ["inlineEditor", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "igx-grid__td--pinned-chip", 3, "disabled", "displayDensity", 4, "ngIf"], [1, "igx-grid__td--pinned-chip", 3, "disabled", "displayDensity"], ["igxTextHighlight", "", "class", "igx-grid__td-text", "style", "pointer-events: none;", 3, "cssClass", "activeCssClass", "groupName", "value", "row", "column", "containerClass", "metadata", 4, "ngIf"], [3, "ngClass", 4, "ngIf"], ["igxTextHighlight", "", 1, "igx-grid__td-text", 2, "pointer-events", "none", 3, "cssClass", "activeCssClass", "groupName", "value", "row", "column", "containerClass", "metadata"], [3, "ngClass"], [4, "ngIf"], ["displayDensity", "compact"], ["igxInput", "", 3, "value", "igxFocus", "input"], ["igxInput", "", "type", "number", 3, "value", "igxFocus", "input"], [3, "value", "checked", "igxFocus", "disableRipple", "change"], ["mode", "dropdown", 3, "outlet", "locale", "value", "igxFocus", "labelVisibility", "valueChange"]], template: function IgxGridCellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IgxGridCellComponent_ng_template_0_Template, 1, 1, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, IgxGridCellComponent_ng_template_2_Template, 2, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, IgxGridCellComponent_ng_template_4_Template, 5, 21, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, IgxGridCellComponent_ng_template_6_Template, 4, 4, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(8, IgxGridCellComponent_ng_container_8_Template, 1, 0, "ng-container", 4);
        ɵngcc0.ɵɵtemplate(9, IgxGridCellComponent_ng_container_9_Template, 1, 0, "ng-container", 4);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.pinnedIndicatorTemplate)("ngTemplateOutletContext", ctx.context);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ctx.context);
    } }, directives: [ɵngcc5.NgTemplateOutlet, ɵngcc5.NgIf, ɵngcc6.IgxChipComponent, ɵngcc7.IgxTextHighlightDirective, ɵngcc8.IgxIconComponent, ɵngcc5.NgClass, ɵngcc9.IgxInputGroupComponent, ɵngcc10.IgxInputDirective, ɵngcc11.IgxFocusDirective, ɵngcc12.IgxCheckboxComponent, ɵngcc13.IgxDatePickerComponent], pipes: [ɵngcc14.IgxColumnFormatterPipe, ɵngcc5.DecimalPipe, ɵngcc5.DatePipe], encapsulation: 2, changeDetection: 0 });
IgxGridCellComponent.ctorParameters = () => [
    { type: IgxGridSelectionService },
    { type: IgxGridCRUDService },
    { type: GridBaseAPIService },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone },
    { type: HammerGesturesManager },
    { type: PlatformUtil }
];
IgxGridCellComponent.propDecorators = {
    isEmptyAddRowCell: [{ type: HostBinding, args: ['class.igx-grid__td--new',] }],
    column: [{ type: Input }],
    row: [{ type: Input }],
    rowData: [{ type: Input }],
    cellTemplate: [{ type: Input }],
    pinnedIndicator: [{ type: Input }],
    value: [{ type: Input }],
    formatter: [{ type: Input }],
    rowIndex: [{ type: HostBinding, args: ['attr.data-rowIndex',] }],
    visibleColumnIndex: [{ type: HostBinding, args: ['attr.data-visibleIndex',] }, { type: Input }],
    attrCellID: [{ type: HostBinding, args: ['attr.id',] }],
    title: [{ type: HostBinding, args: ['attr.title',] }],
    booleanClass: [{ type: HostBinding, args: ['class.igx-grid__td--bool-true',] }],
    cellSelectionMode: [{ type: Input }],
    lastSearchInfo: [{ type: Input }],
    lastPinned: [{ type: Input }, { type: HostBinding, args: ['class.igx-grid__td--pinned-last',] }],
    firstPinned: [{ type: Input }, { type: HostBinding, args: ['class.igx-grid__td--pinned-first',] }],
    editMode: [{ type: Input }, { type: HostBinding, args: ['class.igx-grid__td--editing',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    readonly: [{ type: HostBinding, args: ['attr.aria-readonly',] }],
    width: [{ type: Input }],
    active: [{ type: Input }, { type: HostBinding, args: ['class.igx-grid__td--active',] }],
    ariaSelected: [{ type: HostBinding, args: ['attr.aria-selected',] }],
    selected: [{ type: HostBinding, args: ['class.igx-grid__td--selected',] }],
    columnSelected: [{ type: HostBinding, args: ['class.igx-grid__td--column-selected',] }],
    displayPinnedChip: [{ type: Input }, { type: HostBinding, args: ['class.igx-grid__td--row-pinned-first',] }],
    defaultCellTemplate: [{ type: ViewChild, args: ['defaultCell', { read: TemplateRef, static: true },] }],
    defaultPinnedIndicator: [{ type: ViewChild, args: ['defaultPinnedIndicator', { read: TemplateRef, static: true },] }],
    inlineEditorTemplate: [{ type: ViewChild, args: ['inlineEditor', { read: TemplateRef, static: true },] }],
    addRowCellTemplate: [{ type: ViewChild, args: ['addRowCell', { read: TemplateRef, static: true },] }],
    highlight: [{ type: ViewChild, args: [IgxTextHighlightDirective, { read: IgxTextHighlightDirective },] }],
    onDoubleClick: [{ type: HostListener, args: ['dblclick', ['$event'],] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
};
__decorate([
    DeprecateMethod(`'isCellSelected' is deprecated. Use 'selected' property instead.`)
], IgxGridCellComponent.prototype, "isCellSelected", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IgxGridCellComponent, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'igx-grid-cell',
                template: "<ng-template #defaultPinnedIndicator>\n    <igx-chip\n        *ngIf=\"displayPinnedChip\"\n        class=\"igx-grid__td--pinned-chip\"\n        [disabled]=\"true\"\n        [displayDensity]=\"'compact'\"\n        >{{ grid.resourceStrings.igx_grid_pinned_row_indicator }}</igx-chip\n    >\n</ng-template>\n<ng-template #defaultCell>\n    <div *ngIf=\"column.dataType !== 'boolean'\"\n        igxTextHighlight\n        class=\"igx-grid__td-text\"\n        style=\"pointer-events: none;\"\n        [cssClass]=\"highlightClass\"\n        [activeCssClass]=\"activeHighlightClass\"\n        [groupName]=\"gridID\"\n        [value]=\"\n            formatter\n                ? (value | columnFormatter: formatter)\n                : column.dataType === 'number'\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\n                : column.dataType === 'date'\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\n                : value\n        \"\n        [row]=\"rowData\"\n        [column]=\"this.column.field\"\n        [containerClass]=\"'igx-grid__td-text'\"\n        [metadata]=\"searchMetadata\"\n    >{{\n            formatter\n                ? (value | columnFormatter: formatter)\n                : column.dataType === \"number\"\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\n                : column.dataType === \"date\"\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\n                : value\n        }}</div>\n    <igx-icon\n        *ngIf=\"column.dataType === 'boolean'\"\n        [ngClass]=\"{ 'igx-icon--success': value, 'igx-icon--error': !value }\"\n        >{{ value ? \"check\" : \"close\" }}</igx-icon\n    >\n</ng-template>\n<ng-template #addRowCell let-cell=\"cell\">\n    <div igxTextHighlight class=\"igx-grid__td-text\" style=\"pointer-events: none\"\n    [cssClass]=\"highlightClass\"\n    [activeCssClass]=\"activeHighlightClass\"\n    [groupName]=\"gridID\"\n    [value]=\"formatter ? (value | columnFormatter:formatter) : column.dataType === 'number' ? (value | number:column.pipeArgs.digitsInfo:grid.locale) : column.dataType === 'date' ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale) : value\"\n    [row]=\"rowData\"\n    [column]=\"this.column.field\"\n    [containerClass]=\"'igx-grid__td-text'\"\n    [metadata]=\"searchMetadata\">{{\n        !isEmptyAddRowCell ? value : (column.header || column.field)\n    }}</div>\n</ng-template>\n<ng-template #inlineEditor let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input\n                igxInput\n                [value]=\"editValue\"\n                (input)=\"editValue = $event.target.value\"\n                [igxFocus]=\"true\"\n            />\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input\n                igxInput\n                [value]=\"editValue\"\n                (input)=\"editValue = $event.target.value\"\n                [igxFocus]=\"true\"\n                type=\"number\"\n            />\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox\n            (change)=\"editValue = $event.checked\"\n            [value]=\"editValue\"\n            [checked]=\"editValue\"\n            [igxFocus]=\"true\"\n            [disableRipple]=\"true\"\n        ></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-date-picker\n            [style.width.%]=\"100\"\n            [outlet]=\"grid.outlet\"\n            mode=\"dropdown\"\n            [locale]=\"grid.locale\"\n            [(value)]=\"editValue\"\n            [igxFocus]=\"true\"\n            [labelVisibility]=\"false\"\n        >\n        </igx-date-picker>\n    </ng-container>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"pinnedIndicatorTemplate; context: context\">\n</ng-container>\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n",
                providers: [HammerGesturesManager]
            }]
    }], function () { return [{ type: ɵngcc1.IgxGridSelectionService }, { type: ɵngcc1.IgxGridCRUDService }, { type: ɵngcc2.GridBaseAPIService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.HammerGesturesManager }, { type: ɵngcc4.PlatformUtil }]; }, { lastPinned: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.igx-grid__td--pinned-last']
        }], firstPinned: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.igx-grid__td--pinned-first']
        }], editMode: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.igx-grid__td--editing']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }], width: [{
            type: Input
        }], active: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.igx-grid__td--active']
        }], displayPinnedChip: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.igx-grid__td--row-pinned-first']
        }], onDoubleClick: [{
            type: HostListener,
            args: ['dblclick', ['$event']]
        }], isEmptyAddRowCell: [{
            type: HostBinding,
            args: ['class.igx-grid__td--new']
        }], rowIndex: [{
            type: HostBinding,
            args: ['attr.data-rowIndex']
        }], visibleColumnIndex: [{
            type: HostBinding,
            args: ['attr.data-visibleIndex']
        }, {
            type: Input
        }], attrCellID: [{
            type: HostBinding,
            args: ['attr.id']
        }], title: [{
            type: HostBinding,
            args: ['attr.title']
        }], booleanClass: [{
            type: HostBinding,
            args: ['class.igx-grid__td--bool-true']
        }], cellSelectionMode: [{
            type: Input
        }], lastSearchInfo: [{
            type: Input
        }], readonly: [{
            type: HostBinding,
            args: ['attr.aria-readonly']
        }], ariaSelected: [{
            type: HostBinding,
            args: ['attr.aria-selected']
        }], selected: [{
            type: HostBinding,
            args: ['class.igx-grid__td--selected']
        }], columnSelected: [{
            type: HostBinding,
            args: ['class.igx-grid__td--column-selected']
        }], highlight: [{
            type: ViewChild,
            args: [IgxTextHighlightDirective, { read: IgxTextHighlightDirective }]
        }], 
    /**
     * @hidden
     * @internal
     */
    onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], 
    /**
     * @hidden
     * @internal
     */
    onContextMenu: [{
            type: HostListener,
            args: ['contextmenu', ['$event']]
        }], column: [{
            type: Input
        }], row: [{
            type: Input
        }], rowData: [{
            type: Input
        }], cellTemplate: [{
            type: Input
        }], pinnedIndicator: [{
            type: Input
        }], value: [{
            type: Input
        }], formatter: [{
            type: Input
        }], defaultCellTemplate: [{
            type: ViewChild,
            args: ['defaultCell', { read: TemplateRef, static: true }]
        }], defaultPinnedIndicator: [{
            type: ViewChild,
            args: ['defaultPinnedIndicator', { read: TemplateRef, static: true }]
        }], inlineEditorTemplate: [{
            type: ViewChild,
            args: ['inlineEditor', { read: TemplateRef, static: true }]
        }], addRowCellTemplate: [{
            type: ViewChild,
            args: ['addRowCell', { read: TemplateRef, static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,